/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./main.mjs":
/*!******************!*\
  !*** ./main.mjs ***!
  \******************/
/***/ ((__unused_webpack___webpack_module__, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("/* harmony import */ var fast_text_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-text-encoding */ \"./node_modules/fast-text-encoding/text.min.js\");\n/* harmony import */ var _electric_sql_pglite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @electric-sql/pglite */ \"./node_modules/@electric-sql/pglite/dist/index.js\");\n\n\n\nglobalThis.runQuery = function() {\n  const db = new _electric_sql_pglite__WEBPACK_IMPORTED_MODULE_1__.PGlite();\n  console.log(1);\n\n  return db.query('SELECT \"Hello world\" AS message;')\n    .then(result => {\n    console.log(result)\n      return db.close().then(() => {\n\n\n        return result.rows;\n      });\n    })\n    .catch(err => {\n      console.error(\"Query failed:\", err);\n      throw err;\n    });\n};\n\n// Test function using plain Promises\nglobalThis.test = function() {\n  return runQuery()\n    .then(result => {\n      console.log(\"Result:\", result);\n      return result; // Return the result so Java can access it\n    })\n    .catch(err => {\n      console.error(\"Error:\", err);\n      throw err;\n    });\n};\n\n\nconsole.log(test());\n\n//# sourceURL=webpack://pglitedemo/./main.mjs?");

/***/ }),

/***/ "./node_modules/@electric-sql/pglite/dist/chunk-A7RFOIQ7.js":
/*!******************************************************************!*\
  !*** ./node_modules/@electric-sql/pglite/dist/chunk-A7RFOIQ7.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ z)\n/* harmony export */ });\n/* harmony import */ var _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-EADU5A67.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-EADU5A67.js\");\n/* harmony import */ var _chunk_STOZMFXW_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-STOZMFXW.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-STOZMFXW.js\");\n/* harmony import */ var _chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-BTBUZ646.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-BTBUZ646.js\");\n\n\n\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.j)();\nvar b,\n  u,\n  r,\n  l,\n  g,\n  h,\n  R,\n  z = class {\n    constructor() {\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.f)(this, r);\n      this.serializers = {\n        ..._chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.b\n      };\n      this.parsers = {\n        ..._chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.a\n      };\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.f)(this, b, !1);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.f)(this, u, !1);\n    }\n    async _initArrayTypes({\n      force: t = !1\n    } = {}) {\n      if ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.e)(this, b) && !t) return;\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.g)(this, b, !0);\n      let e = await this.query(`\n      SELECT b.oid, b.typarray\n      FROM pg_catalog.pg_type a\n      LEFT JOIN pg_catalog.pg_type b ON b.oid = a.typelem\n      WHERE a.typcategory = 'A'\n      GROUP BY b.oid, b.typarray\n      ORDER BY b.oid\n    `);\n      for (let s of e.rows) this.serializers[s.typarray] = i => (0,_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.c)(i, this.serializers[s.oid], s.typarray), this.parsers[s.typarray] = i => (0,_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.d)(i, this.parsers[s.oid], s.typarray);\n    }\n    async refreshArrayTypes() {\n      await this._initArrayTypes({\n        force: !0\n      });\n    }\n    async query(t, e, s) {\n      return await this._checkReady(), await this._runExclusiveTransaction(async () => await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, g).call(this, t, e, s));\n    }\n    async sql(t, ...e) {\n      let {\n        query: s,\n        params: i\n      } = (0,_chunk_STOZMFXW_js__WEBPACK_IMPORTED_MODULE_1__.d)(t, ...e);\n      return await this.query(s, i);\n    }\n    async exec(t, e) {\n      return await this._checkReady(), await this._runExclusiveTransaction(async () => await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, h).call(this, t, e));\n    }\n    async describeQuery(t, e) {\n      try {\n        await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.parse({\n          text: t,\n          types: e?.paramTypes\n        }), e);\n        let s = await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.describe({\n            type: \"S\"\n          }), e),\n          i = s.messages.find(n => n.name === \"parameterDescription\"),\n          c = s.messages.find(n => n.name === \"rowDescription\"),\n          y = i?.dataTypeIDs.map(n => ({\n            dataTypeID: n,\n            serializer: this.serializers[n]\n          })) ?? [],\n          m = c?.fields.map(n => ({\n            name: n.name,\n            dataTypeID: n.dataTypeID,\n            parser: this.parsers[n.dataTypeID]\n          })) ?? [];\n        return {\n          queryParams: y,\n          resultFields: m\n        };\n      } finally {\n        await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.sync(), e);\n      }\n    }\n    async transaction(t) {\n      return await this._checkReady(), await this._runExclusiveTransaction(async () => {\n        await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, h).call(this, \"BEGIN\"), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.g)(this, u, !0);\n        let e = !1,\n          s = () => {\n            if (e) throw new Error(\"Transaction is closed\");\n          },\n          i = {\n            query: async (c, y, m) => (s(), await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, g).call(this, c, y, m)),\n            sql: async (c, ...y) => {\n              let {\n                query: m,\n                params: n\n              } = (0,_chunk_STOZMFXW_js__WEBPACK_IMPORTED_MODULE_1__.d)(c, ...y);\n              return await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, g).call(this, m, n);\n            },\n            exec: async (c, y) => (s(), await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, h).call(this, c, y)),\n            rollback: async () => {\n              s(), await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, h).call(this, \"ROLLBACK\"), e = !0;\n            },\n            get closed() {\n              return e;\n            }\n          };\n        try {\n          let c = await t(i);\n          return e || (e = !0, await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, h).call(this, \"COMMIT\")), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.g)(this, u, !1), c;\n        } catch (c) {\n          throw e || (await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, h).call(this, \"ROLLBACK\")), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.g)(this, u, !1), c;\n        }\n      });\n    }\n    async runExclusive(t) {\n      return await this._runExclusiveQuery(t);\n    }\n  };\nb = new WeakMap(), u = new WeakMap(), r = new WeakSet(), l = async function (t, e = {}) {\n  return await this.execProtocol(t, {\n    ...e,\n    syncToFs: !1\n  });\n}, g = async function (t, e = [], s) {\n  return await this._runExclusiveQuery(async () => {\n    (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, R).call(this, \"runQuery\", t, e, s), await this._handleBlob(s?.blob);\n    let i;\n    try {\n      let {\n          messages: y\n        } = await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.parse({\n          text: t,\n          types: s?.paramTypes\n        }), s),\n        m = (0,_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.g)((await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.describe({\n          type: \"S\"\n        }), s)).messages),\n        n = e.map((T, B) => {\n          let x = m[B];\n          if (T == null) return null;\n          let _ = s?.serializers?.[x] ?? this.serializers[x];\n          return _ ? _(T) : T.toString();\n        });\n      i = [...y, ...(await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.bind({\n        values: n\n      }), s)).messages, ...(await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.describe({\n        type: \"P\"\n      }), s)).messages, ...(await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.execute({}), s)).messages];\n    } finally {\n      await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.sync(), s);\n    }\n    await this._cleanupBlob(), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.e)(this, u) || (await this.syncToFs());\n    let c = await this._getWrittenBlob();\n    return (0,_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.f)(i, this.parsers, s, c)[0];\n  });\n}, h = async function (t, e) {\n  return await this._runExclusiveQuery(async () => {\n    (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, R).call(this, \"runExec\", t, e), await this._handleBlob(e?.blob);\n    let s;\n    try {\n      s = (await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.query(t), e)).messages;\n    } finally {\n      await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.h)(this, r, l).call(this, _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.i.sync(), e);\n    }\n    this._cleanupBlob(), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_2__.e)(this, u) || (await this.syncToFs());\n    let i = await this._getWrittenBlob();\n    return (0,_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_0__.f)(s, this.parsers, e, i);\n  });\n}, R = function (...t) {\n  this.debug > 0 && console.log(...t);\n};\n\n\n//# sourceURL=webpack://pglitedemo/./node_modules/@electric-sql/pglite/dist/chunk-A7RFOIQ7.js?");

/***/ }),

/***/ "./node_modules/@electric-sql/pglite/dist/chunk-BTBUZ646.js":
/*!******************************************************************!*\
  !*** ./node_modules/@electric-sql/pglite/dist/chunk-BTBUZ646.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ D),\n/* harmony export */   b: () => (/* binding */ F),\n/* harmony export */   c: () => (/* binding */ L),\n/* harmony export */   d: () => (/* binding */ P),\n/* harmony export */   e: () => (/* binding */ h),\n/* harmony export */   f: () => (/* binding */ R),\n/* harmony export */   g: () => (/* binding */ x),\n/* harmony export */   h: () => (/* binding */ T),\n/* harmony export */   i: () => (/* binding */ U),\n/* harmony export */   j: () => (/* binding */ u)\n/* harmony export */ });\nvar p = Object.create;\nvar i = Object.defineProperty;\nvar c = Object.getOwnPropertyDescriptor;\nvar f = Object.getOwnPropertyNames;\nvar l = Object.getPrototypeOf,\n  s = Object.prototype.hasOwnProperty;\nvar a = t => {\n  throw TypeError(t);\n};\nvar _ = (t, e, o) => e in t ? i(t, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: o\n}) : t[e] = o;\nvar d = (t, e) => () => (t && (e = t(t = 0)), e);\nvar D = (t, e) => () => (e || t((e = {\n    exports: {}\n  }).exports, e), e.exports),\n  F = (t, e) => {\n    for (var o in e) i(t, o, {\n      get: e[o],\n      enumerable: !0\n    });\n  },\n  g = (t, e, o, m) => {\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let r of f(e)) !s.call(t, r) && r !== o && i(t, r, {\n      get: () => e[r],\n      enumerable: !(m = c(e, r)) || m.enumerable\n    });\n    return t;\n  };\nvar L = (t, e, o) => (o = t != null ? p(l(t)) : {}, g(e || !t || !t.__esModule ? i(o, \"default\", {\n  value: t,\n  enumerable: !0\n}) : o, t));\nvar P = (t, e, o) => _(t, typeof e != \"symbol\" ? e + \"\" : e, o),\n  n = (t, e, o) => e.has(t) || a(\"Cannot \" + o);\nvar h = (t, e, o) => (n(t, e, \"read from private field\"), o ? o.call(t) : e.get(t)),\n  R = (t, e, o) => e.has(t) ? a(\"Cannot add the same private member more than once\") : e instanceof WeakSet ? e.add(t) : e.set(t, o),\n  x = (t, e, o, m) => (n(t, e, \"write to private field\"), m ? m.call(t, o) : e.set(t, o), o),\n  T = (t, e, o) => (n(t, e, \"access private method\"), o);\nvar U = (t, e, o, m) => ({\n  set _(r) {\n    x(t, e, r, o);\n  },\n  get _() {\n    return h(t, e, m);\n  }\n});\nvar u = d(() => {\n  \"use strict\";\n});\n\n\n//# sourceURL=webpack://pglitedemo/./node_modules/@electric-sql/pglite/dist/chunk-BTBUZ646.js?");

/***/ }),

/***/ "./node_modules/@electric-sql/pglite/dist/chunk-EADU5A67.js":
/*!******************************************************************!*\
  !*** ./node_modules/@electric-sql/pglite/dist/chunk-EADU5A67.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ ln),\n/* harmony export */   b: () => (/* binding */ cn),\n/* harmony export */   c: () => (/* binding */ Ke),\n/* harmony export */   d: () => (/* binding */ yn),\n/* harmony export */   f: () => (/* binding */ bn),\n/* harmony export */   g: () => (/* binding */ De),\n/* harmony export */   i: () => (/* binding */ O),\n/* harmony export */   j: () => (/* binding */ E),\n/* harmony export */   k: () => (/* binding */ X),\n/* harmony export */   l: () => (/* binding */ ee),\n/* harmony export */   m: () => (/* binding */ ne),\n/* harmony export */   o: () => (/* binding */ ye),\n/* harmony export */   q: () => (/* binding */ Fe),\n/* harmony export */   r: () => (/* binding */ Rr),\n/* harmony export */   s: () => (/* binding */ Tr),\n/* harmony export */   t: () => (/* binding */ Er),\n/* harmony export */   x: () => (/* binding */ Nr)\n/* harmony export */ });\n/* unused harmony exports e, h, n, p, u, v, w */\n/* harmony import */ var _chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-BTBUZ646.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-BTBUZ646.js\");\n\nvar hn = {};\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.b)(hn, {\n  ABSTIME: () => Et,\n  ACLITEM: () => Vt,\n  BIT: () => Wt,\n  BOOL: () => be,\n  BPCHAR: () => _e,\n  BYTEA: () => ge,\n  CHAR: () => gt,\n  CID: () => St,\n  CIDR: () => Tt,\n  CIRCLE: () => Ut,\n  DATE: () => He,\n  FLOAT4: () => je,\n  FLOAT8: () => Qe,\n  GTSVECTOR: () => rn,\n  INET: () => kt,\n  INT2: () => ve,\n  INT4: () => Ge,\n  INT8: () => we,\n  INTERVAL: () => vt,\n  JSON: () => Ae,\n  JSONB: () => Ye,\n  MACADDR: () => Ot,\n  MACADDR8: () => Nt,\n  MONEY: () => Lt,\n  NUMERIC: () => Qt,\n  OID: () => We,\n  PATH: () => Mt,\n  PG_DEPENDENCIES: () => en,\n  PG_LSN: () => Xt,\n  PG_NDISTINCT: () => Zt,\n  PG_NODE_TREE: () => Bt,\n  POLYGON: () => Rt,\n  REFCURSOR: () => _t,\n  REGCLASS: () => Yt,\n  REGCONFIG: () => sn,\n  REGDICTIONARY: () => an,\n  REGNAMESPACE: () => on,\n  REGOPER: () => Ht,\n  REGOPERATOR: () => qt,\n  REGPROC: () => wt,\n  REGPROCEDURE: () => zt,\n  REGROLE: () => un,\n  REGTYPE: () => $t,\n  RELTIME: () => Ct,\n  SMGR: () => It,\n  TEXT: () => F,\n  TID: () => At,\n  TIME: () => Ft,\n  TIMESTAMP: () => qe,\n  TIMESTAMPTZ: () => xe,\n  TIMETZ: () => Gt,\n  TINTERVAL: () => Pt,\n  TSQUERY: () => nn,\n  TSVECTOR: () => tn,\n  TXID_SNAPSHOT: () => Jt,\n  UUID: () => Kt,\n  VARBIT: () => jt,\n  VARCHAR: () => ze,\n  XID: () => xt,\n  XML: () => Dt,\n  arrayParser: () => yn,\n  arraySerializer: () => Ke,\n  parseType: () => ue,\n  parsers: () => ln,\n  serializers: () => cn,\n  types: () => $e\n});\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\nvar ht = globalThis.JSON.parse,\n  bt = globalThis.JSON.stringify,\n  be = 16,\n  ge = 17,\n  gt = 18,\n  we = 20,\n  ve = 21,\n  Ge = 23,\n  wt = 24,\n  F = 25,\n  We = 26,\n  At = 27,\n  xt = 28,\n  St = 29,\n  Ae = 114,\n  Dt = 142,\n  Bt = 194,\n  It = 210,\n  Mt = 602,\n  Rt = 604,\n  Tt = 650,\n  je = 700,\n  Qe = 701,\n  Et = 702,\n  Ct = 703,\n  Pt = 704,\n  Ut = 718,\n  Nt = 774,\n  Lt = 790,\n  Ot = 829,\n  kt = 869,\n  Vt = 1033,\n  _e = 1042,\n  ze = 1043,\n  He = 1082,\n  Ft = 1083,\n  qe = 1114,\n  xe = 1184,\n  vt = 1186,\n  Gt = 1266,\n  Wt = 1560,\n  jt = 1562,\n  Qt = 1700,\n  _t = 1790,\n  zt = 2202,\n  Ht = 2203,\n  qt = 2204,\n  Yt = 2205,\n  $t = 2206,\n  Kt = 2950,\n  Jt = 2970,\n  Xt = 3220,\n  Zt = 3361,\n  en = 3402,\n  tn = 3614,\n  nn = 3615,\n  rn = 3642,\n  sn = 3734,\n  an = 3769,\n  Ye = 3802,\n  on = 4089,\n  un = 4096,\n  $e = {\n    string: {\n      to: F,\n      from: [F, ze, _e],\n      serialize: e => {\n        if (typeof e == \"string\") return e;\n        if (typeof e == \"number\") return e.toString();\n        throw new Error(\"Invalid input for string type\");\n      },\n      parse: e => e\n    },\n    number: {\n      to: 0,\n      from: [ve, Ge, We, je, Qe],\n      serialize: e => e.toString(),\n      parse: e => +e\n    },\n    bigint: {\n      to: we,\n      from: [we],\n      serialize: e => e.toString(),\n      parse: e => {\n        let t = BigInt(e);\n        return t < Number.MIN_SAFE_INTEGER || t > Number.MAX_SAFE_INTEGER ? t : Number(t);\n      }\n    },\n    json: {\n      to: Ae,\n      from: [Ae, Ye],\n      serialize: e => typeof e == \"string\" ? e : bt(e),\n      parse: e => ht(e)\n    },\n    boolean: {\n      to: be,\n      from: [be],\n      serialize: e => {\n        if (typeof e != \"boolean\") throw new Error(\"Invalid input for boolean type\");\n        return e ? \"t\" : \"f\";\n      },\n      parse: e => e === \"t\"\n    },\n    date: {\n      to: xe,\n      from: [He, qe, xe],\n      serialize: e => {\n        if (typeof e == \"string\") return e;\n        if (typeof e == \"number\") return new Date(e).toISOString();\n        if (e instanceof Date) return e.toISOString();\n        throw new Error(\"Invalid input for date type\");\n      },\n      parse: e => new Date(e)\n    },\n    bytea: {\n      to: ge,\n      from: [ge],\n      serialize: e => {\n        if (!(e instanceof Uint8Array)) throw new Error(\"Invalid input for bytea type\");\n        return \"\\\\x\" + Array.from(e).map(t => t.toString(16).padStart(2, \"0\")).join(\"\");\n      },\n      parse: e => {\n        let t = e.slice(2);\n        return Uint8Array.from({\n          length: t.length / 2\n        }, (n, r) => parseInt(t.substring(r * 2, (r + 1) * 2), 16));\n      }\n    }\n  },\n  Se = pn($e),\n  ln = Se.parsers,\n  cn = Se.serializers;\nfunction ue(e, t, n) {\n  if (e === null) return null;\n  let r = n?.[t] ?? Se.parsers[t];\n  return r ? r(e, t) : e;\n}\nfunction pn(e) {\n  return Object.keys(e).reduce(({\n    parsers: t,\n    serializers: n\n  }, r) => {\n    let {\n      to: i,\n      from: a,\n      serialize: u,\n      parse: d\n    } = e[r];\n    return n[i] = u, n[r] = u, t[r] = d, Array.isArray(a) ? a.forEach(c => {\n      t[c] = d, n[c] = u;\n    }) : (t[a] = d, n[a] = u), {\n      parsers: t,\n      serializers: n\n    };\n  }, {\n    parsers: {},\n    serializers: {}\n  });\n}\nvar dn = /\\\\/g,\n  fn = /\"/g;\nfunction mn(e) {\n  return e.replace(dn, \"\\\\\\\\\").replace(fn, '\\\\\"');\n}\nfunction Ke(e, t, n) {\n  if (Array.isArray(e) === !1) return e;\n  if (!e.length) return \"{}\";\n  let r = e[0],\n    i = n === 1020 ? \";\" : \",\";\n  return Array.isArray(r) ? `{${e.map(a => Ke(a, t, n)).join(i)}}` : `{${e.map(a => (a === void 0 && (a = null), a === null ? \"null\" : '\"' + mn(t ? t(a) : a.toString()) + '\"')).join(i)}}`;\n}\nvar he = {\n  i: 0,\n  char: null,\n  str: \"\",\n  quoted: !1,\n  last: 0,\n  p: null\n};\nfunction yn(e, t, n) {\n  return he.i = he.last = 0, Je(he, e, t, n)[0];\n}\nfunction Je(e, t, n, r) {\n  let i = [],\n    a = r === 1020 ? \";\" : \",\";\n  for (; e.i < t.length; e.i++) {\n    if (e.char = t[e.i], e.quoted) e.char === \"\\\\\" ? e.str += t[++e.i] : e.char === '\"' ? (i.push(n ? n(e.str) : e.str), e.str = \"\", e.quoted = t[e.i + 1] === '\"', e.last = e.i + 2) : e.str += e.char;else if (e.char === '\"') e.quoted = !0;else if (e.char === \"{\") e.last = ++e.i, i.push(Je(e, t, n, r));else if (e.char === \"}\") {\n      e.quoted = !1, e.last < e.i && i.push(n ? n(t.slice(e.last, e.i)) : t.slice(e.last, e.i)), e.last = e.i + 1;\n      break;\n    } else e.char === a && e.p !== \"}\" && e.p !== '\"' && (i.push(n ? n(t.slice(e.last, e.i)) : t.slice(e.last, e.i)), e.last = e.i + 1);\n    e.p = e.char;\n  }\n  return e.last < e.i && i.push(n ? n(t.slice(e.last, e.i + 1)) : t.slice(e.last, e.i + 1)), i;\n}\nvar wn = {};\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.b)(wn, {\n  parseDescribeStatementResults: () => De,\n  parseResults: () => bn\n});\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\nfunction bn(e, t, n, r) {\n  let i = [],\n    a = {\n      rows: [],\n      fields: []\n    },\n    u = 0,\n    d = {\n      ...t,\n      ...n?.parsers\n    };\n  return e.forEach(c => {\n    switch (c.name) {\n      case \"rowDescription\":\n        {\n          let V = c;\n          a.fields = V.fields.map(T => ({\n            name: T.name,\n            dataTypeID: T.dataTypeID\n          }));\n          break;\n        }\n      case \"dataRow\":\n        {\n          if (!a) break;\n          let V = c;\n          n?.rowMode === \"array\" ? a.rows.push(V.fields.map((T, ie) => ue(T, a.fields[ie].dataTypeID, d))) : a.rows.push(Object.fromEntries(V.fields.map((T, ie) => [a.fields[ie].name, ue(T, a.fields[ie].dataTypeID, d)])));\n          break;\n        }\n      case \"commandComplete\":\n        {\n          u += gn(c), i.push({\n            ...a,\n            affectedRows: u,\n            ...(r ? {\n              blob: r\n            } : {})\n          }), a = {\n            rows: [],\n            fields: []\n          };\n          break;\n        }\n    }\n  }), i.length === 0 && i.push({\n    affectedRows: 0,\n    rows: [],\n    fields: []\n  }), i;\n}\nfunction gn(e) {\n  let t = e.text.split(\" \");\n  switch (t[0]) {\n    case \"INSERT\":\n      return parseInt(t[2], 10);\n    case \"UPDATE\":\n    case \"DELETE\":\n    case \"COPY\":\n      return parseInt(t[1], 10);\n    default:\n      return 0;\n  }\n}\nfunction De(e) {\n  let t = e.find(n => n.name === \"parameterDescription\");\n  return t ? t.dataTypeIDs : [];\n}\nvar Ue = {};\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.b)(Ue, {\n  AuthenticationCleartextPassword: () => G,\n  AuthenticationMD5Password: () => W,\n  AuthenticationOk: () => v,\n  AuthenticationSASL: () => j,\n  AuthenticationSASLContinue: () => Q,\n  AuthenticationSASLFinal: () => _,\n  BackendKeyDataMessage: () => J,\n  CommandCompleteMessage: () => ee,\n  CopyDataMessage: () => z,\n  CopyResponse: () => H,\n  DataRowMessage: () => te,\n  DatabaseError: () => E,\n  Field: () => q,\n  NoticeMessage: () => ne,\n  NotificationResponseMessage: () => X,\n  ParameterDescriptionMessage: () => $,\n  ParameterStatusMessage: () => K,\n  ReadyForQueryMessage: () => Z,\n  RowDescriptionMessage: () => Y,\n  bindComplete: () => Ie,\n  closeComplete: () => Me,\n  copyDone: () => Pe,\n  emptyQuery: () => Ce,\n  noData: () => Re,\n  parseComplete: () => Be,\n  portalSuspended: () => Te,\n  replicationStart: () => Ee\n});\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\nvar Be = {\n    name: \"parseComplete\",\n    length: 5\n  },\n  Ie = {\n    name: \"bindComplete\",\n    length: 5\n  },\n  Me = {\n    name: \"closeComplete\",\n    length: 5\n  },\n  Re = {\n    name: \"noData\",\n    length: 5\n  },\n  Te = {\n    name: \"portalSuspended\",\n    length: 5\n  },\n  Ee = {\n    name: \"replicationStart\",\n    length: 4\n  },\n  Ce = {\n    name: \"emptyQuery\",\n    length: 4\n  },\n  Pe = {\n    name: \"copyDone\",\n    length: 4\n  },\n  v = class {\n    constructor(t) {\n      this.length = t;\n      this.name = \"authenticationOk\";\n    }\n  },\n  G = class {\n    constructor(t) {\n      this.length = t;\n      this.name = \"authenticationCleartextPassword\";\n    }\n  },\n  W = class {\n    constructor(t, n) {\n      this.length = t;\n      this.salt = n;\n      this.name = \"authenticationMD5Password\";\n    }\n  },\n  j = class {\n    constructor(t, n) {\n      this.length = t;\n      this.mechanisms = n;\n      this.name = \"authenticationSASL\";\n    }\n  },\n  Q = class {\n    constructor(t, n) {\n      this.length = t;\n      this.data = n;\n      this.name = \"authenticationSASLContinue\";\n    }\n  },\n  _ = class {\n    constructor(t, n) {\n      this.length = t;\n      this.data = n;\n      this.name = \"authenticationSASLFinal\";\n    }\n  },\n  E = class extends Error {\n    constructor(n, r, i) {\n      super(n);\n      this.length = r;\n      this.name = i;\n    }\n  },\n  z = class {\n    constructor(t, n) {\n      this.length = t;\n      this.chunk = n;\n      this.name = \"copyData\";\n    }\n  },\n  H = class {\n    constructor(t, n, r, i) {\n      this.length = t;\n      this.name = n;\n      this.binary = r;\n      this.columnTypes = new Array(i);\n    }\n  },\n  q = class {\n    constructor(t, n, r, i, a, u, d) {\n      this.name = t;\n      this.tableID = n;\n      this.columnID = r;\n      this.dataTypeID = i;\n      this.dataTypeSize = a;\n      this.dataTypeModifier = u;\n      this.format = d;\n    }\n  },\n  Y = class {\n    constructor(t, n) {\n      this.length = t;\n      this.fieldCount = n;\n      this.name = \"rowDescription\";\n      this.fields = new Array(this.fieldCount);\n    }\n  },\n  $ = class {\n    constructor(t, n) {\n      this.length = t;\n      this.parameterCount = n;\n      this.name = \"parameterDescription\";\n      this.dataTypeIDs = new Array(this.parameterCount);\n    }\n  },\n  K = class {\n    constructor(t, n, r) {\n      this.length = t;\n      this.parameterName = n;\n      this.parameterValue = r;\n      this.name = \"parameterStatus\";\n    }\n  },\n  J = class {\n    constructor(t, n, r) {\n      this.length = t;\n      this.processID = n;\n      this.secretKey = r;\n      this.name = \"backendKeyData\";\n    }\n  },\n  X = class {\n    constructor(t, n, r, i) {\n      this.length = t;\n      this.processId = n;\n      this.channel = r;\n      this.payload = i;\n      this.name = \"notification\";\n    }\n  },\n  Z = class {\n    constructor(t, n) {\n      this.length = t;\n      this.status = n;\n      this.name = \"readyForQuery\";\n    }\n  },\n  ee = class {\n    constructor(t, n) {\n      this.length = t;\n      this.text = n;\n      this.name = \"commandComplete\";\n    }\n  },\n  te = class {\n    constructor(t, n) {\n      this.length = t;\n      this.fields = n;\n      this.name = \"dataRow\";\n      this.fieldCount = n.length;\n    }\n  },\n  ne = class {\n    constructor(t, n) {\n      this.length = t;\n      this.message = n;\n      this.name = \"notice\";\n    }\n  };\nvar zn = {};\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.b)(zn, {\n  Parser: () => ye,\n  messages: () => Ue,\n  serialize: () => O\n});\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\nfunction C(e) {\n  let t = e.length;\n  for (let n = e.length - 1; n >= 0; n--) {\n    let r = e.charCodeAt(n);\n    r > 127 && r <= 2047 ? t++ : r > 2047 && r <= 65535 && (t += 2), r >= 56320 && r <= 57343 && n--;\n  }\n  return t;\n}\nvar b,\n  g,\n  U,\n  ce,\n  N,\n  x,\n  le,\n  P,\n  Xe,\n  R = class {\n    constructor(t = 256) {\n      this.size = t;\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, x);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, b);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, g, 5);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, U, !1);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, ce, new TextEncoder());\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, N, 0);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, b, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, x, le).call(this, t));\n    }\n    addInt32(t) {\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, x, P).call(this, 4), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).setInt32((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g), t, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, U)), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, g, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g) + 4), this;\n    }\n    addInt16(t) {\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, x, P).call(this, 2), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).setInt16((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g), t, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, U)), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, g, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g) + 2), this;\n    }\n    addCString(t) {\n      return t && this.addString(t), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, x, P).call(this, 1), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).setUint8((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g), 0), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.i)(this, g)._++, this;\n    }\n    addString(t = \"\") {\n      let n = C(t);\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, x, P).call(this, n), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, ce).encodeInto(t, new Uint8Array((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).buffer, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g))), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, g, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g) + n), this;\n    }\n    add(t) {\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, x, P).call(this, t.byteLength), new Uint8Array((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).buffer).set(new Uint8Array(t), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g)), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, g, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g) + t.byteLength), this;\n    }\n    flush(t) {\n      let n = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, x, Xe).call(this, t);\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, g, 5), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, b, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, x, le).call(this, this.size)), new Uint8Array(n);\n    }\n  };\nb = new WeakMap(), g = new WeakMap(), U = new WeakMap(), ce = new WeakMap(), N = new WeakMap(), x = new WeakSet(), le = function (t) {\n  return new DataView(new ArrayBuffer(t));\n}, P = function (t) {\n  if ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).byteLength - (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g) < t) {\n    let r = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).buffer,\n      i = r.byteLength + (r.byteLength >> 1) + t;\n    (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, b, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, x, le).call(this, i)), new Uint8Array((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).buffer).set(new Uint8Array(r));\n  }\n}, Xe = function (t) {\n  if (t) {\n    (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).setUint8((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, N), t);\n    let n = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g) - ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, N) + 1);\n    (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).setInt32((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, N) + 1, n, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, U));\n  }\n  return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, b).buffer.slice(t ? 0 : 5, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, g));\n};\nvar m = new R(),\n  An = e => {\n    m.addInt16(3).addInt16(0);\n    for (let r of Object.keys(e)) m.addCString(r).addCString(e[r]);\n    m.addCString(\"client_encoding\").addCString(\"UTF8\");\n    let t = m.addCString(\"\").flush(),\n      n = t.byteLength + 4;\n    return new R().addInt32(n).add(t).flush();\n  },\n  xn = () => {\n    let e = new DataView(new ArrayBuffer(8));\n    return e.setInt32(0, 8, !1), e.setInt32(4, 80877103, !1), new Uint8Array(e.buffer);\n  },\n  Sn = e => m.addCString(e).flush(112),\n  Dn = (e, t) => (m.addCString(e).addInt32(C(t)).addString(t), m.flush(112)),\n  Bn = e => m.addString(e).flush(112),\n  In = e => m.addCString(e).flush(81),\n  Mn = [],\n  Rn = e => {\n    let t = e.name ?? \"\";\n    t.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", t, t.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n    let n = m.addCString(t).addCString(e.text).addInt16(e.types?.length ?? 0);\n    return e.types?.forEach(r => n.addInt32(r)), m.flush(80);\n  },\n  L = new R();\nvar Tn = (e, t) => {\n    for (let n = 0; n < e.length; n++) {\n      let r = t ? t(e[n], n) : e[n];\n      if (r === null) m.addInt16(0), L.addInt32(-1);else if (r instanceof ArrayBuffer || ArrayBuffer.isView(r)) {\n        let i = ArrayBuffer.isView(r) ? r.buffer.slice(r.byteOffset, r.byteOffset + r.byteLength) : r;\n        m.addInt16(1), L.addInt32(i.byteLength), L.add(i);\n      } else m.addInt16(0), L.addInt32(C(r)), L.addString(r);\n    }\n  },\n  En = (e = {}) => {\n    let t = e.portal ?? \"\",\n      n = e.statement ?? \"\",\n      r = e.binary ?? !1,\n      i = e.values ?? Mn,\n      a = i.length;\n    return m.addCString(t).addCString(n), m.addInt16(a), Tn(i, e.valueMapper), m.addInt16(a), m.add(L.flush()), m.addInt16(r ? 1 : 0), m.flush(66);\n  },\n  Cn = new Uint8Array([69, 0, 0, 0, 9, 0, 0, 0, 0, 0]),\n  Pn = e => {\n    if (!e || !e.portal && !e.rows) return Cn;\n    let t = e.portal ?? \"\",\n      n = e.rows ?? 0,\n      r = C(t),\n      i = 4 + r + 1 + 4,\n      a = new DataView(new ArrayBuffer(1 + i));\n    return a.setUint8(0, 69), a.setInt32(1, i, !1), new TextEncoder().encodeInto(t, new Uint8Array(a.buffer, 5)), a.setUint8(r + 5, 0), a.setUint32(a.byteLength - 4, n, !1), new Uint8Array(a.buffer);\n  },\n  Un = (e, t) => {\n    let n = new DataView(new ArrayBuffer(16));\n    return n.setInt32(0, 16, !1), n.setInt16(4, 1234, !1), n.setInt16(6, 5678, !1), n.setInt32(8, e, !1), n.setInt32(12, t, !1), new Uint8Array(n.buffer);\n  },\n  Ne = (e, t) => {\n    let n = new R();\n    return n.addCString(t), n.flush(e);\n  },\n  Nn = m.addCString(\"P\").flush(68),\n  Ln = m.addCString(\"S\").flush(68),\n  On = e => e.name ? Ne(68, `${e.type}${e.name ?? \"\"}`) : e.type === \"P\" ? Nn : Ln,\n  kn = e => {\n    let t = `${e.type}${e.name ?? \"\"}`;\n    return Ne(67, t);\n  },\n  Vn = e => m.add(e).flush(100),\n  Fn = e => Ne(102, e),\n  pe = e => new Uint8Array([e, 0, 0, 0, 4]),\n  vn = pe(72),\n  Gn = pe(83),\n  Wn = pe(88),\n  jn = pe(99),\n  O = {\n    startup: An,\n    password: Sn,\n    requestSsl: xn,\n    sendSASLInitialResponseMessage: Dn,\n    sendSCRAMClientFinalMessage: Bn,\n    query: In,\n    parse: Rn,\n    bind: En,\n    execute: Pn,\n    describe: On,\n    close: kn,\n    flush: () => vn,\n    sync: () => Gn,\n    end: () => Wn,\n    copyData: Vn,\n    copyDone: () => jn,\n    copyFail: Fn,\n    cancel: Un\n  };\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\nvar Le = {\n  text: 0,\n  binary: 1\n};\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\nvar Qn = new ArrayBuffer(0),\n  M,\n  w,\n  fe,\n  me,\n  re,\n  de = class {\n    constructor(t = 0) {\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, M, new DataView(Qn));\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, w);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, fe, \"utf-8\");\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, me, new TextDecoder((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, fe)));\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, re, !1);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, w, t);\n    }\n    setBuffer(t, n) {\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, w, t), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, M, new DataView(n));\n    }\n    int16() {\n      let t = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, M).getInt16((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, w), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, re));\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, w, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, w) + 2), t;\n    }\n    byte() {\n      let t = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, M).getUint8((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, w));\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.i)(this, w)._++, t;\n    }\n    int32() {\n      let t = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, M).getInt32((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, w), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, re));\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, w, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, w) + 4), t;\n    }\n    string(t) {\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, me).decode(this.bytes(t));\n    }\n    cstring() {\n      let t = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, w),\n        n = t;\n      for (; (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, M).getUint8(n++) !== 0;);\n      let r = this.string(n - t - 1);\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, w, n), r;\n    }\n    bytes(t) {\n      let n = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, M).buffer.slice((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, w), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, w) + t);\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, w, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, w) + t), new Uint8Array(n);\n    }\n  };\nM = new WeakMap(), w = new WeakMap(), fe = new WeakMap(), me = new WeakMap(), re = new WeakMap();\nvar Oe = 1,\n  _n = 4,\n  Ze = Oe + _n,\n  et = new ArrayBuffer(0);\nvar A,\n  S,\n  D,\n  o,\n  l,\n  tt,\n  nt,\n  rt,\n  st,\n  it,\n  at,\n  ot,\n  ke,\n  ut,\n  lt,\n  ct,\n  pt,\n  dt,\n  ft,\n  mt,\n  yt,\n  Ve,\n  ye = class {\n    constructor() {\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, l);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, A, new DataView(et));\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, S, 0);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, D, 0);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.f)(this, o, new de());\n    }\n    parse(t, n) {\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, tt).call(this, ArrayBuffer.isView(t) ? t.buffer.slice(t.byteOffset, t.byteOffset + t.byteLength) : t);\n      let r = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, D) + (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, S),\n        i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, D);\n      for (; i + Ze <= r;) {\n        let a = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, A).getUint8(i),\n          u = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, A).getUint32(i + Oe, !1),\n          d = Oe + u;\n        if (d + i <= r) {\n          let c = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, nt).call(this, i + Ze, a, u, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, A).buffer);\n          n(c), i += d;\n        } else break;\n      }\n      i === r ? ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, A, new DataView(et)), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, S, 0), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, D, 0)) : ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, S, r - i), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, D, i));\n    }\n  };\nA = new WeakMap(), S = new WeakMap(), D = new WeakMap(), o = new WeakMap(), l = new WeakSet(), tt = function (t) {\n  if ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, S) > 0) {\n    let n = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, S) + t.byteLength;\n    if (n + (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, D) > (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, A).byteLength) {\n      let i;\n      if (n <= (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, A).byteLength && (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, D) >= (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, S)) i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, A).buffer;else {\n        let a = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, A).byteLength * 2;\n        for (; n >= a;) a *= 2;\n        i = new ArrayBuffer(a);\n      }\n      new Uint8Array(i).set(new Uint8Array((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, A).buffer, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, D), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, S))), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, A, new DataView(i)), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, D, 0);\n    }\n    new Uint8Array((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, A).buffer).set(new Uint8Array(t), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, D) + (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, S)), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, S, n);\n  } else (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, A, new DataView(t)), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, D, 0), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.g)(this, S, t.byteLength);\n}, nt = function (t, n, r, i) {\n  switch (n) {\n    case 50:\n      return Ie;\n    case 49:\n      return Be;\n    case 51:\n      return Me;\n    case 110:\n      return Re;\n    case 115:\n      return Te;\n    case 99:\n      return Pe;\n    case 87:\n      return Ee;\n    case 73:\n      return Ce;\n    case 68:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, dt).call(this, t, r, i);\n    case 67:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, st).call(this, t, r, i);\n    case 90:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, rt).call(this, t, r, i);\n    case 65:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, ut).call(this, t, r, i);\n    case 82:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, yt).call(this, t, r, i);\n    case 83:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, ft).call(this, t, r, i);\n    case 75:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, mt).call(this, t, r, i);\n    case 69:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, Ve).call(this, t, r, i, \"error\");\n    case 78:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, Ve).call(this, t, r, i, \"notice\");\n    case 84:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, lt).call(this, t, r, i);\n    case 116:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, pt).call(this, t, r, i);\n    case 71:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, at).call(this, t, r, i);\n    case 72:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, ot).call(this, t, r, i);\n    case 100:\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, it).call(this, t, r, i);\n    default:\n      return new E(\"received invalid response: \" + n.toString(16), r, \"error\");\n  }\n}, rt = function (t, n, r) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).string(1);\n  return new Z(n, i);\n}, st = function (t, n, r) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).cstring();\n  return new ee(n, i);\n}, it = function (t, n, r) {\n  let i = r.slice(t, t + (n - 4));\n  return new z(n, new Uint8Array(i));\n}, at = function (t, n, r) {\n  return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, ke).call(this, t, n, r, \"copyInResponse\");\n}, ot = function (t, n, r) {\n  return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, ke).call(this, t, n, r, \"copyOutResponse\");\n}, ke = function (t, n, r, i) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let a = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).byte() !== 0,\n    u = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int16(),\n    d = new H(n, i, a, u);\n  for (let c = 0; c < u; c++) d.columnTypes[c] = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int16();\n  return d;\n}, ut = function (t, n, r) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int32(),\n    a = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).cstring(),\n    u = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).cstring();\n  return new X(n, i, a, u);\n}, lt = function (t, n, r) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int16(),\n    a = new Y(n, i);\n  for (let u = 0; u < i; u++) a.fields[u] = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.h)(this, l, ct).call(this);\n  return a;\n}, ct = function () {\n  let t = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).cstring(),\n    n = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int32(),\n    r = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int16(),\n    i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int32(),\n    a = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int16(),\n    u = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int32(),\n    d = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int16() === 0 ? Le.text : Le.binary;\n  return new q(t, n, r, i, a, u, d);\n}, pt = function (t, n, r) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int16(),\n    a = new $(n, i);\n  for (let u = 0; u < i; u++) a.dataTypeIDs[u] = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int32();\n  return a;\n}, dt = function (t, n, r) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int16(),\n    a = new Array(i);\n  for (let u = 0; u < i; u++) {\n    let d = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int32();\n    a[u] = d === -1 ? null : (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).string(d);\n  }\n  return new te(n, a);\n}, ft = function (t, n, r) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).cstring(),\n    a = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).cstring();\n  return new K(n, i, a);\n}, mt = function (t, n, r) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int32(),\n    a = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int32();\n  return new J(n, i, a);\n}, yt = function (t, n, r) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let i = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).int32();\n  switch (i) {\n    case 0:\n      return new v(n);\n    case 3:\n      return new G(n);\n    case 5:\n      return new W(n, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).bytes(4));\n    case 10:\n      {\n        let a = [];\n        for (;;) {\n          let u = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).cstring();\n          if (u.length === 0) return new j(n, a);\n          a.push(u);\n        }\n      }\n    case 11:\n      return new Q(n, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).string(n - 8));\n    case 12:\n      return new _(n, (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).string(n - 8));\n    default:\n      throw new Error(\"Unknown authenticationOk message type \" + i);\n  }\n}, Ve = function (t, n, r, i) {\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).setBuffer(t, r);\n  let a = {},\n    u = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).string(1);\n  for (; u !== \"\\0\";) a[u] = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).cstring(), u = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, o).string(1);\n  let d = a.M,\n    c = i === \"notice\" ? new ne(n, d) : new E(d, n, i);\n  return c.severity = a.S, c.code = a.C, c.detail = a.D, c.hint = a.H, c.position = a.P, c.internalPosition = a.p, c.internalQuery = a.q, c.where = a.W, c.schema = a.s, c.table = a.t, c.column = a.c, c.dataType = a.d, c.constraint = a.n, c.file = a.F, c.line = a.L, c.routine = a.R, c;\n};\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\nvar Fe = typeof process == \"object\" && typeof process.versions == \"object\" && typeof process.versions.node == \"string\",\n  se;\nasync function Rr() {\n  if (Fe || se) return;\n  let e = new URL(/* asset import */ __webpack_require__(/*! ./postgres.wasm */ \"./node_modules/@electric-sql/pglite/dist/postgres.wasm\"), __webpack_require__.b);\n  se = fetch(e);\n}\nvar k;\nasync function Tr(e, t) {\n  if (t || k) return WebAssembly.instantiate(t || k, e), {\n    instance: await WebAssembly.instantiate(t || k, e),\n    module: t || k\n  };\n  let n = new URL(/* asset import */ __webpack_require__(/*! ./postgres.wasm */ \"./node_modules/@electric-sql/pglite/dist/postgres.wasm\"), __webpack_require__.b);\n  if (Fe) {\n    let i = await (await __webpack_require__.e(/*! import() */ \"_c4ad\").then(__webpack_require__.t.bind(__webpack_require__, /*! fs/promises */ \"?c4ad\", 19))).readFile(n),\n      {\n        module: a,\n        instance: u\n      } = await WebAssembly.instantiate(i, e);\n    return k = a, {\n      instance: u,\n      module: a\n    };\n  } else {\n    se || (se = fetch(n));\n    let r = await se,\n      {\n        module: i,\n        instance: a\n      } = await WebAssembly.instantiateStreaming(r, e);\n    return k = i, {\n      instance: a,\n      module: i\n    };\n  }\n}\nasync function Er() {\n  let e = new URL(/* asset import */ __webpack_require__(/*! ./postgres.data */ \"./node_modules/@electric-sql/pglite/dist/postgres.data\"), __webpack_require__.b);\n  return Fe ? (await (await __webpack_require__.e(/*! import() */ \"_c4ad\").then(__webpack_require__.t.bind(__webpack_require__, /*! fs/promises */ \"?c4ad\", 19))).readFile(e)).buffer : (await fetch(e)).arrayBuffer();\n}\nvar Cr = () => {\n  if (globalThis.crypto?.randomUUID) return globalThis.crypto.randomUUID();\n  let e = new Uint8Array(16);\n  if (globalThis.crypto?.getRandomValues) globalThis.crypto.getRandomValues(e);else for (let n = 0; n < e.length; n++) e[n] = Math.floor(Math.random() * 256);\n  e[6] = e[6] & 15 | 64, e[8] = e[8] & 63 | 128;\n  let t = [];\n  return e.forEach(n => {\n    t.push(n.toString(16).padStart(2, \"0\"));\n  }), t.slice(0, 4).join(\"\") + \"-\" + t.slice(4, 6).join(\"\") + \"-\" + t.slice(6, 8).join(\"\") + \"-\" + t.slice(8, 10).join(\"\") + \"-\" + t.slice(10).join(\"\");\n};\nasync function Pr(e, t, n, r) {\n  if (!n || n.length === 0) return t;\n  r = r ?? e;\n  let i;\n  try {\n    await e.execProtocol(O.parse({\n      text: t\n    }), {\n      syncToFs: !1\n    }), i = De((await e.execProtocol(O.describe({\n      type: \"S\"\n    }), {\n      syncToFs: !1\n    })).messages);\n  } finally {\n    await e.execProtocol(O.sync(), {\n      syncToFs: !1\n    });\n  }\n  let a = t.replace(/\\$([0-9]+)/g, (d, c) => \"%\" + c + \"L\");\n  return (await r.query(`SELECT format($1, ${n.map((d, c) => `$${c + 2}`).join(\", \")}) as query`, [a, ...n], {\n    paramTypes: [F, ...i]\n  })).rows[0].query;\n}\nfunction Ur(e) {\n  let t,\n    n = !1,\n    r = async () => {\n      if (!t) {\n        n = !1;\n        return;\n      }\n      n = !0;\n      let {\n        args: i,\n        resolve: a,\n        reject: u\n      } = t;\n      t = void 0;\n      try {\n        let d = await e(...i);\n        a(d);\n      } catch (d) {\n        u(d);\n      } finally {\n        r();\n      }\n    };\n  return async (...i) => {\n    t && t.resolve(void 0);\n    let a = new Promise((u, d) => {\n      t = {\n        args: i,\n        resolve: u,\n        reject: d\n      };\n    });\n    return n || r(), a;\n  };\n}\nfunction Nr(e) {\n  let t;\n  return e.startsWith('\"') && e.endsWith('\"') ? t = e.substring(1, e.length - 1) : t = e.toLowerCase(), t;\n}\n\n\n//# sourceURL=webpack://pglitedemo/./node_modules/@electric-sql/pglite/dist/chunk-EADU5A67.js?");

/***/ }),

/***/ "./node_modules/@electric-sql/pglite/dist/chunk-STOZMFXW.js":
/*!******************************************************************!*\
  !*** ./node_modules/@electric-sql/pglite/dist/chunk-STOZMFXW.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   d: () => (/* binding */ g)\n/* harmony export */ });\n/* unused harmony exports a, b, c */\n/* harmony import */ var _chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-BTBUZ646.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-BTBUZ646.js\");\n\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\nvar o = {\n  part: \"part\",\n  container: \"container\"\n};\nfunction s(t, r, ...e) {\n  let a = t.length - 1,\n    p = e.length - 1;\n  if (p !== -1) {\n    if (p === 0) {\n      t[a] = t[a] + e[0] + r;\n      return;\n    }\n    t[a] = t[a] + e[0], t.push(...e.slice(1, p)), t.push(e[p] + r);\n  }\n}\nfunction y(t, ...r) {\n  let e = [t[0]];\n  e.raw = [t.raw[0]];\n  let a = [];\n  for (let p = 0; p < r.length; p++) {\n    let n = r[p],\n      i = p + 1;\n    if (n?._templateType === o.part) {\n      s(e, t[i], n.str), s(e.raw, t.raw[i], n.str);\n      continue;\n    }\n    if (n?._templateType === o.container) {\n      s(e, t[i], ...n.strings), s(e.raw, t.raw[i], ...n.strings.raw), a.push(...n.values);\n      continue;\n    }\n    e.push(t[i]), e.raw.push(t.raw[i]), a.push(n);\n  }\n  return {\n    _templateType: \"container\",\n    strings: e,\n    values: a\n  };\n}\nfunction c(t, ...r) {\n  return {\n    _templateType: \"part\",\n    str: `\"${String.raw(t, ...r)}\"`\n  };\n}\nfunction m(t, ...r) {\n  return {\n    _templateType: \"part\",\n    str: String.raw(t, ...r)\n  };\n}\nfunction g(t, ...r) {\n  let {\n    strings: e,\n    values: a\n  } = y(t, ...r);\n  return {\n    query: [e[0], ...a.flatMap((p, n) => [`$${n + 1}`, e[n + 1]])].join(\"\"),\n    params: a\n  };\n}\n\n\n//# sourceURL=webpack://pglitedemo/./node_modules/@electric-sql/pglite/dist/chunk-STOZMFXW.js?");

/***/ }),

/***/ "./node_modules/@electric-sql/pglite/dist/chunk-WGR4JCLS.js":
/*!******************************************************************!*\
  !*** ./node_modules/@electric-sql/pglite/dist/chunk-WGR4JCLS.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ or),\n/* harmony export */   b: () => (/* binding */ ce),\n/* harmony export */   c: () => (/* binding */ Vr),\n/* harmony export */   d: () => (/* binding */ C),\n/* harmony export */   e: () => (/* binding */ ur),\n/* harmony export */   f: () => (/* binding */ cr),\n/* harmony export */   g: () => (/* binding */ pr)\n/* harmony export */ });\n/* harmony import */ var _chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-BTBUZ646.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-BTBUZ646.js\");\n\nvar w = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.a)(($r, l) => {\n  \"use strict\";\n\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n  var j = 9007199254740991,\n    B = function (r) {\n      return r;\n    }();\n  function mr(r) {\n    return r === B;\n  }\n  function q(r) {\n    return typeof r == \"string\" || Object.prototype.toString.call(r) == \"[object String]\";\n  }\n  function lr(r) {\n    return Object.prototype.toString.call(r) == \"[object Date]\";\n  }\n  function N(r) {\n    return r !== null && typeof r == \"object\";\n  }\n  function U(r) {\n    return typeof r == \"function\";\n  }\n  function fr(r) {\n    return typeof r == \"number\" && r > -1 && r % 1 == 0 && r <= j;\n  }\n  function yr(r) {\n    return Object.prototype.toString.call(r) == \"[object Array]\";\n  }\n  function Y(r) {\n    return N(r) && !U(r) && fr(r.length);\n  }\n  function D(r) {\n    return Object.prototype.toString.call(r) == \"[object ArrayBuffer]\";\n  }\n  function gr(r, e) {\n    return Array.prototype.map.call(r, e);\n  }\n  function hr(r, e) {\n    var t = B;\n    return U(e) && Array.prototype.every.call(r, function (s, a, n) {\n      var o = e(s, a, n);\n      return o && (t = s), !o;\n    }), t;\n  }\n  function Sr(r) {\n    return Object.assign.apply(null, arguments);\n  }\n  function W(r) {\n    var e, t, s;\n    if (q(r)) {\n      for (t = r.length, s = new Uint8Array(t), e = 0; e < t; e++) s[e] = r.charCodeAt(e) & 255;\n      return s;\n    }\n    return D(r) ? new Uint8Array(r) : N(r) && D(r.buffer) ? new Uint8Array(r.buffer) : Y(r) ? new Uint8Array(r) : N(r) && U(r.toString) ? W(r.toString()) : new Uint8Array();\n  }\n  l.exports.MAX_SAFE_INTEGER = j;\n  l.exports.isUndefined = mr;\n  l.exports.isString = q;\n  l.exports.isObject = N;\n  l.exports.isDateTime = lr;\n  l.exports.isFunction = U;\n  l.exports.isArray = yr;\n  l.exports.isArrayLike = Y;\n  l.exports.isArrayBuffer = D;\n  l.exports.map = gr;\n  l.exports.find = hr;\n  l.exports.extend = Sr;\n  l.exports.toUint8Array = W;\n});\nvar x = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.a)((Qr, X) => {\n  \"use strict\";\n\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n  var M = \"\\0\";\n  X.exports = {\n    NULL_CHAR: M,\n    TMAGIC: \"ustar\" + M + \"00\",\n    OLDGNU_MAGIC: \"ustar  \" + M,\n    REGTYPE: 0,\n    LNKTYPE: 1,\n    SYMTYPE: 2,\n    CHRTYPE: 3,\n    BLKTYPE: 4,\n    DIRTYPE: 5,\n    FIFOTYPE: 6,\n    CONTTYPE: 7,\n    TSUID: parseInt(\"4000\", 8),\n    TSGID: parseInt(\"2000\", 8),\n    TSVTX: parseInt(\"1000\", 8),\n    TUREAD: parseInt(\"0400\", 8),\n    TUWRITE: parseInt(\"0200\", 8),\n    TUEXEC: parseInt(\"0100\", 8),\n    TGREAD: parseInt(\"0040\", 8),\n    TGWRITE: parseInt(\"0020\", 8),\n    TGEXEC: parseInt(\"0010\", 8),\n    TOREAD: parseInt(\"0004\", 8),\n    TOWRITE: parseInt(\"0002\", 8),\n    TOEXEC: parseInt(\"0001\", 8),\n    TPERMALL: parseInt(\"0777\", 8),\n    TPERMMASK: parseInt(\"0777\", 8)\n  };\n});\nvar L = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.a)((ee, f) => {\n  \"use strict\";\n\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n  var K = w(),\n    p = x(),\n    Fr = 512,\n    I = p.TPERMALL,\n    V = 0,\n    Z = 0,\n    _ = [[\"name\", 100, 0, function (r, e) {\n      return v(r[e[0]], e[1]);\n    }, function (r, e, t) {\n      return A(r.slice(e, e + t[1]));\n    }], [\"mode\", 8, 100, function (r, e) {\n      var t = r[e[0]] || I;\n      return t = t & p.TPERMMASK, P(t, e[1], I);\n    }, function (r, e, t) {\n      var s = S(r.slice(e, e + t[1]));\n      return s &= p.TPERMMASK, s;\n    }], [\"uid\", 8, 108, function (r, e) {\n      return P(r[e[0]], e[1], V);\n    }, function (r, e, t) {\n      return S(r.slice(e, e + t[1]));\n    }], [\"gid\", 8, 116, function (r, e) {\n      return P(r[e[0]], e[1], Z);\n    }, function (r, e, t) {\n      return S(r.slice(e, e + t[1]));\n    }], [\"size\", 12, 124, function (r, e) {\n      return P(r.data.length, e[1]);\n    }, function (r, e, t) {\n      return S(r.slice(e, e + t[1]));\n    }], [\"modifyTime\", 12, 136, function (r, e) {\n      return k(r[e[0]], e[1]);\n    }, function (r, e, t) {\n      return z(r.slice(e, e + t[1]));\n    }], [\"checksum\", 8, 148, function (r, e) {\n      return \"        \";\n    }, function (r, e, t) {\n      return S(r.slice(e, e + t[1]));\n    }], [\"type\", 1, 156, function (r, e) {\n      return \"\" + (parseInt(r[e[0]], 10) || 0) % 8;\n    }, function (r, e, t) {\n      return (parseInt(String.fromCharCode(r[e]), 10) || 0) % 8;\n    }], [\"linkName\", 100, 157, function (r, e) {\n      return \"\";\n    }, function (r, e, t) {\n      return A(r.slice(e, e + t[1]));\n    }], [\"ustar\", 8, 257, function (r, e) {\n      return p.TMAGIC;\n    }, function (r, e, t) {\n      return br(A(r.slice(e, e + t[1]), !0));\n    }, function (r, e) {\n      return r[e[0]] == p.TMAGIC || r[e[0]] == p.OLDGNU_MAGIC;\n    }], [\"owner\", 32, 265, function (r, e) {\n      return v(r[e[0]], e[1]);\n    }, function (r, e, t) {\n      return A(r.slice(e, e + t[1]));\n    }], [\"group\", 32, 297, function (r, e) {\n      return v(r[e[0]], e[1]);\n    }, function (r, e, t) {\n      return A(r.slice(e, e + t[1]));\n    }], [\"majorNumber\", 8, 329, function (r, e) {\n      return \"\";\n    }, function (r, e, t) {\n      return S(r.slice(e, e + t[1]));\n    }], [\"minorNumber\", 8, 337, function (r, e) {\n      return \"\";\n    }, function (r, e, t) {\n      return S(r.slice(e, e + t[1]));\n    }], [\"prefix\", 131, 345, function (r, e) {\n      return v(r[e[0]], e[1]);\n    }, function (r, e, t) {\n      return A(r.slice(e, e + t[1]));\n    }], [\"accessTime\", 12, 476, function (r, e) {\n      return k(r[e[0]], e[1]);\n    }, function (r, e, t) {\n      return z(r.slice(e, e + t[1]));\n    }], [\"createTime\", 12, 488, function (r, e) {\n      return k(r[e[0]], e[1]);\n    }, function (r, e, t) {\n      return z(r.slice(e, e + t[1]));\n    }]],\n    $ = function (r) {\n      var e = r[r.length - 1];\n      return e[2] + e[1];\n    }(_);\n  function br(r) {\n    if (r.length == 8) {\n      var e = r.split(\"\");\n      if (e[5] == p.NULL_CHAR) return (e[6] == \" \" || e[6] == p.NULL_CHAR) && (e[6] = \"0\"), (e[7] == \" \" || e[7] == p.NULL_CHAR) && (e[7] = \"0\"), e = e.join(\"\"), e == p.TMAGIC ? e : r;\n      if (e[7] == p.NULL_CHAR) return e[5] == p.NULL_CHAR && (e[5] = \" \"), e[6] == p.NULL_CHAR && (e[6] = \" \"), e == p.OLDGNU_MAGIC ? e : r;\n    }\n    return r;\n  }\n  function v(r, e) {\n    return e -= 1, K.isUndefined(r) && (r = \"\"), r = (\"\" + r).substr(0, e), r + p.NULL_CHAR;\n  }\n  function P(r, e, t) {\n    for (t = parseInt(t) || 0, e -= 1, r = (parseInt(r) || t).toString(8).substr(-e, e); r.length < e;) r = \"0\" + r;\n    return r + p.NULL_CHAR;\n  }\n  function k(r, e) {\n    if (K.isDateTime(r)) r = Math.floor(1 * r / 1e3);else if (r = parseInt(r, 10), isFinite(r)) {\n      if (r <= 0) return \"\";\n    } else r = Math.floor(1 * new Date() / 1e3);\n    return P(r, e, 0);\n  }\n  function A(r, e) {\n    var t = String.fromCharCode.apply(null, r);\n    if (e) return t;\n    var s = t.indexOf(p.NULL_CHAR);\n    return s >= 0 ? t.substr(0, s) : t;\n  }\n  function S(r) {\n    var e = String.fromCharCode.apply(null, r);\n    return parseInt(e.replace(/^0+$/g, \"\"), 8) || 0;\n  }\n  function z(r) {\n    return r.length == 0 || r[0] == 0 ? null : new Date(1e3 * S(r));\n  }\n  function Tr(r, e, t) {\n    var s = parseInt(e, 10) || 0,\n      a = Math.min(s + $, r.length),\n      n = 0,\n      o = 0,\n      i = 0;\n    t && _.every(function (y) {\n      return y[0] == \"checksum\" ? (o = s + y[2], i = o + y[1], !1) : !0;\n    });\n    for (var u = 32, c = s; c < a; c++) {\n      var m = c >= o && c < i ? u : r[c];\n      n = (n + m) % 262144;\n    }\n    return n;\n  }\n  f.exports.recordSize = Fr;\n  f.exports.defaultFileMode = I;\n  f.exports.defaultUid = V;\n  f.exports.defaultGid = Z;\n  f.exports.posixHeader = _;\n  f.exports.effectiveHeaderSize = $;\n  f.exports.calculateChecksum = Tr;\n  f.exports.formatTarString = v;\n  f.exports.formatTarNumber = P;\n  f.exports.formatTarDateTime = k;\n  f.exports.parseTarString = A;\n  f.exports.parseTarNumber = S;\n  f.exports.parseTarDateTime = z;\n});\nvar er = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.a)((ne, rr) => {\n  \"use strict\";\n\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n  var Ar = x(),\n    O = w(),\n    F = L();\n  function J(r) {\n    return F.recordSize;\n  }\n  function Q(r) {\n    return Math.ceil(r.data.length / F.recordSize) * F.recordSize;\n  }\n  function Er(r) {\n    var e = 0;\n    return r.forEach(function (t) {\n      e += J(t) + Q(t);\n    }), e += F.recordSize * 2, new Uint8Array(e);\n  }\n  function Pr(r, e, t) {\n    t = parseInt(t) || 0;\n    var s = t;\n    F.posixHeader.forEach(function (u) {\n      for (var c = u[3](e, u), m = c.length, y = 0; y < m; y += 1) r[s + y] = c.charCodeAt(y) & 255;\n      s += u[1];\n    });\n    var a = O.find(F.posixHeader, function (u) {\n      return u[0] == \"checksum\";\n    });\n    if (a) {\n      var n = F.calculateChecksum(r, t, !0),\n        o = F.formatTarNumber(n, a[1] - 2) + Ar.NULL_CHAR + \" \";\n      s = t + a[2];\n      for (var i = 0; i < o.length; i += 1) r[s] = o.charCodeAt(i) & 255, s++;\n    }\n    return t + J(e);\n  }\n  function wr(r, e, t) {\n    return t = parseInt(t, 10) || 0, r.set(e.data, t), t + Q(e);\n  }\n  function xr(r) {\n    r = O.map(r, function (s) {\n      return O.extend({}, s, {\n        data: O.toUint8Array(s.data)\n      });\n    });\n    var e = Er(r),\n      t = 0;\n    return r.forEach(function (s) {\n      t = Pr(e, s, t), t = wr(e, s, t);\n    }), e;\n  }\n  rr.exports.tar = xr;\n});\nvar nr = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.a)((oe, tr) => {\n  \"use strict\";\n\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n  var vr = x(),\n    G = w(),\n    h = L(),\n    Nr = {\n      extractData: !0,\n      checkHeader: !0,\n      checkChecksum: !0,\n      checkFileSize: !0\n    },\n    Ur = {\n      size: !0,\n      checksum: !0,\n      ustar: !0\n    },\n    R = {\n      unexpectedEndOfFile: \"Unexpected end of file.\",\n      fileCorrupted: \"File is corrupted.\",\n      checksumCheckFailed: \"Checksum check failed.\"\n    };\n  function kr(r) {\n    return h.recordSize;\n  }\n  function zr(r) {\n    return Math.ceil(r / h.recordSize) * h.recordSize;\n  }\n  function Or(r, e) {\n    for (var t = e, s = Math.min(r.length, e + h.recordSize * 2), a = t; a < s; a++) if (r[a] != 0) return !1;\n    return !0;\n  }\n  function Cr(r, e, t) {\n    if (r.length - e < h.recordSize) {\n      if (t.checkFileSize) throw new Error(R.unexpectedEndOfFile);\n      return null;\n    }\n    e = parseInt(e) || 0;\n    var s = {},\n      a = e;\n    if (h.posixHeader.forEach(function (i) {\n      s[i[0]] = i[4](r, a, i), a += i[1];\n    }), s.type != 0 && (s.size = 0), t.checkHeader && h.posixHeader.forEach(function (i) {\n      if (G.isFunction(i[5]) && !i[5](s, i)) {\n        var u = new Error(R.fileCorrupted);\n        throw u.data = {\n          offset: e + i[2],\n          field: i[0]\n        }, u;\n      }\n    }), t.checkChecksum) {\n      var n = h.calculateChecksum(r, e, !0);\n      if (n != s.checksum) {\n        var o = new Error(R.checksumCheckFailed);\n        throw o.data = {\n          offset: e,\n          header: s,\n          checksum: n\n        }, o;\n      }\n    }\n    return s;\n  }\n  function Dr(r, e, t, s) {\n    return s.extractData ? t.size <= 0 ? new Uint8Array() : r.slice(e, e + t.size) : null;\n  }\n  function Mr(r, e) {\n    var t = {};\n    return h.posixHeader.forEach(function (s) {\n      var a = s[0];\n      Ur[a] || (t[a] = r[a]);\n    }), t.isOldGNUFormat = r.ustar == vr.OLDGNU_MAGIC, e && (t.data = e), t;\n  }\n  function Ir(r, e) {\n    e = G.extend({}, Nr, e);\n    for (var t = [], s = 0, a = r.length; a - s >= h.recordSize;) {\n      r = G.toUint8Array(r);\n      var n = Cr(r, s, e);\n      if (!n) break;\n      s += kr(n);\n      var o = Dr(r, s, n, e);\n      if (t.push(Mr(n, o)), s += zr(n.size), Or(r, s)) break;\n    }\n    return t;\n  }\n  tr.exports.untar = Ir;\n});\nvar or = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.a)((se, ir) => {\n  \"use strict\";\n\n  (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n  var _r = w(),\n    Lr = x(),\n    Rr = er(),\n    Gr = nr();\n  _r.extend(ir.exports, Rr, Gr, Lr);\n});\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.j)();\nvar g = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_0__.c)(or(), 1);\nasync function H(r, e, t = \"pgdata\", s = \"auto\") {\n  let a = Br(r, e),\n    [n, o] = await qr(a, s),\n    i = t + (o ? \".tar.gz\" : \".tar\"),\n    u = o ? \"application/x-gzip\" : \"application/x-tar\";\n  return typeof File < \"u\" ? new File([n], i, {\n    type: u\n  }) : new Blob([n], {\n    type: u\n  });\n}\nvar Hr = [\"application/x-gtar\", \"application/x-tar+gzip\", \"application/x-gzip\", \"application/gzip\"];\nasync function ce(r, e, t) {\n  let s = new Uint8Array(await e.arrayBuffer()),\n    a = typeof File < \"u\" && e instanceof File ? e.name : void 0;\n  (Hr.includes(e.type) || a?.endsWith(\".tgz\") || a?.endsWith(\".tar.gz\")) && (s = await ar(s));\n  let o;\n  try {\n    o = (0, g.untar)(s);\n  } catch (i) {\n    if (i instanceof Error && i.message.includes(\"File is corrupted\")) s = await ar(s), o = (0, g.untar)(s);else throw i;\n  }\n  for (let i of o) {\n    let u = t + i.name,\n      c = u.split(\"/\").slice(0, -1);\n    for (let m = 1; m <= c.length; m++) {\n      let y = c.slice(0, m).join(\"/\");\n      r.analyzePath(y).exists || r.mkdir(y);\n    }\n    i.type === g.REGTYPE ? (r.writeFile(u, i.data), r.utime(u, sr(i.modifyTime), sr(i.modifyTime))) : i.type === g.DIRTYPE && r.mkdir(u);\n  }\n}\nfunction jr(r, e) {\n  let t = [],\n    s = a => {\n      r.readdir(a).forEach(o => {\n        if (o === \".\" || o === \"..\") return;\n        let i = a + \"/\" + o,\n          u = r.stat(i),\n          c = r.isFile(u.mode) ? r.readFile(i, {\n            encoding: \"binary\"\n          }) : new Uint8Array(0);\n        t.push({\n          name: i.substring(e.length),\n          mode: u.mode,\n          size: u.size,\n          type: r.isFile(u.mode) ? g.REGTYPE : g.DIRTYPE,\n          modifyTime: u.mtime,\n          data: c\n        }), r.isDir(u.mode) && s(i);\n      });\n    };\n  return s(e), t;\n}\nfunction Br(r, e) {\n  let t = jr(r, e);\n  return (0, g.tar)(t);\n}\nasync function qr(r, e = \"auto\") {\n  if (e === \"none\") return [r, !1];\n  if (typeof CompressionStream < \"u\") return [await Yr(r), !0];\n  if (typeof process < \"u\" && process.versions && process.versions.node) return [await Wr(r), !0];\n  if (e === \"auto\") return [r, !1];\n  throw new Error(\"Compression not supported in this environment\");\n}\nasync function Yr(r) {\n  let e = new CompressionStream(\"gzip\"),\n    t = e.writable.getWriter(),\n    s = e.readable.getReader();\n  t.write(r), t.close();\n  let a = [];\n  for (;;) {\n    let {\n      value: i,\n      done: u\n    } = await s.read();\n    if (u) break;\n    i && a.push(i);\n  }\n  let n = new Uint8Array(a.reduce((i, u) => i + u.length, 0)),\n    o = 0;\n  return a.forEach(i => {\n    n.set(i, o), o += i.length;\n  }), n;\n}\nasync function Wr(r) {\n  let {\n      promisify: e\n    } = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_util_util_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! util */ \"./node_modules/util/util.js\", 19)),\n    {\n      gzip: t\n    } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_util_util_js\"), __webpack_require__.e(\"vendors-node_modules_readable-stream_lib__stream_duplex_js\"), __webpack_require__.e(\"vendors-node_modules_browserify-zlib_lib_index_js\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! zlib */ \"./node_modules/browserify-zlib/lib/index.js\", 19));\n  return await e(t)(r);\n}\nasync function ar(r) {\n  if (typeof CompressionStream < \"u\") return await Xr(r);\n  if (typeof process < \"u\" && process.versions && process.versions.node) return await Kr(r);\n  throw new Error(\"Unsupported environment for decompression\");\n}\nasync function Xr(r) {\n  let e = new DecompressionStream(\"gzip\"),\n    t = e.writable.getWriter(),\n    s = e.readable.getReader();\n  t.write(r), t.close();\n  let a = [];\n  for (;;) {\n    let {\n      value: i,\n      done: u\n    } = await s.read();\n    if (u) break;\n    i && a.push(i);\n  }\n  let n = new Uint8Array(a.reduce((i, u) => i + u.length, 0)),\n    o = 0;\n  return a.forEach(i => {\n    n.set(i, o), o += i.length;\n  }), n;\n}\nasync function Kr(r) {\n  let {\n      promisify: e\n    } = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_util_util_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! util */ \"./node_modules/util/util.js\", 19)),\n    {\n      gunzip: t\n    } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_util_util_js\"), __webpack_require__.e(\"vendors-node_modules_readable-stream_lib__stream_duplex_js\"), __webpack_require__.e(\"vendors-node_modules_browserify-zlib_lib_index_js\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! zlib */ \"./node_modules/browserify-zlib/lib/index.js\", 19));\n  return await e(t)(r);\n}\nfunction sr(r) {\n  return r ? typeof r == \"number\" ? r : Math.floor(r.getTime() / 1e3) : Math.floor(Date.now() / 1e3);\n}\nvar Vr = \"/tmp/pglite\",\n  C = Vr + \"/base\",\n  ur = class {\n    constructor(e) {\n      this.dataDir = e;\n    }\n    async init(e, t) {\n      return this.pg = e, {\n        emscriptenOpts: t\n      };\n    }\n    async syncToFs(e) {}\n    async initialSyncFs() {}\n    async closeFs() {}\n    async dumpTar(e, t) {\n      return H(this.pg.Module.FS, C, e, t);\n    }\n  },\n  cr = class {\n    constructor(e, {\n      debug: t = !1\n    } = {}) {\n      this.dataDir = e, this.debug = t;\n    }\n    async syncToFs(e) {}\n    async initialSyncFs() {}\n    async closeFs() {}\n    async dumpTar(e, t) {\n      return H(this.pg.Module.FS, C, e, t);\n    }\n    async init(e, t) {\n      return this.pg = e, {\n        emscriptenOpts: {\n          ...t,\n          preRun: [...(t.preRun || []), a => {\n            let n = Zr(a, this);\n            a.FS.mkdir(C), a.FS.mount(n, {}, C);\n          }]\n        }\n      };\n    }\n  },\n  pr = {\n    EBADF: 8,\n    EBADFD: 127,\n    EEXIST: 20,\n    EINVAL: 28,\n    EISDIR: 31,\n    ENODEV: 43,\n    ENOENT: 44,\n    ENOTDIR: 54,\n    ENOTEMPTY: 55\n  },\n  Zr = (r, e) => {\n    let t = r.FS,\n      s = e.debug ? console.log : null,\n      a = {\n        tryFSOperation(n) {\n          try {\n            return n();\n          } catch (o) {\n            throw o.code ? o.code === \"UNKNOWN\" ? new t.ErrnoError(pr.EINVAL) : new t.ErrnoError(o.code) : o;\n          }\n        },\n        mount(n) {\n          return a.createNode(null, \"/\", 16895, 0);\n        },\n        syncfs(n, o, i) {},\n        createNode(n, o, i, u) {\n          if (!t.isDir(i) && !t.isFile(i)) throw new t.ErrnoError(28);\n          let c = t.createNode(n, o, i);\n          return c.node_ops = a.node_ops, c.stream_ops = a.stream_ops, c;\n        },\n        getMode: function (n) {\n          return s?.(\"getMode\", n), a.tryFSOperation(() => e.lstat(n).mode);\n        },\n        realPath: function (n) {\n          let o = [];\n          for (; n.parent !== n;) o.push(n.name), n = n.parent;\n          return o.push(n.mount.opts.root), o.reverse(), o.join(\"/\");\n        },\n        node_ops: {\n          getattr(n) {\n            s?.(\"getattr\", a.realPath(n));\n            let o = a.realPath(n);\n            return a.tryFSOperation(() => {\n              let i = e.lstat(o);\n              return {\n                ...i,\n                dev: 0,\n                ino: n.id,\n                nlink: 1,\n                rdev: n.rdev,\n                atime: new Date(i.atime),\n                mtime: new Date(i.mtime),\n                ctime: new Date(i.ctime)\n              };\n            });\n          },\n          setattr(n, o) {\n            s?.(\"setattr\", a.realPath(n), o);\n            let i = a.realPath(n);\n            a.tryFSOperation(() => {\n              o.mode !== void 0 && e.chmod(i, o.mode), o.size !== void 0 && e.truncate(i, o.size), o.timestamp !== void 0 && e.utimes(i, o.timestamp, o.timestamp), o.size !== void 0 && e.truncate(i, o.size);\n            });\n          },\n          lookup(n, o) {\n            s?.(\"lookup\", a.realPath(n), o);\n            let i = [a.realPath(n), o].join(\"/\"),\n              u = a.getMode(i);\n            return a.createNode(n, o, u);\n          },\n          mknod(n, o, i, u) {\n            s?.(\"mknod\", a.realPath(n), o, i, u);\n            let c = a.createNode(n, o, i, u),\n              m = a.realPath(c);\n            return a.tryFSOperation(() => (t.isDir(c.mode) ? e.mkdir(m, {\n              mode: i\n            }) : e.writeFile(m, \"\", {\n              mode: i\n            }), c));\n          },\n          rename(n, o, i) {\n            s?.(\"rename\", a.realPath(n), a.realPath(o), i);\n            let u = a.realPath(n),\n              c = [a.realPath(o), i].join(\"/\");\n            a.tryFSOperation(() => {\n              e.rename(u, c);\n            }), n.name = i;\n          },\n          unlink(n, o) {\n            s?.(\"unlink\", a.realPath(n), o);\n            let i = [a.realPath(n), o].join(\"/\");\n            try {\n              e.unlink(i);\n            } catch {}\n          },\n          rmdir(n, o) {\n            s?.(\"rmdir\", a.realPath(n), o);\n            let i = [a.realPath(n), o].join(\"/\");\n            return a.tryFSOperation(() => {\n              e.rmdir(i);\n            });\n          },\n          readdir(n) {\n            s?.(\"readdir\", a.realPath(n));\n            let o = a.realPath(n);\n            return a.tryFSOperation(() => e.readdir(o));\n          },\n          symlink(n, o, i) {\n            throw s?.(\"symlink\", a.realPath(n), o, i), new t.ErrnoError(63);\n          },\n          readlink(n) {\n            throw s?.(\"readlink\", a.realPath(n)), new t.ErrnoError(63);\n          }\n        },\n        stream_ops: {\n          open(n) {\n            s?.(\"open stream\", a.realPath(n.node));\n            let o = a.realPath(n.node);\n            return a.tryFSOperation(() => {\n              t.isFile(n.node.mode) && (n.shared.refcount = 1, n.nfd = e.open(o));\n            });\n          },\n          close(n) {\n            return s?.(\"close stream\", a.realPath(n.node)), a.tryFSOperation(() => {\n              t.isFile(n.node.mode) && n.nfd && --n.shared.refcount === 0 && e.close(n.nfd);\n            });\n          },\n          dup(n) {\n            s?.(\"dup stream\", a.realPath(n.node)), n.shared.refcount++;\n          },\n          read(n, o, i, u, c) {\n            return s?.(\"read stream\", a.realPath(n.node), i, u, c), u === 0 ? 0 : a.tryFSOperation(() => e.read(n.nfd, o, i, u, c));\n          },\n          write(n, o, i, u, c) {\n            return s?.(\"write stream\", a.realPath(n.node), i, u, c), a.tryFSOperation(() => e.write(n.nfd, o.buffer, i, u, c));\n          },\n          llseek(n, o, i) {\n            s?.(\"llseek stream\", a.realPath(n.node), o, i);\n            let u = o;\n            if (i === 1 ? u += n.position : i === 2 && t.isFile(n.node.mode) && a.tryFSOperation(() => {\n              let c = e.fstat(n.nfd);\n              u += c.size;\n            }), u < 0) throw new t.ErrnoError(28);\n            return u;\n          },\n          mmap(n, o, i, u, c) {\n            if (s?.(\"mmap stream\", a.realPath(n.node), o, i, u, c), !t.isFile(n.node.mode)) throw new t.ErrnoError(pr.ENODEV);\n            let m = r.mmapAlloc(o);\n            return a.stream_ops.read(n, r.HEAP8, m, o, i), {\n              ptr: m,\n              allocated: !0\n            };\n          },\n          msync(n, o, i, u, c) {\n            return s?.(\"msync stream\", a.realPath(n.node), i, u, c), a.stream_ops.write(n, o, 0, u, i), 0;\n          }\n        }\n      };\n    return a;\n  };\n\n\n//# sourceURL=webpack://pglitedemo/./node_modules/@electric-sql/pglite/dist/chunk-WGR4JCLS.js?");

/***/ }),

/***/ "./node_modules/@electric-sql/pglite/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@electric-sql/pglite/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PGlite: () => (/* binding */ Ue)\n/* harmony export */ });\n/* unused harmony exports IdbFs, MemoryFS, Mutex */\n/* harmony import */ var _chunk_A7RFOIQ7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-A7RFOIQ7.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-A7RFOIQ7.js\");\n/* harmony import */ var _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-EADU5A67.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-EADU5A67.js\");\n/* harmony import */ var _chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WGR4JCLS.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-WGR4JCLS.js\");\n/* harmony import */ var _chunk_STOZMFXW_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-STOZMFXW.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-STOZMFXW.js\");\n/* harmony import */ var _chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-BTBUZ646.js */ \"./node_modules/@electric-sql/pglite/dist/chunk-BTBUZ646.js\");\n\n\n\n\n\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.j)();\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.j)();\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.j)();\nvar Ye = new Error(\"timeout while waiting for mutex to become available\"),\n  Je = new Error(\"mutex already locked\"),\n  He = new Error(\"request for lock canceled\"),\n  We = function (e, t, r, a) {\n    function o(s) {\n      return s instanceof r ? s : new r(function (l) {\n        l(s);\n      });\n    }\n    return new (r || (r = Promise))(function (s, l) {\n      function n(p) {\n        try {\n          m(a.next(p));\n        } catch (d) {\n          l(d);\n        }\n      }\n      function _(p) {\n        try {\n          m(a.throw(p));\n        } catch (d) {\n          l(d);\n        }\n      }\n      function m(p) {\n        p.done ? s(p.value) : o(p.value).then(n, _);\n      }\n      m((a = a.apply(e, t || [])).next());\n    });\n  },\n  ce = class {\n    constructor(t, r = He) {\n      this._value = t, this._cancelError = r, this._weightedQueues = [], this._weightedWaiters = [];\n    }\n    acquire(t = 1) {\n      if (t <= 0) throw new Error(`invalid weight ${t}: must be positive`);\n      return new Promise((r, a) => {\n        this._weightedQueues[t - 1] || (this._weightedQueues[t - 1] = []), this._weightedQueues[t - 1].push({\n          resolve: r,\n          reject: a\n        }), this._dispatch();\n      });\n    }\n    runExclusive(t, r = 1) {\n      return We(this, void 0, void 0, function* () {\n        let [a, o] = yield this.acquire(r);\n        try {\n          return yield t(a);\n        } finally {\n          o();\n        }\n      });\n    }\n    waitForUnlock(t = 1) {\n      if (t <= 0) throw new Error(`invalid weight ${t}: must be positive`);\n      return new Promise(r => {\n        this._weightedWaiters[t - 1] || (this._weightedWaiters[t - 1] = []), this._weightedWaiters[t - 1].push(r), this._dispatch();\n      });\n    }\n    isLocked() {\n      return this._value <= 0;\n    }\n    getValue() {\n      return this._value;\n    }\n    setValue(t) {\n      this._value = t, this._dispatch();\n    }\n    release(t = 1) {\n      if (t <= 0) throw new Error(`invalid weight ${t}: must be positive`);\n      this._value += t, this._dispatch();\n    }\n    cancel() {\n      this._weightedQueues.forEach(t => t.forEach(r => r.reject(this._cancelError))), this._weightedQueues = [];\n    }\n    _dispatch() {\n      var t;\n      for (let r = this._value; r > 0; r--) {\n        let a = (t = this._weightedQueues[r - 1]) === null || t === void 0 ? void 0 : t.shift();\n        if (!a) continue;\n        let o = this._value,\n          s = r;\n        this._value -= r, r = this._value + 1, a.resolve([o, this._newReleaser(s)]);\n      }\n      this._drainUnlockWaiters();\n    }\n    _newReleaser(t) {\n      let r = !1;\n      return () => {\n        r || (r = !0, this.release(t));\n      };\n    }\n    _drainUnlockWaiters() {\n      for (let t = this._value; t > 0; t--) this._weightedWaiters[t - 1] && (this._weightedWaiters[t - 1].forEach(r => r()), this._weightedWaiters[t - 1] = []);\n    }\n  },\n  je = function (e, t, r, a) {\n    function o(s) {\n      return s instanceof r ? s : new r(function (l) {\n        l(s);\n      });\n    }\n    return new (r || (r = Promise))(function (s, l) {\n      function n(p) {\n        try {\n          m(a.next(p));\n        } catch (d) {\n          l(d);\n        }\n      }\n      function _(p) {\n        try {\n          m(a.throw(p));\n        } catch (d) {\n          l(d);\n        }\n      }\n      function m(p) {\n        p.done ? s(p.value) : o(p.value).then(n, _);\n      }\n      m((a = a.apply(e, t || [])).next());\n    });\n  },\n  H = class {\n    constructor(t) {\n      this._semaphore = new ce(1, t);\n    }\n    acquire() {\n      return je(this, void 0, void 0, function* () {\n        let [, t] = yield this._semaphore.acquire();\n        return t;\n      });\n    }\n    runExclusive(t) {\n      return this._semaphore.runExclusive(() => t());\n    }\n    isLocked() {\n      return this._semaphore.isLocked();\n    }\n    waitForUnlock() {\n      return this._semaphore.waitForUnlock();\n    }\n    release() {\n      this._semaphore.isLocked() && this._semaphore.release();\n    }\n    cancel() {\n      return this._semaphore.cancel();\n    }\n  };\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.j)();\nvar Ie = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.c)((0,_chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.a)(), 1);\nasync function ge(e) {\n  if (_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.q) {\n    let t = await __webpack_require__.e(/*! import() */ \"_8414\").then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"?8414\", 19)),\n      r = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_util_util_js\"), __webpack_require__.e(\"vendors-node_modules_readable-stream_lib__stream_duplex_js\"), __webpack_require__.e(\"vendors-node_modules_browserify-zlib_lib_index_js\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! zlib */ \"./node_modules/browserify-zlib/lib/index.js\", 19)),\n      {\n        Writable: a\n      } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_util_util_js\"), __webpack_require__.e(\"vendors-node_modules_readable-stream_lib__stream_duplex_js\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! stream */ \"./node_modules/stream-browserify/index.js\", 19)),\n      {\n        pipeline: o\n      } = await Promise.resolve().then(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream/promises'\"); e.code = 'MODULE_NOT_FOUND'; throw e; });\n    if (!t.existsSync(e)) throw new Error(`Extension bundle not found: ${e}`);\n    let s = r.createGunzip(),\n      l = [];\n    return await o(t.createReadStream(e), s, new a({\n      write(n, _, m) {\n        l.push(n), m();\n      }\n    })), new Blob(l);\n  } else {\n    let t = await fetch(e.toString());\n    if (!t.ok || !t.body) return null;\n    if (t.headers.get(\"Content-Encoding\") === \"gzip\") return t.blob();\n    {\n      let r = new DecompressionStream(\"gzip\");\n      return new Response(t.body.pipeThrough(r)).blob();\n    }\n  }\n}\nasync function Pe(e, t) {\n  for (let r in e.pg_extensions) {\n    let a;\n    try {\n      a = await e.pg_extensions[r];\n    } catch (o) {\n      console.error(\"Failed to fetch extension:\", r, o);\n      continue;\n    }\n    if (a) {\n      let o = new Uint8Array(await a.arrayBuffer());\n      Ve(e, r, o, t);\n    } else console.error(\"Could not get binary data for extension:\", r);\n  }\n}\nfunction Ve(e, t, r, a) {\n  Ie.default.untar(r).forEach(s => {\n    if (!s.name.startsWith(\".\")) {\n      let l = e.WASM_PREFIX + \"/\" + s.name;\n      if (s.name.endsWith(\".so\")) {\n        let n = (...m) => {\n            a(\"pgfs:ext OK\", l, m);\n          },\n          _ = (...m) => {\n            a(\"pgfs:ext FAIL\", l, m);\n          };\n        e.FS.createPreloadedFile(Ke(l), s.name.split(\"/\").pop().slice(0, -3), s.data, !0, !0, n, _, !1);\n      } else e.FS.writeFile(l, s.data);\n    }\n  });\n}\nfunction Ke(e) {\n  let t = e.lastIndexOf(\"/\");\n  return t > 0 ? e.slice(0, t) : e;\n}\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.j)();\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.j)();\nvar ee = class extends _chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.e {\n  async init(t, r) {\n    return this.pg = t, {\n      emscriptenOpts: {\n        ...r,\n        preRun: [...(r.preRun || []), o => {\n          let s = o.FS.filesystems.IDBFS;\n          o.FS.mkdir(\"/pglite\"), o.FS.mkdir(`/pglite/${this.dataDir}`), o.FS.mount(s, {}, `/pglite/${this.dataDir}`), o.FS.symlink(`/pglite/${this.dataDir}`, _chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.d);\n        }]\n      }\n    };\n  }\n  initialSyncFs() {\n    return new Promise((t, r) => {\n      this.pg.Module.FS.syncfs(!0, a => {\n        a ? r(a) : t();\n      });\n    });\n  }\n  syncToFs(t) {\n    return new Promise((r, a) => {\n      this.pg.Module.FS.syncfs(!1, o => {\n        o ? a(o) : r();\n      });\n    });\n  }\n  async closeFs() {\n    let t = this.pg.Module.FS.filesystems.IDBFS.dbs[this.dataDir];\n    t && t.close(), this.pg.Module.FS.quit();\n  }\n};\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.j)();\nvar te = class extends _chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.e {\n  async closeFs() {\n    this.pg.Module.FS.quit();\n  }\n};\nfunction Fe(e) {\n  let t;\n  if (e?.startsWith(\"file://\")) {\n    if (e = e.slice(7), !e) throw new Error(\"Invalid dataDir, must be a valid path\");\n    t = \"nodefs\";\n  } else e?.startsWith(\"idb://\") ? (e = e.slice(6), t = \"idbfs\") : e?.startsWith(\"opfs-ahp://\") ? (e = e.slice(11), t = \"opfs-ahp\") : !e || e?.startsWith(\"memory://\") ? t = \"memoryfs\" : t = \"nodefs\";\n  return {\n    dataDir: e,\n    fsType: t\n  };\n}\nasync function Ae(e, t) {\n  let r;\n  if (e && t === \"nodefs\") {\n    let {\n      NodeFS: a\n    } = await __webpack_require__.e(/*! import() */ \"node_modules_electric-sql_pglite_dist_fs_nodefs_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./fs/nodefs.js */ \"./node_modules/@electric-sql/pglite/dist/fs/nodefs.js\"));\n    r = new a(e);\n  } else if (e && t === \"idbfs\") r = new ee(e);else if (e && t === \"opfs-ahp\") {\n    let {\n      OpfsAhpFS: a\n    } = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_electric-sql_pglite_dist_fs_opfs-ahp_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./fs/opfs-ahp.js */ \"./node_modules/@electric-sql/pglite/dist/fs/opfs-ahp.js\"));\n    r = new a(e);\n  } else r = new te();\n  return r;\n}\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.j)();\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.j)();\nvar Qe = (() => {\n    var _scriptName = \"file:///Users/anwarmoussaoui/Desktop/Demos/pglite/Pglite/js/node_modules/@electric-sql/pglite/dist/index.js\";\n    return async function (moduleArg = {}) {\n      var moduleRtn,\n        Module = moduleArg,\n        readyPromiseResolve,\n        readyPromiseReject,\n        readyPromise = new Promise((e, t) => {\n          readyPromiseResolve = e, readyPromiseReject = t;\n        }),\n        ENVIRONMENT_IS_WEB = typeof window == \"object\",\n        ENVIRONMENT_IS_WORKER = typeof WorkerGlobalScope < \"u\",\n        ENVIRONMENT_IS_NODE = typeof process == \"object\" && typeof process.versions == \"object\" && typeof process.versions.node == \"string\" && process.type != \"renderer\";\n      if (ENVIRONMENT_IS_NODE) {\n        let {\n            createRequire: e\n          } = await Promise.resolve().then(function webpackMissingModule() { var e = new Error(\"Cannot find module 'module'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }),\n          t = \"file:///Users/anwarmoussaoui/Desktop/Demos/pglite/Pglite/js/node_modules/@electric-sql/pglite/dist/index.js\";\n        t.startsWith(\"data:\") && (t = \"/\");\n        var require = e(t);\n      }\n      Module.expectedDataFileDownloads ?? (Module.expectedDataFileDownloads = 0), Module.expectedDataFileDownloads++, (() => {\n        var e = typeof ENVIRONMENT_IS_PTHREAD < \"u\" && ENVIRONMENT_IS_PTHREAD,\n          t = typeof ENVIRONMENT_IS_WASM_WORKER < \"u\" && ENVIRONMENT_IS_WASM_WORKER;\n        if (e || t) return;\n        var r = typeof process == \"object\" && typeof process.versions == \"object\" && typeof process.versions.node == \"string\";\n        function a(o) {\n          var s = \"\";\n          typeof window == \"object\" ? s = window.encodeURIComponent(window.location.pathname.substring(0, window.location.pathname.lastIndexOf(\"/\")) + \"/\") : typeof process > \"u\" && typeof location < \"u\" && (s = encodeURIComponent(location.pathname.substring(0, location.pathname.lastIndexOf(\"/\")) + \"/\"));\n          var l = \"postgres.data\",\n            n = \"postgres.data\",\n            _ = Module.locateFile ? Module.locateFile(n, \"\") : n,\n            m = o.remote_package_size;\n          function p(u, w, h, S) {\n            if (r) {\n              require(\"fs\").readFile(u, (M, y) => {\n                M ? S(M) : h(y.buffer);\n              });\n              return;\n            }\n            Module.dataFileDownloads ?? (Module.dataFileDownloads = {}), fetch(u).catch(M => Promise.reject(new Error(`Network Error: ${u}`, {\n              cause: M\n            }))).then(M => {\n              if (!M.ok) return Promise.reject(new Error(`${M.status}: ${M.url}`));\n              if (!M.body && M.arrayBuffer) return M.arrayBuffer().then(h);\n              let y = M.body.getReader(),\n                x = () => y.read().then(X).catch(R => Promise.reject(new Error(`Unexpected error while handling : ${M.url} ${R}`, {\n                  cause: R\n                }))),\n                E = [],\n                b = M.headers,\n                T = Number(b.get(\"Content-Length\") ?? w),\n                D = 0,\n                X = ({\n                  done: R,\n                  value: z\n                }) => {\n                  if (R) {\n                    let P = new Uint8Array(E.map(A => A.length).reduce((A, Re) => A + Re, 0)),\n                      U = 0;\n                    for (let A of E) P.set(A, U), U += A.length;\n                    h(P.buffer);\n                  } else {\n                    E.push(z), D += z.length, Module.dataFileDownloads[u] = {\n                      loaded: D,\n                      total: T\n                    };\n                    let P = 0,\n                      U = 0;\n                    for (let A of Object.values(Module.dataFileDownloads)) P += A.loaded, U += A.total;\n                    return Module.setStatus?.(`Downloading data... (${P}/${U})`), x();\n                  }\n                };\n              return Module.setStatus?.(\"Downloading data...\"), x();\n            });\n          }\n          function d(u) {\n            console.error(\"package error:\", u);\n          }\n          var g = null,\n            c = Module.getPreloadedPackage ? Module.getPreloadedPackage(_, m) : null;\n          c || p(_, m, u => {\n            g ? (g(u), g = null) : c = u;\n          }, d);\n          function f(u) {\n            function w(x, E) {\n              if (!x) throw E + new Error().stack;\n            }\n            u.FS_createPath(\"/\", \"home\", !0, !0), u.FS_createPath(\"/home\", \"web_user\", !0, !0), u.FS_createPath(\"/\", \"tmp\", !0, !0), u.FS_createPath(\"/tmp\", \"pglite\", !0, !0), u.FS_createPath(\"/tmp/pglite\", \"bin\", !0, !0), u.FS_createPath(\"/tmp/pglite\", \"lib\", !0, !0), u.FS_createPath(\"/tmp/pglite/lib\", \"postgresql\", !0, !0), u.FS_createPath(\"/tmp/pglite/lib/postgresql\", \"pgxs\", !0, !0), u.FS_createPath(\"/tmp/pglite/lib/postgresql/pgxs\", \"config\", !0, !0), u.FS_createPath(\"/tmp/pglite/lib/postgresql/pgxs\", \"src\", !0, !0), u.FS_createPath(\"/tmp/pglite/lib/postgresql/pgxs/src\", \"makefiles\", !0, !0), u.FS_createPath(\"/tmp/pglite/lib/postgresql/pgxs/src\", \"test\", !0, !0), u.FS_createPath(\"/tmp/pglite/lib/postgresql/pgxs/src/test\", \"isolation\", !0, !0), u.FS_createPath(\"/tmp/pglite/lib/postgresql/pgxs/src/test\", \"regress\", !0, !0), u.FS_createPath(\"/tmp/pglite\", \"share\", !0, !0), u.FS_createPath(\"/tmp/pglite/share\", \"postgresql\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql\", \"extension\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql\", \"timezone\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Africa\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"America\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone/America\", \"Argentina\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone/America\", \"Indiana\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone/America\", \"Kentucky\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone/America\", \"North_Dakota\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Antarctica\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Arctic\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Asia\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Atlantic\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Australia\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Brazil\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Canada\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Chile\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Etc\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Europe\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Indian\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Mexico\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"Pacific\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql/timezone\", \"US\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql\", \"timezonesets\", !0, !0), u.FS_createPath(\"/tmp/pglite/share/postgresql\", \"tsearch_data\", !0, !0);\n            function h(x, E, b) {\n              this.start = x, this.end = E, this.audio = b;\n            }\n            h.prototype = {\n              requests: {},\n              open: function (x, E) {\n                this.name = E, this.requests[E] = this, u.addRunDependency(`fp ${this.name}`);\n              },\n              send: function () {},\n              onload: function () {\n                var x = this.byteArray.subarray(this.start, this.end);\n                this.finish(x);\n              },\n              finish: function (x) {\n                var E = this;\n                u.FS_createDataFile(this.name, null, x, !0, !0, !0), u.removeRunDependency(`fp ${E.name}`), this.requests[this.name] = null;\n              }\n            };\n            for (var S = o.files, M = 0; M < S.length; ++M) new h(S[M].start, S[M].end, S[M].audio || 0).open(\"GET\", S[M].filename);\n            function y(x) {\n              w(x, \"Loading data file failed.\"), w(x.constructor.name === ArrayBuffer.name, \"bad input to processPackageData\");\n              var E = new Uint8Array(x);\n              h.prototype.byteArray = E;\n              for (var b = o.files, T = 0; T < b.length; ++T) h.prototype.requests[b[T].filename].onload();\n              u.removeRunDependency(\"datafile_postgres.data\");\n            }\n            u.addRunDependency(\"datafile_postgres.data\"), u.preloadResults ?? (u.preloadResults = {}), u.preloadResults[l] = {\n              fromCache: !1\n            }, c ? (y(c), c = null) : g = y;\n          }\n          Module.calledRun ? f(Module) : (Module.preRun ?? (Module.preRun = [])).push(f);\n        }\n        a({\n          files: [{\n            filename: \"/home/web_user/.pgpass\",\n            start: 0,\n            end: 204\n          }, {\n            filename: \"/tmp/pglite/bin/initdb\",\n            start: 204,\n            end: 216\n          }, {\n            filename: \"/tmp/pglite/bin/postgres\",\n            start: 216,\n            end: 228\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/cyrillic_and_mic.so\",\n            start: 228,\n            end: 20397\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/dict_snowball.so\",\n            start: 20397,\n            end: 1581299\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/euc2004_sjis2004.so\",\n            start: 1581299,\n            end: 1592382\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/euc_cn_and_mic.so\",\n            start: 1592382,\n            end: 1599256\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/euc_jp_and_sjis.so\",\n            start: 1599256,\n            end: 1622931\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/euc_kr_and_mic.so\",\n            start: 1622931,\n            end: 1630057\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/euc_tw_and_big5.so\",\n            start: 1630057,\n            end: 1651566\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/latin2_and_win1250.so\",\n            start: 1651566,\n            end: 1660345\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/latin_and_mic.so\",\n            start: 1660345,\n            end: 1668272\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/libpqwalreceiver.so\",\n            start: 1668272,\n            end: 2186522\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgoutput.so\",\n            start: 2186522,\n            end: 2303364\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgxs/config/install-sh\",\n            start: 2303364,\n            end: 2317361\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgxs/config/missing\",\n            start: 2317361,\n            end: 2318709\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgxs/src/Makefile.global\",\n            start: 2318709,\n            end: 2354956\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgxs/src/Makefile.port\",\n            start: 2354956,\n            end: 2355232\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgxs/src/Makefile.shlib\",\n            start: 2355232,\n            end: 2371270\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgxs/src/makefiles/pgxs.mk\",\n            start: 2371270,\n            end: 2386198\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgxs/src/nls-global.mk\",\n            start: 2386198,\n            end: 2393083\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgxs/src/test/isolation/isolationtester.cjs\",\n            start: 2393083,\n            end: 2589770\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgxs/src/test/isolation/pg_isolation_regress.cjs\",\n            start: 2589770,\n            end: 2742128\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/pgxs/src/test/regress/pg_regress.cjs\",\n            start: 2742128,\n            end: 2894476\n          }, {\n            filename: \"/tmp/pglite/lib/postgresql/plpgsql.so\",\n            start: 2894476,\n            end: 3653241\n          }, {\n            filename: \"/tmp/pglite/password\",\n            start: 3653241,\n            end: 3653250\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/errcodes.txt\",\n            start: 3653250,\n            end: 3686708\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/extension/plpgsql--1.0.sql\",\n            start: 3686708,\n            end: 3687366\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/extension/plpgsql.control\",\n            start: 3687366,\n            end: 3687559\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/fix-CVE-2024-4317.sql\",\n            start: 3687559,\n            end: 3693324\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/information_schema.sql\",\n            start: 3693324,\n            end: 3808299\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/pg_hba.conf.sample\",\n            start: 3808299,\n            end: 3813924\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/pg_ident.conf.sample\",\n            start: 3813924,\n            end: 3816564\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/pg_service.conf.sample\",\n            start: 3816564,\n            end: 3817168\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/postgres.bki\",\n            start: 3817168,\n            end: 4761272\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/postgresql.conf.sample\",\n            start: 4761272,\n            end: 4790919\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/psqlrc.sample\",\n            start: 4790919,\n            end: 4791197\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/snowball_create.sql\",\n            start: 4791197,\n            end: 4835373\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/sql_features.txt\",\n            start: 4835373,\n            end: 4871054\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/system_constraints.sql\",\n            start: 4871054,\n            end: 4879949\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/system_functions.sql\",\n            start: 4879949,\n            end: 4903264\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/system_views.sql\",\n            start: 4903264,\n            end: 4953537\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Abidjan\",\n            start: 4953537,\n            end: 4953667\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Accra\",\n            start: 4953667,\n            end: 4953797\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Addis_Ababa\",\n            start: 4953797,\n            end: 4953988\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Algiers\",\n            start: 4953988,\n            end: 4954458\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Asmara\",\n            start: 4954458,\n            end: 4954649\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Asmera\",\n            start: 4954649,\n            end: 4954840\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Bamako\",\n            start: 4954840,\n            end: 4954970\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Bangui\",\n            start: 4954970,\n            end: 4955150\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Banjul\",\n            start: 4955150,\n            end: 4955280\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Bissau\",\n            start: 4955280,\n            end: 4955429\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Blantyre\",\n            start: 4955429,\n            end: 4955560\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Brazzaville\",\n            start: 4955560,\n            end: 4955740\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Bujumbura\",\n            start: 4955740,\n            end: 4955871\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Cairo\",\n            start: 4955871,\n            end: 4957180\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Casablanca\",\n            start: 4957180,\n            end: 4959099\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Ceuta\",\n            start: 4959099,\n            end: 4959661\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Conakry\",\n            start: 4959661,\n            end: 4959791\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Dakar\",\n            start: 4959791,\n            end: 4959921\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Dar_es_Salaam\",\n            start: 4959921,\n            end: 4960112\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Djibouti\",\n            start: 4960112,\n            end: 4960303\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Douala\",\n            start: 4960303,\n            end: 4960483\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/El_Aaiun\",\n            start: 4960483,\n            end: 4962313\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Freetown\",\n            start: 4962313,\n            end: 4962443\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Gaborone\",\n            start: 4962443,\n            end: 4962574\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Harare\",\n            start: 4962574,\n            end: 4962705\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Johannesburg\",\n            start: 4962705,\n            end: 4962895\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Juba\",\n            start: 4962895,\n            end: 4963353\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Kampala\",\n            start: 4963353,\n            end: 4963544\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Khartoum\",\n            start: 4963544,\n            end: 4964002\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Kigali\",\n            start: 4964002,\n            end: 4964133\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Kinshasa\",\n            start: 4964133,\n            end: 4964313\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Lagos\",\n            start: 4964313,\n            end: 4964493\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Libreville\",\n            start: 4964493,\n            end: 4964673\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Lome\",\n            start: 4964673,\n            end: 4964803\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Luanda\",\n            start: 4964803,\n            end: 4964983\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Lubumbashi\",\n            start: 4964983,\n            end: 4965114\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Lusaka\",\n            start: 4965114,\n            end: 4965245\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Malabo\",\n            start: 4965245,\n            end: 4965425\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Maputo\",\n            start: 4965425,\n            end: 4965556\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Maseru\",\n            start: 4965556,\n            end: 4965746\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Mbabane\",\n            start: 4965746,\n            end: 4965936\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Mogadishu\",\n            start: 4965936,\n            end: 4966127\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Monrovia\",\n            start: 4966127,\n            end: 4966291\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Nairobi\",\n            start: 4966291,\n            end: 4966482\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Ndjamena\",\n            start: 4966482,\n            end: 4966642\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Niamey\",\n            start: 4966642,\n            end: 4966822\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Nouakchott\",\n            start: 4966822,\n            end: 4966952\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Ouagadougou\",\n            start: 4966952,\n            end: 4967082\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Porto-Novo\",\n            start: 4967082,\n            end: 4967262\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Sao_Tome\",\n            start: 4967262,\n            end: 4967435\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Timbuktu\",\n            start: 4967435,\n            end: 4967565\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Tripoli\",\n            start: 4967565,\n            end: 4967996\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Tunis\",\n            start: 4967996,\n            end: 4968445\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Africa/Windhoek\",\n            start: 4968445,\n            end: 4969083\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Adak\",\n            start: 4969083,\n            end: 4970052\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Anchorage\",\n            start: 4970052,\n            end: 4971029\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Anguilla\",\n            start: 4971029,\n            end: 4971206\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Antigua\",\n            start: 4971206,\n            end: 4971383\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Araguaina\",\n            start: 4971383,\n            end: 4971975\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Buenos_Aires\",\n            start: 4971975,\n            end: 4972683\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Catamarca\",\n            start: 4972683,\n            end: 4973391\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/ComodRivadavia\",\n            start: 4973391,\n            end: 4974099\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Cordoba\",\n            start: 4974099,\n            end: 4974807\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Jujuy\",\n            start: 4974807,\n            end: 4975497\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/La_Rioja\",\n            start: 4975497,\n            end: 4976214\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Mendoza\",\n            start: 4976214,\n            end: 4976922\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Rio_Gallegos\",\n            start: 4976922,\n            end: 4977630\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Salta\",\n            start: 4977630,\n            end: 4978320\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/San_Juan\",\n            start: 4978320,\n            end: 4979037\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/San_Luis\",\n            start: 4979037,\n            end: 4979754\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Tucuman\",\n            start: 4979754,\n            end: 4980480\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Ushuaia\",\n            start: 4980480,\n            end: 4981188\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Aruba\",\n            start: 4981188,\n            end: 4981365\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Asuncion\",\n            start: 4981365,\n            end: 4982249\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Atikokan\",\n            start: 4982249,\n            end: 4982398\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Atka\",\n            start: 4982398,\n            end: 4983367\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Bahia\",\n            start: 4983367,\n            end: 4984049\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Bahia_Banderas\",\n            start: 4984049,\n            end: 4984777\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Barbados\",\n            start: 4984777,\n            end: 4985055\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Belem\",\n            start: 4985055,\n            end: 4985449\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Belize\",\n            start: 4985449,\n            end: 4986494\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Blanc-Sablon\",\n            start: 4986494,\n            end: 4986671\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Boa_Vista\",\n            start: 4986671,\n            end: 4987101\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Bogota\",\n            start: 4987101,\n            end: 4987280\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Boise\",\n            start: 4987280,\n            end: 4988279\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Buenos_Aires\",\n            start: 4988279,\n            end: 4988987\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Cambridge_Bay\",\n            start: 4988987,\n            end: 4989870\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Campo_Grande\",\n            start: 4989870,\n            end: 4990822\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Cancun\",\n            start: 4990822,\n            end: 4991351\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Caracas\",\n            start: 4991351,\n            end: 4991541\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Catamarca\",\n            start: 4991541,\n            end: 4992249\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Cayenne\",\n            start: 4992249,\n            end: 4992400\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Cayman\",\n            start: 4992400,\n            end: 4992549\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Chicago\",\n            start: 4992549,\n            end: 4994303\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Chihuahua\",\n            start: 4994303,\n            end: 4994994\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Ciudad_Juarez\",\n            start: 4994994,\n            end: 4995712\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Coral_Harbour\",\n            start: 4995712,\n            end: 4995861\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Cordoba\",\n            start: 4995861,\n            end: 4996569\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Costa_Rica\",\n            start: 4996569,\n            end: 4996801\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Creston\",\n            start: 4996801,\n            end: 4997041\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Cuiaba\",\n            start: 4997041,\n            end: 4997975\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Curacao\",\n            start: 4997975,\n            end: 4998152\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Danmarkshavn\",\n            start: 4998152,\n            end: 4998599\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Dawson\",\n            start: 4998599,\n            end: 4999628\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Dawson_Creek\",\n            start: 4999628,\n            end: 5000311\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Denver\",\n            start: 5000311,\n            end: 5001353\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Detroit\",\n            start: 5001353,\n            end: 5002252\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Dominica\",\n            start: 5002252,\n            end: 5002429\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Edmonton\",\n            start: 5002429,\n            end: 5003399\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Eirunepe\",\n            start: 5003399,\n            end: 5003835\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/El_Salvador\",\n            start: 5003835,\n            end: 5004011\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Ensenada\",\n            start: 5004011,\n            end: 5005036\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Fort_Nelson\",\n            start: 5005036,\n            end: 5006484\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Fort_Wayne\",\n            start: 5006484,\n            end: 5007015\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Fortaleza\",\n            start: 5007015,\n            end: 5007499\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Glace_Bay\",\n            start: 5007499,\n            end: 5008379\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Godthab\",\n            start: 5008379,\n            end: 5009344\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Goose_Bay\",\n            start: 5009344,\n            end: 5010924\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Grand_Turk\",\n            start: 5010924,\n            end: 5011777\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Grenada\",\n            start: 5011777,\n            end: 5011954\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Guadeloupe\",\n            start: 5011954,\n            end: 5012131\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Guatemala\",\n            start: 5012131,\n            end: 5012343\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Guayaquil\",\n            start: 5012343,\n            end: 5012522\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Guyana\",\n            start: 5012522,\n            end: 5012703\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Halifax\",\n            start: 5012703,\n            end: 5014375\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Havana\",\n            start: 5014375,\n            end: 5015492\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Hermosillo\",\n            start: 5015492,\n            end: 5015778\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Indianapolis\",\n            start: 5015778,\n            end: 5016309\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Knox\",\n            start: 5016309,\n            end: 5017325\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Marengo\",\n            start: 5017325,\n            end: 5017892\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Petersburg\",\n            start: 5017892,\n            end: 5018575\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Tell_City\",\n            start: 5018575,\n            end: 5019097\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Vevay\",\n            start: 5019097,\n            end: 5019466\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Vincennes\",\n            start: 5019466,\n            end: 5020024\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Winamac\",\n            start: 5020024,\n            end: 5020636\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Indianapolis\",\n            start: 5020636,\n            end: 5021167\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Inuvik\",\n            start: 5021167,\n            end: 5021984\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Iqaluit\",\n            start: 5021984,\n            end: 5022839\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Jamaica\",\n            start: 5022839,\n            end: 5023178\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Jujuy\",\n            start: 5023178,\n            end: 5023868\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Juneau\",\n            start: 5023868,\n            end: 5024834\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Kentucky/Louisville\",\n            start: 5024834,\n            end: 5026076\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Kentucky/Monticello\",\n            start: 5026076,\n            end: 5027048\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Knox_IN\",\n            start: 5027048,\n            end: 5028064\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Kralendijk\",\n            start: 5028064,\n            end: 5028241\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/La_Paz\",\n            start: 5028241,\n            end: 5028411\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Lima\",\n            start: 5028411,\n            end: 5028694\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Los_Angeles\",\n            start: 5028694,\n            end: 5029988\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Louisville\",\n            start: 5029988,\n            end: 5031230\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Lower_Princes\",\n            start: 5031230,\n            end: 5031407\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Maceio\",\n            start: 5031407,\n            end: 5031909\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Managua\",\n            start: 5031909,\n            end: 5032204\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Manaus\",\n            start: 5032204,\n            end: 5032616\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Marigot\",\n            start: 5032616,\n            end: 5032793\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Martinique\",\n            start: 5032793,\n            end: 5032971\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Matamoros\",\n            start: 5032971,\n            end: 5033408\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Mazatlan\",\n            start: 5033408,\n            end: 5034126\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Mendoza\",\n            start: 5034126,\n            end: 5034834\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Menominee\",\n            start: 5034834,\n            end: 5035751\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Merida\",\n            start: 5035751,\n            end: 5036405\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Metlakatla\",\n            start: 5036405,\n            end: 5037e3\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Mexico_City\",\n            start: 5037e3,\n            end: 5037773\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Miquelon\",\n            start: 5037773,\n            end: 5038323\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Moncton\",\n            start: 5038323,\n            end: 5039816\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Monterrey\",\n            start: 5039816,\n            end: 5040460\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Montevideo\",\n            start: 5040460,\n            end: 5041429\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Montreal\",\n            start: 5041429,\n            end: 5043146\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Montserrat\",\n            start: 5043146,\n            end: 5043323\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Nassau\",\n            start: 5043323,\n            end: 5045040\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/New_York\",\n            start: 5045040,\n            end: 5046784\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Nipigon\",\n            start: 5046784,\n            end: 5048501\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Nome\",\n            start: 5048501,\n            end: 5049476\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Noronha\",\n            start: 5049476,\n            end: 5049960\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/North_Dakota/Beulah\",\n            start: 5049960,\n            end: 5051003\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/North_Dakota/Center\",\n            start: 5051003,\n            end: 5051993\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/North_Dakota/New_Salem\",\n            start: 5051993,\n            end: 5052983\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Nuuk\",\n            start: 5052983,\n            end: 5053948\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Ojinaga\",\n            start: 5053948,\n            end: 5054657\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Panama\",\n            start: 5054657,\n            end: 5054806\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Pangnirtung\",\n            start: 5054806,\n            end: 5055661\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Paramaribo\",\n            start: 5055661,\n            end: 5055848\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Phoenix\",\n            start: 5055848,\n            end: 5056088\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Port-au-Prince\",\n            start: 5056088,\n            end: 5056653\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Port_of_Spain\",\n            start: 5056653,\n            end: 5056830\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Porto_Acre\",\n            start: 5056830,\n            end: 5057248\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Porto_Velho\",\n            start: 5057248,\n            end: 5057642\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Puerto_Rico\",\n            start: 5057642,\n            end: 5057819\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Punta_Arenas\",\n            start: 5057819,\n            end: 5059037\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Rainy_River\",\n            start: 5059037,\n            end: 5060331\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Rankin_Inlet\",\n            start: 5060331,\n            end: 5061138\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Recife\",\n            start: 5061138,\n            end: 5061622\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Regina\",\n            start: 5061622,\n            end: 5062260\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Resolute\",\n            start: 5062260,\n            end: 5063067\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Rio_Branco\",\n            start: 5063067,\n            end: 5063485\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Rosario\",\n            start: 5063485,\n            end: 5064193\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Santa_Isabel\",\n            start: 5064193,\n            end: 5065218\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Santarem\",\n            start: 5065218,\n            end: 5065627\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Santiago\",\n            start: 5065627,\n            end: 5066981\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Santo_Domingo\",\n            start: 5066981,\n            end: 5067298\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Sao_Paulo\",\n            start: 5067298,\n            end: 5068250\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Scoresbysund\",\n            start: 5068250,\n            end: 5069234\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Shiprock\",\n            start: 5069234,\n            end: 5070276\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Sitka\",\n            start: 5070276,\n            end: 5071232\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/St_Barthelemy\",\n            start: 5071232,\n            end: 5071409\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/St_Johns\",\n            start: 5071409,\n            end: 5073287\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/St_Kitts\",\n            start: 5073287,\n            end: 5073464\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/St_Lucia\",\n            start: 5073464,\n            end: 5073641\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/St_Thomas\",\n            start: 5073641,\n            end: 5073818\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/St_Vincent\",\n            start: 5073818,\n            end: 5073995\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Swift_Current\",\n            start: 5073995,\n            end: 5074363\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Tegucigalpa\",\n            start: 5074363,\n            end: 5074557\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Thule\",\n            start: 5074557,\n            end: 5075012\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Thunder_Bay\",\n            start: 5075012,\n            end: 5076729\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Tijuana\",\n            start: 5076729,\n            end: 5077754\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Toronto\",\n            start: 5077754,\n            end: 5079471\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Tortola\",\n            start: 5079471,\n            end: 5079648\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Vancouver\",\n            start: 5079648,\n            end: 5080978\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Virgin\",\n            start: 5080978,\n            end: 5081155\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Whitehorse\",\n            start: 5081155,\n            end: 5082184\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Winnipeg\",\n            start: 5082184,\n            end: 5083478\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Yakutat\",\n            start: 5083478,\n            end: 5084424\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/America/Yellowknife\",\n            start: 5084424,\n            end: 5085394\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/Casey\",\n            start: 5085394,\n            end: 5085681\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/Davis\",\n            start: 5085681,\n            end: 5085878\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/DumontDUrville\",\n            start: 5085878,\n            end: 5086032\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/Macquarie\",\n            start: 5086032,\n            end: 5087008\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/Mawson\",\n            start: 5087008,\n            end: 5087160\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/McMurdo\",\n            start: 5087160,\n            end: 5088203\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/Palmer\",\n            start: 5088203,\n            end: 5089090\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/Rothera\",\n            start: 5089090,\n            end: 5089222\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/South_Pole\",\n            start: 5089222,\n            end: 5090265\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/Syowa\",\n            start: 5090265,\n            end: 5090398\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/Troll\",\n            start: 5090398,\n            end: 5090575\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Antarctica/Vostok\",\n            start: 5090575,\n            end: 5090745\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Arctic/Longyearbyen\",\n            start: 5090745,\n            end: 5091450\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Aden\",\n            start: 5091450,\n            end: 5091583\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Almaty\",\n            start: 5091583,\n            end: 5092201\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Amman\",\n            start: 5092201,\n            end: 5093129\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Anadyr\",\n            start: 5093129,\n            end: 5093872\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Aqtau\",\n            start: 5093872,\n            end: 5094478\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Aqtobe\",\n            start: 5094478,\n            end: 5095093\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Ashgabat\",\n            start: 5095093,\n            end: 5095468\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Ashkhabad\",\n            start: 5095468,\n            end: 5095843\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Atyrau\",\n            start: 5095843,\n            end: 5096459\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Baghdad\",\n            start: 5096459,\n            end: 5097089\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Bahrain\",\n            start: 5097089,\n            end: 5097241\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Baku\",\n            start: 5097241,\n            end: 5097985\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Bangkok\",\n            start: 5097985,\n            end: 5098137\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Barnaul\",\n            start: 5098137,\n            end: 5098890\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Beirut\",\n            start: 5098890,\n            end: 5099622\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Bishkek\",\n            start: 5099622,\n            end: 5100240\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Brunei\",\n            start: 5100240,\n            end: 5100560\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Calcutta\",\n            start: 5100560,\n            end: 5100780\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Chita\",\n            start: 5100780,\n            end: 5101530\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Choibalsan\",\n            start: 5101530,\n            end: 5102149\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Chongqing\",\n            start: 5102149,\n            end: 5102542\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Chungking\",\n            start: 5102542,\n            end: 5102935\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Colombo\",\n            start: 5102935,\n            end: 5103182\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Dacca\",\n            start: 5103182,\n            end: 5103413\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Damascus\",\n            start: 5103413,\n            end: 5104647\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Dhaka\",\n            start: 5104647,\n            end: 5104878\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Dili\",\n            start: 5104878,\n            end: 5105048\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Dubai\",\n            start: 5105048,\n            end: 5105181\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Dushanbe\",\n            start: 5105181,\n            end: 5105547\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Famagusta\",\n            start: 5105547,\n            end: 5106487\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Gaza\",\n            start: 5106487,\n            end: 5108933\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Harbin\",\n            start: 5108933,\n            end: 5109326\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Hebron\",\n            start: 5109326,\n            end: 5111790\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Ho_Chi_Minh\",\n            start: 5111790,\n            end: 5112026\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Hong_Kong\",\n            start: 5112026,\n            end: 5112801\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Hovd\",\n            start: 5112801,\n            end: 5113395\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Irkutsk\",\n            start: 5113395,\n            end: 5114155\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Istanbul\",\n            start: 5114155,\n            end: 5115355\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Jakarta\",\n            start: 5115355,\n            end: 5115603\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Jayapura\",\n            start: 5115603,\n            end: 5115774\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Jerusalem\",\n            start: 5115774,\n            end: 5116848\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Kabul\",\n            start: 5116848,\n            end: 5117007\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Kamchatka\",\n            start: 5117007,\n            end: 5117734\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Karachi\",\n            start: 5117734,\n            end: 5118e3\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Kashgar\",\n            start: 5118e3,\n            end: 5118133\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Kathmandu\",\n            start: 5118133,\n            end: 5118294\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Katmandu\",\n            start: 5118294,\n            end: 5118455\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Khandyga\",\n            start: 5118455,\n            end: 5119230\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Kolkata\",\n            start: 5119230,\n            end: 5119450\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Krasnoyarsk\",\n            start: 5119450,\n            end: 5120191\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Kuala_Lumpur\",\n            start: 5120191,\n            end: 5120447\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Kuching\",\n            start: 5120447,\n            end: 5120767\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Kuwait\",\n            start: 5120767,\n            end: 5120900\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Macao\",\n            start: 5120900,\n            end: 5121691\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Macau\",\n            start: 5121691,\n            end: 5122482\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Magadan\",\n            start: 5122482,\n            end: 5123233\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Makassar\",\n            start: 5123233,\n            end: 5123423\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Manila\",\n            start: 5123423,\n            end: 5123661\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Muscat\",\n            start: 5123661,\n            end: 5123794\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Nicosia\",\n            start: 5123794,\n            end: 5124391\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Novokuznetsk\",\n            start: 5124391,\n            end: 5125117\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Novosibirsk\",\n            start: 5125117,\n            end: 5125870\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Omsk\",\n            start: 5125870,\n            end: 5126611\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Oral\",\n            start: 5126611,\n            end: 5127236\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Phnom_Penh\",\n            start: 5127236,\n            end: 5127388\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Pontianak\",\n            start: 5127388,\n            end: 5127635\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Pyongyang\",\n            start: 5127635,\n            end: 5127818\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Qatar\",\n            start: 5127818,\n            end: 5127970\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Qostanay\",\n            start: 5127970,\n            end: 5128594\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Qyzylorda\",\n            start: 5128594,\n            end: 5129218\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Rangoon\",\n            start: 5129218,\n            end: 5129405\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Riyadh\",\n            start: 5129405,\n            end: 5129538\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Saigon\",\n            start: 5129538,\n            end: 5129774\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Sakhalin\",\n            start: 5129774,\n            end: 5130529\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Samarkand\",\n            start: 5130529,\n            end: 5130895\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Seoul\",\n            start: 5130895,\n            end: 5131310\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Shanghai\",\n            start: 5131310,\n            end: 5131703\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Singapore\",\n            start: 5131703,\n            end: 5131959\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Srednekolymsk\",\n            start: 5131959,\n            end: 5132701\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Taipei\",\n            start: 5132701,\n            end: 5133212\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Tashkent\",\n            start: 5133212,\n            end: 5133578\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Tbilisi\",\n            start: 5133578,\n            end: 5134207\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Tehran\",\n            start: 5134207,\n            end: 5135019\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Tel_Aviv\",\n            start: 5135019,\n            end: 5136093\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Thimbu\",\n            start: 5136093,\n            end: 5136247\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Thimphu\",\n            start: 5136247,\n            end: 5136401\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Tokyo\",\n            start: 5136401,\n            end: 5136614\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Tomsk\",\n            start: 5136614,\n            end: 5137367\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Ujung_Pandang\",\n            start: 5137367,\n            end: 5137557\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Ulaanbaatar\",\n            start: 5137557,\n            end: 5138151\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Ulan_Bator\",\n            start: 5138151,\n            end: 5138745\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Urumqi\",\n            start: 5138745,\n            end: 5138878\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Ust-Nera\",\n            start: 5138878,\n            end: 5139649\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Vientiane\",\n            start: 5139649,\n            end: 5139801\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Vladivostok\",\n            start: 5139801,\n            end: 5140543\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Yakutsk\",\n            start: 5140543,\n            end: 5141284\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Yangon\",\n            start: 5141284,\n            end: 5141471\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Yekaterinburg\",\n            start: 5141471,\n            end: 5142231\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Asia/Yerevan\",\n            start: 5142231,\n            end: 5142939\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/Azores\",\n            start: 5142939,\n            end: 5144392\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/Bermuda\",\n            start: 5144392,\n            end: 5145416\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/Canary\",\n            start: 5145416,\n            end: 5145894\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/Cape_Verde\",\n            start: 5145894,\n            end: 5146069\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/Faeroe\",\n            start: 5146069,\n            end: 5146510\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/Faroe\",\n            start: 5146510,\n            end: 5146951\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/Jan_Mayen\",\n            start: 5146951,\n            end: 5147656\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/Madeira\",\n            start: 5147656,\n            end: 5149109\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/Reykjavik\",\n            start: 5149109,\n            end: 5149239\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/South_Georgia\",\n            start: 5149239,\n            end: 5149371\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/St_Helena\",\n            start: 5149371,\n            end: 5149501\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Atlantic/Stanley\",\n            start: 5149501,\n            end: 5150290\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/ACT\",\n            start: 5150290,\n            end: 5151194\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Adelaide\",\n            start: 5151194,\n            end: 5152115\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Brisbane\",\n            start: 5152115,\n            end: 5152404\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Broken_Hill\",\n            start: 5152404,\n            end: 5153345\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Canberra\",\n            start: 5153345,\n            end: 5154249\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Currie\",\n            start: 5154249,\n            end: 5155252\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Darwin\",\n            start: 5155252,\n            end: 5155486\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Eucla\",\n            start: 5155486,\n            end: 5155800\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Hobart\",\n            start: 5155800,\n            end: 5156803\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/LHI\",\n            start: 5156803,\n            end: 5157495\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Lindeman\",\n            start: 5157495,\n            end: 5157820\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Lord_Howe\",\n            start: 5157820,\n            end: 5158512\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Melbourne\",\n            start: 5158512,\n            end: 5159416\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/NSW\",\n            start: 5159416,\n            end: 5160320\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/North\",\n            start: 5160320,\n            end: 5160554\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Perth\",\n            start: 5160554,\n            end: 5160860\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Queensland\",\n            start: 5160860,\n            end: 5161149\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/South\",\n            start: 5161149,\n            end: 5162070\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Sydney\",\n            start: 5162070,\n            end: 5162974\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Tasmania\",\n            start: 5162974,\n            end: 5163977\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Victoria\",\n            start: 5163977,\n            end: 5164881\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/West\",\n            start: 5164881,\n            end: 5165187\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Australia/Yancowinna\",\n            start: 5165187,\n            end: 5166128\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Brazil/Acre\",\n            start: 5166128,\n            end: 5166546\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Brazil/DeNoronha\",\n            start: 5166546,\n            end: 5167030\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Brazil/East\",\n            start: 5167030,\n            end: 5167982\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Brazil/West\",\n            start: 5167982,\n            end: 5168394\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/CET\",\n            start: 5168394,\n            end: 5169015\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/CST6CDT\",\n            start: 5169015,\n            end: 5169966\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Canada/Atlantic\",\n            start: 5169966,\n            end: 5171638\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Canada/Central\",\n            start: 5171638,\n            end: 5172932\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Canada/Eastern\",\n            start: 5172932,\n            end: 5174649\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Canada/Mountain\",\n            start: 5174649,\n            end: 5175619\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Canada/Newfoundland\",\n            start: 5175619,\n            end: 5177497\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Canada/Pacific\",\n            start: 5177497,\n            end: 5178827\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Canada/Saskatchewan\",\n            start: 5178827,\n            end: 5179465\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Canada/Yukon\",\n            start: 5179465,\n            end: 5180494\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Chile/Continental\",\n            start: 5180494,\n            end: 5181848\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Chile/EasterIsland\",\n            start: 5181848,\n            end: 5183022\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Cuba\",\n            start: 5183022,\n            end: 5184139\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/EET\",\n            start: 5184139,\n            end: 5184636\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/EST\",\n            start: 5184636,\n            end: 5184747\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/EST5EDT\",\n            start: 5184747,\n            end: 5185698\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Egypt\",\n            start: 5185698,\n            end: 5187007\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Eire\",\n            start: 5187007,\n            end: 5188503\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT\",\n            start: 5188503,\n            end: 5188614\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+0\",\n            start: 5188614,\n            end: 5188725\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+1\",\n            start: 5188725,\n            end: 5188838\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+10\",\n            start: 5188838,\n            end: 5188952\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+11\",\n            start: 5188952,\n            end: 5189066\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+12\",\n            start: 5189066,\n            end: 5189180\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+2\",\n            start: 5189180,\n            end: 5189293\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+3\",\n            start: 5189293,\n            end: 5189406\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+4\",\n            start: 5189406,\n            end: 5189519\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+5\",\n            start: 5189519,\n            end: 5189632\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+6\",\n            start: 5189632,\n            end: 5189745\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+7\",\n            start: 5189745,\n            end: 5189858\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+8\",\n            start: 5189858,\n            end: 5189971\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+9\",\n            start: 5189971,\n            end: 5190084\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-0\",\n            start: 5190084,\n            end: 5190195\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-1\",\n            start: 5190195,\n            end: 5190309\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-10\",\n            start: 5190309,\n            end: 5190424\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-11\",\n            start: 5190424,\n            end: 5190539\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-12\",\n            start: 5190539,\n            end: 5190654\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-13\",\n            start: 5190654,\n            end: 5190769\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-14\",\n            start: 5190769,\n            end: 5190884\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-2\",\n            start: 5190884,\n            end: 5190998\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-3\",\n            start: 5190998,\n            end: 5191112\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-4\",\n            start: 5191112,\n            end: 5191226\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-5\",\n            start: 5191226,\n            end: 5191340\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-6\",\n            start: 5191340,\n            end: 5191454\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-7\",\n            start: 5191454,\n            end: 5191568\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-8\",\n            start: 5191568,\n            end: 5191682\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-9\",\n            start: 5191682,\n            end: 5191796\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/GMT0\",\n            start: 5191796,\n            end: 5191907\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/Greenwich\",\n            start: 5191907,\n            end: 5192018\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/UCT\",\n            start: 5192018,\n            end: 5192129\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/UTC\",\n            start: 5192129,\n            end: 5192240\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/Universal\",\n            start: 5192240,\n            end: 5192351\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Etc/Zulu\",\n            start: 5192351,\n            end: 5192462\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Amsterdam\",\n            start: 5192462,\n            end: 5193565\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Andorra\",\n            start: 5193565,\n            end: 5193954\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Astrakhan\",\n            start: 5193954,\n            end: 5194680\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Athens\",\n            start: 5194680,\n            end: 5195362\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Belfast\",\n            start: 5195362,\n            end: 5196961\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Belgrade\",\n            start: 5196961,\n            end: 5197439\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Berlin\",\n            start: 5197439,\n            end: 5198144\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Bratislava\",\n            start: 5198144,\n            end: 5198867\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Brussels\",\n            start: 5198867,\n            end: 5199970\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Bucharest\",\n            start: 5199970,\n            end: 5200631\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Budapest\",\n            start: 5200631,\n            end: 5201397\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Busingen\",\n            start: 5201397,\n            end: 5201894\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Chisinau\",\n            start: 5201894,\n            end: 5202649\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Copenhagen\",\n            start: 5202649,\n            end: 5203354\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Dublin\",\n            start: 5203354,\n            end: 5204850\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Gibraltar\",\n            start: 5204850,\n            end: 5206070\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Guernsey\",\n            start: 5206070,\n            end: 5207669\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Helsinki\",\n            start: 5207669,\n            end: 5208150\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Isle_of_Man\",\n            start: 5208150,\n            end: 5209749\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Istanbul\",\n            start: 5209749,\n            end: 5210949\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Jersey\",\n            start: 5210949,\n            end: 5212548\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Kaliningrad\",\n            start: 5212548,\n            end: 5213452\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Kiev\",\n            start: 5213452,\n            end: 5214010\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Kirov\",\n            start: 5214010,\n            end: 5214745\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Kyiv\",\n            start: 5214745,\n            end: 5215303\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Lisbon\",\n            start: 5215303,\n            end: 5216757\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Ljubljana\",\n            start: 5216757,\n            end: 5217235\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/London\",\n            start: 5217235,\n            end: 5218834\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Luxembourg\",\n            start: 5218834,\n            end: 5219937\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Madrid\",\n            start: 5219937,\n            end: 5220834\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Malta\",\n            start: 5220834,\n            end: 5221762\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Mariehamn\",\n            start: 5221762,\n            end: 5222243\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Minsk\",\n            start: 5222243,\n            end: 5223051\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Monaco\",\n            start: 5223051,\n            end: 5224156\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Moscow\",\n            start: 5224156,\n            end: 5225064\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Nicosia\",\n            start: 5225064,\n            end: 5225661\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Oslo\",\n            start: 5225661,\n            end: 5226366\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Paris\",\n            start: 5226366,\n            end: 5227471\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Podgorica\",\n            start: 5227471,\n            end: 5227949\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Prague\",\n            start: 5227949,\n            end: 5228672\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Riga\",\n            start: 5228672,\n            end: 5229366\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Rome\",\n            start: 5229366,\n            end: 5230313\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Samara\",\n            start: 5230313,\n            end: 5231045\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/San_Marino\",\n            start: 5231045,\n            end: 5231992\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Sarajevo\",\n            start: 5231992,\n            end: 5232470\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Saratov\",\n            start: 5232470,\n            end: 5233196\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Simferopol\",\n            start: 5233196,\n            end: 5234061\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Skopje\",\n            start: 5234061,\n            end: 5234539\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Sofia\",\n            start: 5234539,\n            end: 5235131\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Stockholm\",\n            start: 5235131,\n            end: 5235836\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Tallinn\",\n            start: 5235836,\n            end: 5236511\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Tirane\",\n            start: 5236511,\n            end: 5237115\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Tiraspol\",\n            start: 5237115,\n            end: 5237870\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Ulyanovsk\",\n            start: 5237870,\n            end: 5238630\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Uzhgorod\",\n            start: 5238630,\n            end: 5239188\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Vaduz\",\n            start: 5239188,\n            end: 5239685\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Vatican\",\n            start: 5239685,\n            end: 5240632\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Vienna\",\n            start: 5240632,\n            end: 5241290\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Vilnius\",\n            start: 5241290,\n            end: 5241966\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Volgograd\",\n            start: 5241966,\n            end: 5242719\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Warsaw\",\n            start: 5242719,\n            end: 5243642\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Zagreb\",\n            start: 5243642,\n            end: 5244120\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Zaporozhye\",\n            start: 5244120,\n            end: 5244678\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Europe/Zurich\",\n            start: 5244678,\n            end: 5245175\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Factory\",\n            start: 5245175,\n            end: 5245288\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/GB\",\n            start: 5245288,\n            end: 5246887\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/GB-Eire\",\n            start: 5246887,\n            end: 5248486\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/GMT\",\n            start: 5248486,\n            end: 5248597\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/GMT+0\",\n            start: 5248597,\n            end: 5248708\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/GMT-0\",\n            start: 5248708,\n            end: 5248819\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/GMT0\",\n            start: 5248819,\n            end: 5248930\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Greenwich\",\n            start: 5248930,\n            end: 5249041\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/HST\",\n            start: 5249041,\n            end: 5249153\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Hongkong\",\n            start: 5249153,\n            end: 5249928\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Iceland\",\n            start: 5249928,\n            end: 5250058\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Antananarivo\",\n            start: 5250058,\n            end: 5250249\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Chagos\",\n            start: 5250249,\n            end: 5250401\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Christmas\",\n            start: 5250401,\n            end: 5250553\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Cocos\",\n            start: 5250553,\n            end: 5250740\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Comoro\",\n            start: 5250740,\n            end: 5250931\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Kerguelen\",\n            start: 5250931,\n            end: 5251083\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Mahe\",\n            start: 5251083,\n            end: 5251216\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Maldives\",\n            start: 5251216,\n            end: 5251368\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Mauritius\",\n            start: 5251368,\n            end: 5251547\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Mayotte\",\n            start: 5251547,\n            end: 5251738\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Indian/Reunion\",\n            start: 5251738,\n            end: 5251871\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Iran\",\n            start: 5251871,\n            end: 5252683\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Israel\",\n            start: 5252683,\n            end: 5253757\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Jamaica\",\n            start: 5253757,\n            end: 5254096\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Japan\",\n            start: 5254096,\n            end: 5254309\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Kwajalein\",\n            start: 5254309,\n            end: 5254528\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Libya\",\n            start: 5254528,\n            end: 5254959\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/MET\",\n            start: 5254959,\n            end: 5255580\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/MST\",\n            start: 5255580,\n            end: 5255691\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/MST7MDT\",\n            start: 5255691,\n            end: 5256642\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Mexico/BajaNorte\",\n            start: 5256642,\n            end: 5257667\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Mexico/BajaSur\",\n            start: 5257667,\n            end: 5258385\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Mexico/General\",\n            start: 5258385,\n            end: 5259158\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/NZ\",\n            start: 5259158,\n            end: 5260201\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/NZ-CHAT\",\n            start: 5260201,\n            end: 5261009\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Navajo\",\n            start: 5261009,\n            end: 5262051\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/PRC\",\n            start: 5262051,\n            end: 5262444\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/PST8PDT\",\n            start: 5262444,\n            end: 5263395\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Apia\",\n            start: 5263395,\n            end: 5263802\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Auckland\",\n            start: 5263802,\n            end: 5264845\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Bougainville\",\n            start: 5264845,\n            end: 5265046\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Chatham\",\n            start: 5265046,\n            end: 5265854\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Chuuk\",\n            start: 5265854,\n            end: 5266008\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Easter\",\n            start: 5266008,\n            end: 5267182\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Efate\",\n            start: 5267182,\n            end: 5267524\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Enderbury\",\n            start: 5267524,\n            end: 5267696\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Fakaofo\",\n            start: 5267696,\n            end: 5267849\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Fiji\",\n            start: 5267849,\n            end: 5268245\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Funafuti\",\n            start: 5268245,\n            end: 5268379\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Galapagos\",\n            start: 5268379,\n            end: 5268554\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Gambier\",\n            start: 5268554,\n            end: 5268686\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Guadalcanal\",\n            start: 5268686,\n            end: 5268820\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Guam\",\n            start: 5268820,\n            end: 5269170\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Honolulu\",\n            start: 5269170,\n            end: 5269391\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Johnston\",\n            start: 5269391,\n            end: 5269612\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Kanton\",\n            start: 5269612,\n            end: 5269784\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Kiritimati\",\n            start: 5269784,\n            end: 5269958\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Kosrae\",\n            start: 5269958,\n            end: 5270200\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Kwajalein\",\n            start: 5270200,\n            end: 5270419\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Majuro\",\n            start: 5270419,\n            end: 5270553\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Marquesas\",\n            start: 5270553,\n            end: 5270692\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Midway\",\n            start: 5270692,\n            end: 5270838\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Nauru\",\n            start: 5270838,\n            end: 5271021\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Niue\",\n            start: 5271021,\n            end: 5271175\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Norfolk\",\n            start: 5271175,\n            end: 5271422\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Noumea\",\n            start: 5271422,\n            end: 5271620\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Pago_Pago\",\n            start: 5271620,\n            end: 5271766\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Palau\",\n            start: 5271766,\n            end: 5271914\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Pitcairn\",\n            start: 5271914,\n            end: 5272067\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Pohnpei\",\n            start: 5272067,\n            end: 5272201\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Ponape\",\n            start: 5272201,\n            end: 5272335\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Port_Moresby\",\n            start: 5272335,\n            end: 5272489\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Rarotonga\",\n            start: 5272489,\n            end: 5272895\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Saipan\",\n            start: 5272895,\n            end: 5273245\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Samoa\",\n            start: 5273245,\n            end: 5273391\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Tahiti\",\n            start: 5273391,\n            end: 5273524\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Tarawa\",\n            start: 5273524,\n            end: 5273658\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Tongatapu\",\n            start: 5273658,\n            end: 5273895\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Truk\",\n            start: 5273895,\n            end: 5274049\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Wake\",\n            start: 5274049,\n            end: 5274183\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Wallis\",\n            start: 5274183,\n            end: 5274317\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Pacific/Yap\",\n            start: 5274317,\n            end: 5274471\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Poland\",\n            start: 5274471,\n            end: 5275394\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Portugal\",\n            start: 5275394,\n            end: 5276848\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/ROC\",\n            start: 5276848,\n            end: 5277359\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/ROK\",\n            start: 5277359,\n            end: 5277774\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Singapore\",\n            start: 5277774,\n            end: 5278030\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Turkey\",\n            start: 5278030,\n            end: 5279230\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/UCT\",\n            start: 5279230,\n            end: 5279341\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Alaska\",\n            start: 5279341,\n            end: 5280318\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Aleutian\",\n            start: 5280318,\n            end: 5281287\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Arizona\",\n            start: 5281287,\n            end: 5281527\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Central\",\n            start: 5281527,\n            end: 5283281\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/East-Indiana\",\n            start: 5283281,\n            end: 5283812\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Eastern\",\n            start: 5283812,\n            end: 5285556\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Hawaii\",\n            start: 5285556,\n            end: 5285777\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Indiana-Starke\",\n            start: 5285777,\n            end: 5286793\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Michigan\",\n            start: 5286793,\n            end: 5287692\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Mountain\",\n            start: 5287692,\n            end: 5288734\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Pacific\",\n            start: 5288734,\n            end: 5290028\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/US/Samoa\",\n            start: 5290028,\n            end: 5290174\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/UTC\",\n            start: 5290174,\n            end: 5290285\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Universal\",\n            start: 5290285,\n            end: 5290396\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/W-SU\",\n            start: 5290396,\n            end: 5291304\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/WET\",\n            start: 5291304,\n            end: 5291798\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezone/Zulu\",\n            start: 5291798,\n            end: 5291909\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Africa.txt\",\n            start: 5291909,\n            end: 5298882\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/America.txt\",\n            start: 5298882,\n            end: 5309889\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Antarctica.txt\",\n            start: 5309889,\n            end: 5311023\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Asia.txt\",\n            start: 5311023,\n            end: 5319334\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Atlantic.txt\",\n            start: 5319334,\n            end: 5322867\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Australia\",\n            start: 5322867,\n            end: 5324002\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Australia.txt\",\n            start: 5324002,\n            end: 5327386\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Default\",\n            start: 5327386,\n            end: 5354636\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Etc.txt\",\n            start: 5354636,\n            end: 5355886\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Europe.txt\",\n            start: 5355886,\n            end: 5364668\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/India\",\n            start: 5364668,\n            end: 5365261\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Indian.txt\",\n            start: 5365261,\n            end: 5366522\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/timezonesets/Pacific.txt\",\n            start: 5366522,\n            end: 5370290\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/danish.stop\",\n            start: 5370290,\n            end: 5370714\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/dutch.stop\",\n            start: 5370714,\n            end: 5371167\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/english.stop\",\n            start: 5371167,\n            end: 5371789\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/finnish.stop\",\n            start: 5371789,\n            end: 5373368\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/french.stop\",\n            start: 5373368,\n            end: 5374173\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/german.stop\",\n            start: 5374173,\n            end: 5375522\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/hungarian.stop\",\n            start: 5375522,\n            end: 5376749\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/hunspell_sample.affix\",\n            start: 5376749,\n            end: 5376992\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/hunspell_sample_long.affix\",\n            start: 5376992,\n            end: 5377625\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/hunspell_sample_long.dict\",\n            start: 5377625,\n            end: 5377723\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/hunspell_sample_num.affix\",\n            start: 5377723,\n            end: 5378185\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/hunspell_sample_num.dict\",\n            start: 5378185,\n            end: 5378314\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/ispell_sample.affix\",\n            start: 5378314,\n            end: 5378779\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/ispell_sample.dict\",\n            start: 5378779,\n            end: 5378860\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/italian.stop\",\n            start: 5378860,\n            end: 5380514\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/nepali.stop\",\n            start: 5380514,\n            end: 5384775\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/norwegian.stop\",\n            start: 5384775,\n            end: 5385626\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/portuguese.stop\",\n            start: 5385626,\n            end: 5386893\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/russian.stop\",\n            start: 5386893,\n            end: 5388128\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/spanish.stop\",\n            start: 5388128,\n            end: 5390306\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/swedish.stop\",\n            start: 5390306,\n            end: 5390865\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/synonym_sample.syn\",\n            start: 5390865,\n            end: 5390938\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/thesaurus_sample.ths\",\n            start: 5390938,\n            end: 5391411\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/turkish.stop\",\n            start: 5391411,\n            end: 5391671\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/unaccent.rules\",\n            start: 5391671,\n            end: 5401610\n          }, {\n            filename: \"/tmp/pglite/share/postgresql/tsearch_data/xsyn_sample.rules\",\n            start: 5401610,\n            end: 5401749\n          }],\n          remote_package_size: 5401749\n        });\n      })();\n      var moduleOverrides = Object.assign({}, Module),\n        arguments_ = [],\n        thisProgram = \"./this.program\",\n        quit_ = (e, t) => {\n          throw t;\n        },\n        scriptDirectory = \"\";\n      function locateFile(e) {\n        return Module.locateFile ? Module.locateFile(e, scriptDirectory) : scriptDirectory + e;\n      }\n      var readAsync, readBinary;\n      if (ENVIRONMENT_IS_NODE) {\n        var fs = require(\"fs\"),\n          nodePath = require(\"path\");\n        \"file:///Users/anwarmoussaoui/Desktop/Demos/pglite/Pglite/js/node_modules/@electric-sql/pglite/dist/index.js\".startsWith(\"data:\") || (scriptDirectory = nodePath.dirname(require(\"url\").fileURLToPath(\"file:///Users/anwarmoussaoui/Desktop/Demos/pglite/Pglite/js/node_modules/@electric-sql/pglite/dist/index.js\")) + \"/\"), readBinary = e => {\n          e = isFileURI(e) ? new URL(e) : e;\n          var t = fs.readFileSync(e);\n          return t;\n        }, readAsync = async (e, t = !0) => {\n          e = isFileURI(e) ? new URL(e) : e;\n          var r = fs.readFileSync(e, t ? void 0 : \"utf8\");\n          return r;\n        }, !Module.thisProgram && process.argv.length > 1 && (thisProgram = process.argv[1].replace(/\\\\/g, \"/\")), arguments_ = process.argv.slice(2), quit_ = (e, t) => {\n          throw process.exitCode = e, t;\n        };\n      } else (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && (ENVIRONMENT_IS_WORKER ? scriptDirectory = self.location.href : typeof document < \"u\" && document.currentScript && (scriptDirectory = document.currentScript.src), _scriptName && (scriptDirectory = _scriptName), scriptDirectory.startsWith(\"blob:\") ? scriptDirectory = \"\" : scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1), readAsync = async e => {\n        var t = await fetch(e, {\n          credentials: \"same-origin\"\n        });\n        if (t.ok) return t.arrayBuffer();\n        throw new Error(t.status + \" : \" + t.url);\n      });\n      var out = Module.print || console.log.bind(console),\n        err = Module.printErr || console.error.bind(console);\n      Object.assign(Module, moduleOverrides), moduleOverrides = null, Module.arguments && (arguments_ = Module.arguments), Module.thisProgram && (thisProgram = Module.thisProgram);\n      var dynamicLibraries = Module.dynamicLibraries || [],\n        wasmBinary = Module.wasmBinary;\n      function intArrayFromBase64(e) {\n        if (typeof ENVIRONMENT_IS_NODE < \"u\" && ENVIRONMENT_IS_NODE) {\n          var t = Buffer.from(e, \"base64\");\n          return new Uint8Array(t.buffer, t.byteOffset, t.length);\n        }\n        for (var r = atob(e), a = new Uint8Array(r.length), o = 0; o < r.length; ++o) a[o] = r.charCodeAt(o);\n        return a;\n      }\n      var wasmMemory,\n        ABORT = !1,\n        EXITSTATUS;\n      function assert(e, t) {\n        e || abort(t);\n      }\n      var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAP64, HEAPU64, HEAPF64;\n      function updateMemoryViews() {\n        var e = wasmMemory.buffer;\n        Module.HEAP8 = HEAP8 = new Int8Array(e), Module.HEAP16 = HEAP16 = new Int16Array(e), Module.HEAPU8 = HEAPU8 = new Uint8Array(e), Module.HEAPU16 = HEAPU16 = new Uint16Array(e), Module.HEAP32 = HEAP32 = new Int32Array(e), Module.HEAPU32 = HEAPU32 = new Uint32Array(e), Module.HEAPF32 = HEAPF32 = new Float32Array(e), Module.HEAPF64 = HEAPF64 = new Float64Array(e), Module.HEAP64 = HEAP64 = new BigInt64Array(e), Module.HEAPU64 = HEAPU64 = new BigUint64Array(e);\n      }\n      if (Module.wasmMemory) wasmMemory = Module.wasmMemory;else {\n        var INITIAL_MEMORY = Module.INITIAL_MEMORY || 134217728;\n        wasmMemory = new WebAssembly.Memory({\n          initial: INITIAL_MEMORY / 65536,\n          maximum: 32768\n        });\n      }\n      updateMemoryViews();\n      var __ATPRERUN__ = [],\n        __ATINIT__ = [],\n        __ATMAIN__ = [],\n        __ATPOSTRUN__ = [],\n        __RELOC_FUNCS__ = [],\n        runtimeInitialized = !1;\n      function preRun() {\n        if (Module.preRun) for (typeof Module.preRun == \"function\" && (Module.preRun = [Module.preRun]); Module.preRun.length;) addOnPreRun(Module.preRun.shift());\n        callRuntimeCallbacks(__ATPRERUN__);\n      }\n      function initRuntime() {\n        runtimeInitialized = !0, callRuntimeCallbacks(__RELOC_FUNCS__), !Module.noFSInit && !FS.initialized && FS.init(), FS.ignorePermissions = !1, TTY.init(), SOCKFS.root = FS.mount(SOCKFS, {}, null), PIPEFS.root = FS.mount(PIPEFS, {}, null), callRuntimeCallbacks(__ATINIT__);\n      }\n      function preMain() {\n        callRuntimeCallbacks(__ATMAIN__);\n      }\n      function postRun() {\n        if (Module.postRun) for (typeof Module.postRun == \"function\" && (Module.postRun = [Module.postRun]); Module.postRun.length;) addOnPostRun(Module.postRun.shift());\n        callRuntimeCallbacks(__ATPOSTRUN__);\n      }\n      function addOnPreRun(e) {\n        __ATPRERUN__.unshift(e);\n      }\n      function addOnInit(e) {\n        __ATINIT__.unshift(e);\n      }\n      function addOnPostRun(e) {\n        __ATPOSTRUN__.unshift(e);\n      }\n      var runDependencies = 0,\n        dependenciesFulfilled = null;\n      function getUniqueRunDependency(e) {\n        return e;\n      }\n      function addRunDependency(e) {\n        runDependencies++, Module.monitorRunDependencies?.(runDependencies);\n      }\n      function removeRunDependency(e) {\n        if (runDependencies--, Module.monitorRunDependencies?.(runDependencies), runDependencies == 0 && dependenciesFulfilled) {\n          var t = dependenciesFulfilled;\n          dependenciesFulfilled = null, t();\n        }\n      }\n      function abort(e) {\n        Module.onAbort?.(e), e = \"Aborted(\" + e + \")\", err(e), ABORT = !0, e += \". Build with -sASSERTIONS for more info.\";\n        var t = new WebAssembly.RuntimeError(e);\n        throw readyPromiseReject(t), t;\n      }\n      var dataURIPrefix = \"data:application/octet-stream;base64,\",\n        isDataURI = e => e.startsWith(dataURIPrefix),\n        isFileURI = e => e.startsWith(\"file://\");\n      function findWasmBinary() {\n        if (Module.locateFile) {\n          var e = \"postgres.wasm\";\n          return isDataURI(e) ? e : locateFile(e);\n        }\n        return new URL(/* asset import */ __webpack_require__(/*! postgres.wasm */ \"./node_modules/@electric-sql/pglite/dist/postgres.wasm\"), __webpack_require__.b).href;\n      }\n      var wasmBinaryFile;\n      function getBinarySync(e) {\n        if (e == wasmBinaryFile && wasmBinary) return new Uint8Array(wasmBinary);\n        if (readBinary) return readBinary(e);\n        throw \"both async and sync fetching of the wasm failed\";\n      }\n      async function getWasmBinary(e) {\n        if (!wasmBinary) try {\n          var t = await readAsync(e);\n          return new Uint8Array(t);\n        } catch {}\n        return getBinarySync(e);\n      }\n      async function instantiateArrayBuffer(e, t) {\n        try {\n          var r = await getWasmBinary(e),\n            a = await WebAssembly.instantiate(r, t);\n          return a;\n        } catch (o) {\n          err(`failed to asynchronously prepare wasm: ${o}`), abort(o);\n        }\n      }\n      async function instantiateAsync(e, t, r) {\n        if (!e && typeof WebAssembly.instantiateStreaming == \"function\" && !isDataURI(t) && !ENVIRONMENT_IS_NODE && typeof fetch == \"function\") try {\n          var a = fetch(t, {\n              credentials: \"same-origin\"\n            }),\n            o = await WebAssembly.instantiateStreaming(a, r);\n          return o;\n        } catch (s) {\n          err(`wasm streaming compile failed: ${s}`), err(\"falling back to ArrayBuffer instantiation\");\n        }\n        return instantiateArrayBuffer(t, r);\n      }\n      function getWasmImports() {\n        return {\n          env: wasmImports,\n          wasi_snapshot_preview1: wasmImports,\n          \"GOT.mem\": new Proxy(wasmImports, GOTHandler),\n          \"GOT.func\": new Proxy(wasmImports, GOTHandler)\n        };\n      }\n      async function createWasm() {\n        function e(o, s) {\n          wasmExports = o.exports, wasmExports = relocateExports(wasmExports, 16777216);\n          var l = getDylinkMetadata(s);\n          return l.neededDynlibs && (dynamicLibraries = l.neededDynlibs.concat(dynamicLibraries)), mergeLibSymbols(wasmExports, \"main\"), LDSO.init(), loadDylibs(), addOnInit(wasmExports.__wasm_call_ctors), __RELOC_FUNCS__.push(wasmExports.__wasm_apply_data_relocs), removeRunDependency(\"wasm-instantiate\"), wasmExports;\n        }\n        addRunDependency(\"wasm-instantiate\");\n        function t(o) {\n          e(o.instance, o.module);\n        }\n        var r = getWasmImports();\n        if (Module.instantiateWasm) try {\n          return Module.instantiateWasm(r, e);\n        } catch (o) {\n          err(`Module.instantiateWasm callback failed with error: ${o}`), readyPromiseReject(o);\n        }\n        wasmBinaryFile ?? (wasmBinaryFile = findWasmBinary());\n        try {\n          var a = await instantiateAsync(wasmBinary, wasmBinaryFile, r);\n          return t(a), a;\n        } catch (o) {\n          readyPromiseReject(o);\n          return;\n        }\n      }\n      var ASM_CONSTS = {\n        18792944: e => {\n          Module.is_worker = typeof WorkerGlobalScope < \"u\" && self instanceof WorkerGlobalScope, Module.FD_BUFFER_MAX = e, Module.emscripten_copy_to = console.warn;\n        },\n        18793117: () => {\n          Module.postMessage = function (t) {\n            console.log(\"# 1252: onCustomMessage:\", __FILE__, t);\n          };\n        },\n        18793242: () => {\n          if (Module.is_worker) {\n            let t = function (r) {\n              console.log(\"onCustomMessage:\", r);\n            };\n            var e = t;\n            Module.onCustomMessage = t;\n          } else Module.postMessage = function (r) {\n            switch (r.type) {\n              case \"raw\":\n                {\n                  stringToUTF8(r.data, shm_rawinput, Module.FD_BUFFER_MAX);\n                  break;\n                }\n              case \"stdin\":\n                {\n                  stringToUTF8(r.data, 1, Module.FD_BUFFER_MAX);\n                  break;\n                }\n              case \"rcon\":\n                {\n                  stringToUTF8(r.data, shm_rcon, Module.FD_BUFFER_MAX);\n                  break;\n                }\n              default:\n                console.warn(\"custom_postMessage?\", r);\n            }\n          };\n        }\n      };\n      function is_web_env() {\n        try {\n          if (window) return 1;\n        } catch {\n          return 0;\n        }\n      }\n      is_web_env.sig = \"i\";\n      class ExitStatus {\n        constructor(t) {\n          (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.d)(this, \"name\", \"ExitStatus\");\n          this.message = `Program terminated with exit(${t})`, this.status = t;\n        }\n      }\n      var GOT = {},\n        currentModuleWeakSymbols = new Set([]),\n        GOTHandler = {\n          get(e, t) {\n            var r = GOT[t];\n            return r || (r = GOT[t] = new WebAssembly.Global({\n              value: \"i32\",\n              mutable: !0\n            })), currentModuleWeakSymbols.has(t) || (r.required = !0), r;\n          }\n        },\n        callRuntimeCallbacks = e => {\n          for (; e.length > 0;) e.shift()(Module);\n        },\n        UTF8Decoder = typeof TextDecoder < \"u\" ? new TextDecoder() : void 0,\n        UTF8ArrayToString = (e, t = 0, r = NaN) => {\n          for (var a = t + r, o = t; e[o] && !(o >= a);) ++o;\n          if (o - t > 16 && e.buffer && UTF8Decoder) return UTF8Decoder.decode(e.subarray(t, o));\n          for (var s = \"\"; t < o;) {\n            var l = e[t++];\n            if (!(l & 128)) {\n              s += String.fromCharCode(l);\n              continue;\n            }\n            var n = e[t++] & 63;\n            if ((l & 224) == 192) {\n              s += String.fromCharCode((l & 31) << 6 | n);\n              continue;\n            }\n            var _ = e[t++] & 63;\n            if ((l & 240) == 224 ? l = (l & 15) << 12 | n << 6 | _ : l = (l & 7) << 18 | n << 12 | _ << 6 | e[t++] & 63, l < 65536) s += String.fromCharCode(l);else {\n              var m = l - 65536;\n              s += String.fromCharCode(55296 | m >> 10, 56320 | m & 1023);\n            }\n          }\n          return s;\n        },\n        getDylinkMetadata = e => {\n          var t = 0,\n            r = 0;\n          function a() {\n            return e[t++];\n          }\n          function o() {\n            for (var P = 0, U = 1;;) {\n              var A = e[t++];\n              if (P += (A & 127) * U, U *= 128, !(A & 128)) break;\n            }\n            return P;\n          }\n          function s() {\n            var P = o();\n            return t += P, UTF8ArrayToString(e, t - P, P);\n          }\n          function l(P, U) {\n            if (P) throw new Error(U);\n          }\n          var n = \"dylink.0\";\n          if (e instanceof WebAssembly.Module) {\n            var _ = WebAssembly.Module.customSections(e, n);\n            _.length === 0 && (n = \"dylink\", _ = WebAssembly.Module.customSections(e, n)), l(_.length === 0, \"need dylink section\"), e = new Uint8Array(_[0]), r = e.length;\n          } else {\n            var m = new Uint32Array(new Uint8Array(e.subarray(0, 24)).buffer),\n              p = m[0] == 1836278016;\n            l(!p, \"need to see wasm magic number\"), l(e[8] !== 0, \"need the dylink section to be first\"), t = 9;\n            var d = o();\n            r = t + d, n = s();\n          }\n          var g = {\n            neededDynlibs: [],\n            tlsExports: new Set(),\n            weakImports: new Set()\n          };\n          if (n == \"dylink\") {\n            g.memorySize = o(), g.memoryAlign = o(), g.tableSize = o(), g.tableAlign = o();\n            for (var c = o(), f = 0; f < c; ++f) {\n              var u = s();\n              g.neededDynlibs.push(u);\n            }\n          } else {\n            l(n !== \"dylink.0\");\n            for (var w = 1, h = 2, S = 3, M = 4, y = 256, x = 3, E = 1; t < r;) {\n              var b = a(),\n                T = o();\n              if (b === w) g.memorySize = o(), g.memoryAlign = o(), g.tableSize = o(), g.tableAlign = o();else if (b === h) for (var c = o(), f = 0; f < c; ++f) u = s(), g.neededDynlibs.push(u);else if (b === S) for (var D = o(); D--;) {\n                var X = s(),\n                  R = o();\n                R & y && g.tlsExports.add(X);\n              } else if (b === M) for (var D = o(); D--;) {\n                var z = s(),\n                  X = s(),\n                  R = o();\n                (R & x) == E && g.weakImports.add(X);\n              } else t += T;\n            }\n          }\n          return g;\n        };\n      function getValue(e, t = \"i8\") {\n        switch (t.endsWith(\"*\") && (t = \"*\"), t) {\n          case \"i1\":\n            return HEAP8[e];\n          case \"i8\":\n            return HEAP8[e];\n          case \"i16\":\n            return HEAP16[e >> 1];\n          case \"i32\":\n            return HEAP32[e >> 2];\n          case \"i64\":\n            return HEAP64[e >> 3];\n          case \"float\":\n            return HEAPF32[e >> 2];\n          case \"double\":\n            return HEAPF64[e >> 3];\n          case \"*\":\n            return HEAPU32[e >> 2];\n          default:\n            abort(`invalid type for getValue: ${t}`);\n        }\n      }\n      var newDSO = (e, t, r) => {\n          var a = {\n            refcount: 1 / 0,\n            name: e,\n            exports: r,\n            global: !0\n          };\n          return LDSO.loadedLibsByName[e] = a, t != null && (LDSO.loadedLibsByHandle[t] = a), a;\n        },\n        LDSO = {\n          loadedLibsByName: {},\n          loadedLibsByHandle: {},\n          init() {\n            newDSO(\"__main__\", 0, wasmImports);\n          }\n        },\n        ___heap_base = 23144432,\n        alignMemory = (e, t) => Math.ceil(e / t) * t,\n        getMemory = e => {\n          if (runtimeInitialized) return _calloc(e, 1);\n          var t = ___heap_base,\n            r = t + alignMemory(e, 16);\n          return ___heap_base = r, GOT.__heap_base.value = r, t;\n        },\n        isInternalSym = e => [\"__cpp_exception\", \"__c_longjmp\", \"__wasm_apply_data_relocs\", \"__dso_handle\", \"__tls_size\", \"__tls_align\", \"__set_stack_limits\", \"_emscripten_tls_init\", \"__wasm_init_tls\", \"__wasm_call_ctors\", \"__start_em_asm\", \"__stop_em_asm\", \"__start_em_js\", \"__stop_em_js\"].includes(e) || e.startsWith(\"__em_js__\"),\n        uleb128Encode = (e, t) => {\n          e < 128 ? t.push(e) : t.push(e % 128 | 128, e >> 7);\n        },\n        sigToWasmTypes = e => {\n          for (var t = {\n              i: \"i32\",\n              j: \"i64\",\n              f: \"f32\",\n              d: \"f64\",\n              e: \"externref\",\n              p: \"i32\"\n            }, r = {\n              parameters: [],\n              results: e[0] == \"v\" ? [] : [t[e[0]]]\n            }, a = 1; a < e.length; ++a) r.parameters.push(t[e[a]]);\n          return r;\n        },\n        generateFuncType = (e, t) => {\n          var r = e.slice(0, 1),\n            a = e.slice(1),\n            o = {\n              i: 127,\n              p: 127,\n              j: 126,\n              f: 125,\n              d: 124,\n              e: 111\n            };\n          t.push(96), uleb128Encode(a.length, t);\n          for (var s = 0; s < a.length; ++s) t.push(o[a[s]]);\n          r == \"v\" ? t.push(0) : t.push(1, o[r]);\n        },\n        convertJsFunctionToWasm = (e, t) => {\n          if (typeof WebAssembly.Function == \"function\") return new WebAssembly.Function(sigToWasmTypes(t), e);\n          var r = [1];\n          generateFuncType(t, r);\n          var a = [0, 97, 115, 109, 1, 0, 0, 0, 1];\n          uleb128Encode(r.length, a), a.push(...r), a.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0);\n          var o = new WebAssembly.Module(new Uint8Array(a)),\n            s = new WebAssembly.Instance(o, {\n              e: {\n                f: e\n              }\n            }),\n            l = s.exports.f;\n          return l;\n        },\n        wasmTableMirror = [],\n        wasmTable = new WebAssembly.Table({\n          initial: 5360,\n          element: \"anyfunc\"\n        }),\n        getWasmTableEntry = e => {\n          var t = wasmTableMirror[e];\n          return t || (e >= wasmTableMirror.length && (wasmTableMirror.length = e + 1), wasmTableMirror[e] = t = wasmTable.get(e)), t;\n        },\n        updateTableMap = (e, t) => {\n          if (functionsInTableMap) for (var r = e; r < e + t; r++) {\n            var a = getWasmTableEntry(r);\n            a && functionsInTableMap.set(a, r);\n          }\n        },\n        functionsInTableMap,\n        getFunctionAddress = e => (functionsInTableMap || (functionsInTableMap = new WeakMap(), updateTableMap(0, wasmTable.length)), functionsInTableMap.get(e) || 0),\n        freeTableIndexes = [],\n        getEmptyTableSlot = () => {\n          if (freeTableIndexes.length) return freeTableIndexes.pop();\n          try {\n            wasmTable.grow(1);\n          } catch (e) {\n            throw e instanceof RangeError ? \"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.\" : e;\n          }\n          return wasmTable.length - 1;\n        },\n        setWasmTableEntry = (e, t) => {\n          wasmTable.set(e, t), wasmTableMirror[e] = wasmTable.get(e);\n        },\n        addFunction = (e, t) => {\n          var r = getFunctionAddress(e);\n          if (r) return r;\n          var a = getEmptyTableSlot();\n          try {\n            setWasmTableEntry(a, e);\n          } catch (s) {\n            if (!(s instanceof TypeError)) throw s;\n            var o = convertJsFunctionToWasm(e, t);\n            setWasmTableEntry(a, o);\n          }\n          return functionsInTableMap.set(e, a), a;\n        },\n        updateGOT = (e, t) => {\n          for (var r in e) if (!isInternalSym(r)) {\n            var a = e[r];\n            GOT[r] || (GOT[r] = new WebAssembly.Global({\n              value: \"i32\",\n              mutable: !0\n            })), (t || GOT[r].value == 0) && (typeof a == \"function\" ? GOT[r].value = addFunction(a) : typeof a == \"number\" ? GOT[r].value = a : err(`unhandled export type for '${r}': ${typeof a}`));\n          }\n        },\n        relocateExports = (e, t, r) => {\n          var a = {};\n          for (var o in e) {\n            var s = e[o];\n            typeof s == \"object\" && (s = s.value), typeof s == \"number\" && (s += t), a[o] = s;\n          }\n          return updateGOT(a, r), a;\n        },\n        isSymbolDefined = e => {\n          var t = wasmImports[e];\n          return !(!t || t.stub);\n        },\n        dynCall = (e, t, r = []) => {\n          var a = getWasmTableEntry(t)(...r);\n          return a;\n        },\n        stackSave = () => _emscripten_stack_get_current(),\n        stackRestore = e => __emscripten_stack_restore(e),\n        createInvokeFunction = e => (t, ...r) => {\n          var a = stackSave();\n          try {\n            return dynCall(e, t, r);\n          } catch (o) {\n            if (stackRestore(a), o !== o + 0) throw o;\n            if (_setThrew(1, 0), e[0] == \"j\") return 0n;\n          }\n        },\n        resolveGlobalSymbol = (e, t = !1) => {\n          var r;\n          return isSymbolDefined(e) ? r = wasmImports[e] : e.startsWith(\"invoke_\") && (r = wasmImports[e] = createInvokeFunction(e.split(\"_\")[1])), {\n            sym: r,\n            name: e\n          };\n        },\n        UTF8ToString = (e, t) => e ? UTF8ArrayToString(HEAPU8, e, t) : \"\",\n        loadWebAssemblyModule = (binary, flags, libName, localScope, handle) => {\n          var metadata = getDylinkMetadata(binary);\n          currentModuleWeakSymbols = metadata.weakImports;\n          function loadModule() {\n            var firstLoad = !handle || !HEAP8[handle + 8];\n            if (firstLoad) {\n              var memAlign = Math.pow(2, metadata.memoryAlign),\n                memoryBase = metadata.memorySize ? alignMemory(getMemory(metadata.memorySize + memAlign), memAlign) : 0,\n                tableBase = metadata.tableSize ? wasmTable.length : 0;\n              handle && (HEAP8[handle + 8] = 1, HEAPU32[handle + 12 >> 2] = memoryBase, HEAP32[handle + 16 >> 2] = metadata.memorySize, HEAPU32[handle + 20 >> 2] = tableBase, HEAP32[handle + 24 >> 2] = metadata.tableSize);\n            } else memoryBase = HEAPU32[handle + 12 >> 2], tableBase = HEAPU32[handle + 20 >> 2];\n            var tableGrowthNeeded = tableBase + metadata.tableSize - wasmTable.length;\n            tableGrowthNeeded > 0 && wasmTable.grow(tableGrowthNeeded);\n            var moduleExports;\n            function resolveSymbol(e) {\n              var t = resolveGlobalSymbol(e).sym;\n              return !t && localScope && (t = localScope[e]), t || (t = moduleExports[e]), t;\n            }\n            var proxyHandler = {\n                get(e, t) {\n                  switch (t) {\n                    case \"__memory_base\":\n                      return memoryBase;\n                    case \"__table_base\":\n                      return tableBase;\n                  }\n                  if (t in wasmImports && !wasmImports[t].stub) return wasmImports[t];\n                  if (!(t in e)) {\n                    var r;\n                    e[t] = (...a) => (r || (r = resolveSymbol(t)), r(...a));\n                  }\n                  return e[t];\n                }\n              },\n              proxy = new Proxy({}, proxyHandler),\n              info = {\n                \"GOT.mem\": new Proxy({}, GOTHandler),\n                \"GOT.func\": new Proxy({}, GOTHandler),\n                env: proxy,\n                wasi_snapshot_preview1: proxy\n              };\n            function postInstantiation(module, instance) {\n              updateTableMap(tableBase, metadata.tableSize), moduleExports = relocateExports(instance.exports, memoryBase), flags.allowUndefined || reportUndefinedSymbols();\n              function addEmAsm(addr, body) {\n                for (var args = [], arity = 0; arity < 16 && body.indexOf(\"$\" + arity) != -1; arity++) args.push(\"$\" + arity);\n                args = args.join(\",\");\n                var func = `(${args}) => { ${body} };`;\n                ASM_CONSTS[start] = eval(func);\n              }\n              if (\"__start_em_asm\" in moduleExports) for (var start = moduleExports.__start_em_asm, stop = moduleExports.__stop_em_asm; start < stop;) {\n                var jsString = UTF8ToString(start);\n                addEmAsm(start, jsString), start = HEAPU8.indexOf(0, start) + 1;\n              }\n              function addEmJs(name, cSig, body) {\n                var jsArgs = [];\n                if (cSig = cSig.slice(1, -1), cSig != \"void\") {\n                  cSig = cSig.split(\",\");\n                  for (var i in cSig) {\n                    var jsArg = cSig[i].split(\" \").pop();\n                    jsArgs.push(jsArg.replaceAll(\"*\", \"\"));\n                  }\n                }\n                var func = `(${jsArgs}) => ${body};`;\n                moduleExports[name] = eval(func);\n              }\n              for (var name in moduleExports) if (name.startsWith(\"__em_js__\")) {\n                var start = moduleExports[name],\n                  jsString = UTF8ToString(start),\n                  parts = jsString.split(\"<::>\");\n                addEmJs(name.replace(\"__em_js__\", \"\"), parts[0], parts[1]), delete moduleExports[name];\n              }\n              var applyRelocs = moduleExports.__wasm_apply_data_relocs;\n              applyRelocs && (runtimeInitialized ? applyRelocs() : __RELOC_FUNCS__.push(applyRelocs));\n              var init = moduleExports.__wasm_call_ctors;\n              return init && (runtimeInitialized ? init() : __ATINIT__.push(init)), moduleExports;\n            }\n            if (flags.loadAsync) {\n              if (binary instanceof WebAssembly.Module) {\n                var instance = new WebAssembly.Instance(binary, info);\n                return Promise.resolve(postInstantiation(binary, instance));\n              }\n              return WebAssembly.instantiate(binary, info).then(e => postInstantiation(e.module, e.instance));\n            }\n            var module = binary instanceof WebAssembly.Module ? binary : new WebAssembly.Module(binary),\n              instance = new WebAssembly.Instance(module, info);\n            return postInstantiation(module, instance);\n          }\n          return flags.loadAsync ? metadata.neededDynlibs.reduce((e, t) => e.then(() => loadDynamicLibrary(t, flags, localScope)), Promise.resolve()).then(loadModule) : (metadata.neededDynlibs.forEach(e => loadDynamicLibrary(e, flags, localScope)), loadModule());\n        },\n        mergeLibSymbols = (e, t) => {\n          for (var [r, a] of Object.entries(e)) {\n            let o = l => {\n              isSymbolDefined(l) || (wasmImports[l] = a);\n            };\n            o(r);\n            let s = \"__main_argc_argv\";\n            r == \"main\" && o(s), r == s && o(\"main\");\n          }\n        },\n        asyncLoad = async e => {\n          var t = await readAsync(e);\n          return new Uint8Array(t);\n        },\n        preloadPlugins = Module.preloadPlugins || [],\n        registerWasmPlugin = () => {\n          var e = {\n            promiseChainEnd: Promise.resolve(),\n            canHandle: t => !Module.noWasmDecoding && t.endsWith(\".so\"),\n            handle: (t, r, a, o) => {\n              e.promiseChainEnd = e.promiseChainEnd.then(() => loadWebAssemblyModule(t, {\n                loadAsync: !0,\n                nodelete: !0\n              }, r, {})).then(s => {\n                preloadedWasm[r] = s, a(t);\n              }, s => {\n                err(`failed to instantiate wasm: ${r}: ${s}`), o();\n              });\n            }\n          };\n          preloadPlugins.push(e);\n        },\n        preloadedWasm = {};\n      function loadDynamicLibrary(e, t = {\n        global: !0,\n        nodelete: !0\n      }, r, a) {\n        var o = LDSO.loadedLibsByName[e];\n        if (o) return t.global ? o.global || (o.global = !0, mergeLibSymbols(o.exports, e)) : r && Object.assign(r, o.exports), t.nodelete && o.refcount !== 1 / 0 && (o.refcount = 1 / 0), o.refcount++, a && (LDSO.loadedLibsByHandle[a] = o), t.loadAsync ? Promise.resolve(!0) : !0;\n        o = newDSO(e, a, \"loading\"), o.refcount = t.nodelete ? 1 / 0 : 1, o.global = t.global;\n        function s() {\n          if (a) {\n            var _ = HEAPU32[a + 28 >> 2],\n              m = HEAPU32[a + 32 >> 2];\n            if (_ && m) {\n              var p = HEAP8.slice(_, _ + m);\n              return t.loadAsync ? Promise.resolve(p) : p;\n            }\n          }\n          var d = locateFile(e);\n          if (t.loadAsync) return asyncLoad(d);\n          if (!readBinary) throw new Error(`${d}: file not found, and synchronous loading of external files is not available`);\n          return readBinary(d);\n        }\n        function l() {\n          var _ = preloadedWasm[e];\n          return _ ? t.loadAsync ? Promise.resolve(_) : _ : t.loadAsync ? s().then(m => loadWebAssemblyModule(m, t, e, r, a)) : loadWebAssemblyModule(s(), t, e, r, a);\n        }\n        function n(_) {\n          o.global ? mergeLibSymbols(_, e) : r && Object.assign(r, _), o.exports = _;\n        }\n        return t.loadAsync ? l().then(_ => (n(_), !0)) : (n(l()), !0);\n      }\n      var reportUndefinedSymbols = () => {\n          for (var [e, t] of Object.entries(GOT)) if (t.value == 0) {\n            var r = resolveGlobalSymbol(e, !0).sym;\n            if (!r && !t.required) continue;\n            if (typeof r == \"function\") t.value = addFunction(r, r.sig);else if (typeof r == \"number\") t.value = r;else throw new Error(`bad export type for '${e}': ${typeof r}`);\n          }\n        },\n        loadDylibs = () => {\n          if (!dynamicLibraries.length) {\n            reportUndefinedSymbols();\n            return;\n          }\n          addRunDependency(\"loadDylibs\"), dynamicLibraries.reduce((e, t) => e.then(() => loadDynamicLibrary(t, {\n            loadAsync: !0,\n            global: !0,\n            nodelete: !0,\n            allowUndefined: !0\n          })), Promise.resolve()).then(() => {\n            reportUndefinedSymbols(), removeRunDependency(\"loadDylibs\");\n          });\n        },\n        noExitRuntime = Module.noExitRuntime || !0;\n      function setValue(e, t, r = \"i8\") {\n        switch (r.endsWith(\"*\") && (r = \"*\"), r) {\n          case \"i1\":\n            HEAP8[e] = t;\n            break;\n          case \"i8\":\n            HEAP8[e] = t;\n            break;\n          case \"i16\":\n            HEAP16[e >> 1] = t;\n            break;\n          case \"i32\":\n            HEAP32[e >> 2] = t;\n            break;\n          case \"i64\":\n            HEAP64[e >> 3] = BigInt(t);\n            break;\n          case \"float\":\n            HEAPF32[e >> 2] = t;\n            break;\n          case \"double\":\n            HEAPF64[e >> 3] = t;\n            break;\n          case \"*\":\n            HEAPU32[e >> 2] = t;\n            break;\n          default:\n            abort(`invalid type for setValue: ${r}`);\n        }\n      }\n      var ___assert_fail = (e, t, r, a) => abort(`Assertion failed: ${UTF8ToString(e)}, at: ` + [t ? UTF8ToString(t) : \"unknown filename\", r, a ? UTF8ToString(a) : \"unknown function\"]);\n      ___assert_fail.sig = \"vppip\";\n      var ___call_sighandler = (e, t) => getWasmTableEntry(e)(t);\n      ___call_sighandler.sig = \"vpi\";\n      var ___memory_base = new WebAssembly.Global({\n          value: \"i32\",\n          mutable: !1\n        }, 16777216),\n        ___stack_pointer = new WebAssembly.Global({\n          value: \"i32\",\n          mutable: !0\n        }, 23144432),\n        PATH = {\n          isAbs: e => e.charAt(0) === \"/\",\n          splitPath: e => {\n            var t = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n            return t.exec(e).slice(1);\n          },\n          normalizeArray: (e, t) => {\n            for (var r = 0, a = e.length - 1; a >= 0; a--) {\n              var o = e[a];\n              o === \".\" ? e.splice(a, 1) : o === \"..\" ? (e.splice(a, 1), r++) : r && (e.splice(a, 1), r--);\n            }\n            if (t) for (; r; r--) e.unshift(\"..\");\n            return e;\n          },\n          normalize: e => {\n            var t = PATH.isAbs(e),\n              r = e.substr(-1) === \"/\";\n            return e = PATH.normalizeArray(e.split(\"/\").filter(a => !!a), !t).join(\"/\"), !e && !t && (e = \".\"), e && r && (e += \"/\"), (t ? \"/\" : \"\") + e;\n          },\n          dirname: e => {\n            var t = PATH.splitPath(e),\n              r = t[0],\n              a = t[1];\n            return !r && !a ? \".\" : (a && (a = a.substr(0, a.length - 1)), r + a);\n          },\n          basename: e => {\n            if (e === \"/\") return \"/\";\n            e = PATH.normalize(e), e = e.replace(/\\/$/, \"\");\n            var t = e.lastIndexOf(\"/\");\n            return t === -1 ? e : e.substr(t + 1);\n          },\n          join: (...e) => PATH.normalize(e.join(\"/\")),\n          join2: (e, t) => PATH.normalize(e + \"/\" + t)\n        },\n        initRandomFill = () => {\n          if (typeof crypto == \"object\" && typeof crypto.getRandomValues == \"function\") return a => crypto.getRandomValues(a);\n          if (ENVIRONMENT_IS_NODE) try {\n            var e = require(\"crypto\"),\n              t = e.randomFillSync;\n            if (t) return a => e.randomFillSync(a);\n            var r = e.randomBytes;\n            return a => (a.set(r(a.byteLength)), a);\n          } catch {}\n          abort(\"initRandomDevice\");\n        },\n        randomFill = e => (randomFill = initRandomFill())(e),\n        PATH_FS = {\n          resolve: (...e) => {\n            for (var t = \"\", r = !1, a = e.length - 1; a >= -1 && !r; a--) {\n              var o = a >= 0 ? e[a] : FS.cwd();\n              if (typeof o != \"string\") throw new TypeError(\"Arguments to path.resolve must be strings\");\n              if (!o) return \"\";\n              t = o + \"/\" + t, r = PATH.isAbs(o);\n            }\n            return t = PATH.normalizeArray(t.split(\"/\").filter(s => !!s), !r).join(\"/\"), (r ? \"/\" : \"\") + t || \".\";\n          },\n          relative: (e, t) => {\n            e = PATH_FS.resolve(e).substr(1), t = PATH_FS.resolve(t).substr(1);\n            function r(m) {\n              for (var p = 0; p < m.length && m[p] === \"\"; p++);\n              for (var d = m.length - 1; d >= 0 && m[d] === \"\"; d--);\n              return p > d ? [] : m.slice(p, d - p + 1);\n            }\n            for (var a = r(e.split(\"/\")), o = r(t.split(\"/\")), s = Math.min(a.length, o.length), l = s, n = 0; n < s; n++) if (a[n] !== o[n]) {\n              l = n;\n              break;\n            }\n            for (var _ = [], n = l; n < a.length; n++) _.push(\"..\");\n            return _ = _.concat(o.slice(l)), _.join(\"/\");\n          }\n        },\n        FS_stdin_getChar_buffer = [],\n        lengthBytesUTF8 = e => {\n          for (var t = 0, r = 0; r < e.length; ++r) {\n            var a = e.charCodeAt(r);\n            a <= 127 ? t++ : a <= 2047 ? t += 2 : a >= 55296 && a <= 57343 ? (t += 4, ++r) : t += 3;\n          }\n          return t;\n        },\n        stringToUTF8Array = (e, t, r, a) => {\n          if (!(a > 0)) return 0;\n          for (var o = r, s = r + a - 1, l = 0; l < e.length; ++l) {\n            var n = e.charCodeAt(l);\n            if (n >= 55296 && n <= 57343) {\n              var _ = e.charCodeAt(++l);\n              n = 65536 + ((n & 1023) << 10) | _ & 1023;\n            }\n            if (n <= 127) {\n              if (r >= s) break;\n              t[r++] = n;\n            } else if (n <= 2047) {\n              if (r + 1 >= s) break;\n              t[r++] = 192 | n >> 6, t[r++] = 128 | n & 63;\n            } else if (n <= 65535) {\n              if (r + 2 >= s) break;\n              t[r++] = 224 | n >> 12, t[r++] = 128 | n >> 6 & 63, t[r++] = 128 | n & 63;\n            } else {\n              if (r + 3 >= s) break;\n              t[r++] = 240 | n >> 18, t[r++] = 128 | n >> 12 & 63, t[r++] = 128 | n >> 6 & 63, t[r++] = 128 | n & 63;\n            }\n          }\n          return t[r] = 0, r - o;\n        };\n      function intArrayFromString(e, t, r) {\n        var a = r > 0 ? r : lengthBytesUTF8(e) + 1,\n          o = new Array(a),\n          s = stringToUTF8Array(e, o, 0, o.length);\n        return t && (o.length = s), o;\n      }\n      var FS_stdin_getChar = () => {\n          if (!FS_stdin_getChar_buffer.length) {\n            var e = null;\n            if (ENVIRONMENT_IS_NODE) {\n              var t = 256,\n                r = Buffer.alloc(t),\n                a = 0,\n                o = process.stdin.fd;\n              try {\n                a = fs.readSync(o, r, 0, t);\n              } catch (s) {\n                if (s.toString().includes(\"EOF\")) a = 0;else throw s;\n              }\n              a > 0 && (e = r.slice(0, a).toString(\"utf-8\"));\n            } else typeof window < \"u\" && typeof window.prompt == \"function\" && (e = window.prompt(\"Input: \"), e !== null && (e += `\n`));\n            if (!e) return null;\n            FS_stdin_getChar_buffer = intArrayFromString(e, !0);\n          }\n          return FS_stdin_getChar_buffer.shift();\n        },\n        TTY = {\n          ttys: [],\n          init() {},\n          shutdown() {},\n          register(e, t) {\n            TTY.ttys[e] = {\n              input: [],\n              output: [],\n              ops: t\n            }, FS.registerDevice(e, TTY.stream_ops);\n          },\n          stream_ops: {\n            open(e) {\n              var t = TTY.ttys[e.node.rdev];\n              if (!t) throw new FS.ErrnoError(43);\n              e.tty = t, e.seekable = !1;\n            },\n            close(e) {\n              e.tty.ops.fsync(e.tty);\n            },\n            fsync(e) {\n              e.tty.ops.fsync(e.tty);\n            },\n            read(e, t, r, a, o) {\n              if (!e.tty || !e.tty.ops.get_char) throw new FS.ErrnoError(60);\n              for (var s = 0, l = 0; l < a; l++) {\n                var n;\n                try {\n                  n = e.tty.ops.get_char(e.tty);\n                } catch {\n                  throw new FS.ErrnoError(29);\n                }\n                if (n === void 0 && s === 0) throw new FS.ErrnoError(6);\n                if (n == null) break;\n                s++, t[r + l] = n;\n              }\n              return s && (e.node.atime = Date.now()), s;\n            },\n            write(e, t, r, a, o) {\n              if (!e.tty || !e.tty.ops.put_char) throw new FS.ErrnoError(60);\n              try {\n                for (var s = 0; s < a; s++) e.tty.ops.put_char(e.tty, t[r + s]);\n              } catch {\n                throw new FS.ErrnoError(29);\n              }\n              return a && (e.node.mtime = e.node.ctime = Date.now()), s;\n            }\n          },\n          default_tty_ops: {\n            get_char(e) {\n              return FS_stdin_getChar();\n            },\n            put_char(e, t) {\n              t === null || t === 10 ? (out(UTF8ArrayToString(e.output)), e.output = []) : t != 0 && e.output.push(t);\n            },\n            fsync(e) {\n              e.output && e.output.length > 0 && (out(UTF8ArrayToString(e.output)), e.output = []);\n            },\n            ioctl_tcgets(e) {\n              return {\n                c_iflag: 25856,\n                c_oflag: 5,\n                c_cflag: 191,\n                c_lflag: 35387,\n                c_cc: [3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n              };\n            },\n            ioctl_tcsets(e, t, r) {\n              return 0;\n            },\n            ioctl_tiocgwinsz(e) {\n              return [24, 80];\n            }\n          },\n          default_tty1_ops: {\n            put_char(e, t) {\n              t === null || t === 10 ? (err(UTF8ArrayToString(e.output)), e.output = []) : t != 0 && e.output.push(t);\n            },\n            fsync(e) {\n              e.output && e.output.length > 0 && (err(UTF8ArrayToString(e.output)), e.output = []);\n            }\n          }\n        },\n        zeroMemory = (e, t) => {\n          HEAPU8.fill(0, e, e + t);\n        },\n        mmapAlloc = e => {\n          e = alignMemory(e, 65536);\n          var t = _emscripten_builtin_memalign(65536, e);\n          return t && zeroMemory(t, e), t;\n        },\n        MEMFS = {\n          ops_table: null,\n          mount(e) {\n            return MEMFS.createNode(null, \"/\", 16895, 0);\n          },\n          createNode(e, t, r, a) {\n            if (FS.isBlkdev(r) || FS.isFIFO(r)) throw new FS.ErrnoError(63);\n            MEMFS.ops_table || (MEMFS.ops_table = {\n              dir: {\n                node: {\n                  getattr: MEMFS.node_ops.getattr,\n                  setattr: MEMFS.node_ops.setattr,\n                  lookup: MEMFS.node_ops.lookup,\n                  mknod: MEMFS.node_ops.mknod,\n                  rename: MEMFS.node_ops.rename,\n                  unlink: MEMFS.node_ops.unlink,\n                  rmdir: MEMFS.node_ops.rmdir,\n                  readdir: MEMFS.node_ops.readdir,\n                  symlink: MEMFS.node_ops.symlink\n                },\n                stream: {\n                  llseek: MEMFS.stream_ops.llseek\n                }\n              },\n              file: {\n                node: {\n                  getattr: MEMFS.node_ops.getattr,\n                  setattr: MEMFS.node_ops.setattr\n                },\n                stream: {\n                  llseek: MEMFS.stream_ops.llseek,\n                  read: MEMFS.stream_ops.read,\n                  write: MEMFS.stream_ops.write,\n                  allocate: MEMFS.stream_ops.allocate,\n                  mmap: MEMFS.stream_ops.mmap,\n                  msync: MEMFS.stream_ops.msync\n                }\n              },\n              link: {\n                node: {\n                  getattr: MEMFS.node_ops.getattr,\n                  setattr: MEMFS.node_ops.setattr,\n                  readlink: MEMFS.node_ops.readlink\n                },\n                stream: {}\n              },\n              chrdev: {\n                node: {\n                  getattr: MEMFS.node_ops.getattr,\n                  setattr: MEMFS.node_ops.setattr\n                },\n                stream: FS.chrdev_stream_ops\n              }\n            });\n            var o = FS.createNode(e, t, r, a);\n            return FS.isDir(o.mode) ? (o.node_ops = MEMFS.ops_table.dir.node, o.stream_ops = MEMFS.ops_table.dir.stream, o.contents = {}) : FS.isFile(o.mode) ? (o.node_ops = MEMFS.ops_table.file.node, o.stream_ops = MEMFS.ops_table.file.stream, o.usedBytes = 0, o.contents = null) : FS.isLink(o.mode) ? (o.node_ops = MEMFS.ops_table.link.node, o.stream_ops = MEMFS.ops_table.link.stream) : FS.isChrdev(o.mode) && (o.node_ops = MEMFS.ops_table.chrdev.node, o.stream_ops = MEMFS.ops_table.chrdev.stream), o.atime = o.mtime = o.ctime = Date.now(), e && (e.contents[t] = o, e.atime = e.mtime = e.ctime = o.atime), o;\n          },\n          getFileDataAsTypedArray(e) {\n            return e.contents ? e.contents.subarray ? e.contents.subarray(0, e.usedBytes) : new Uint8Array(e.contents) : new Uint8Array(0);\n          },\n          expandFileStorage(e, t) {\n            var r = e.contents ? e.contents.length : 0;\n            if (!(r >= t)) {\n              var a = 1024 * 1024;\n              t = Math.max(t, r * (r < a ? 2 : 1.125) >>> 0), r != 0 && (t = Math.max(t, 256));\n              var o = e.contents;\n              e.contents = new Uint8Array(t), e.usedBytes > 0 && e.contents.set(o.subarray(0, e.usedBytes), 0);\n            }\n          },\n          resizeFileStorage(e, t) {\n            if (e.usedBytes != t) if (t == 0) e.contents = null, e.usedBytes = 0;else {\n              var r = e.contents;\n              e.contents = new Uint8Array(t), r && e.contents.set(r.subarray(0, Math.min(t, e.usedBytes))), e.usedBytes = t;\n            }\n          },\n          node_ops: {\n            getattr(e) {\n              var t = {};\n              return t.dev = FS.isChrdev(e.mode) ? e.id : 1, t.ino = e.id, t.mode = e.mode, t.nlink = 1, t.uid = 0, t.gid = 0, t.rdev = e.rdev, FS.isDir(e.mode) ? t.size = 4096 : FS.isFile(e.mode) ? t.size = e.usedBytes : FS.isLink(e.mode) ? t.size = e.link.length : t.size = 0, t.atime = new Date(e.atime), t.mtime = new Date(e.mtime), t.ctime = new Date(e.ctime), t.blksize = 4096, t.blocks = Math.ceil(t.size / t.blksize), t;\n            },\n            setattr(e, t) {\n              for (let r of [\"mode\", \"atime\", \"mtime\", \"ctime\"]) t[r] && (e[r] = t[r]);\n              t.size !== void 0 && MEMFS.resizeFileStorage(e, t.size);\n            },\n            lookup(e, t) {\n              throw MEMFS.doesNotExistError;\n            },\n            mknod(e, t, r, a) {\n              return MEMFS.createNode(e, t, r, a);\n            },\n            rename(e, t, r) {\n              var a;\n              try {\n                a = FS.lookupNode(t, r);\n              } catch {}\n              if (a) {\n                if (FS.isDir(e.mode)) for (var o in a.contents) throw new FS.ErrnoError(55);\n                FS.hashRemoveNode(a);\n              }\n              delete e.parent.contents[e.name], t.contents[r] = e, e.name = r, t.ctime = t.mtime = e.parent.ctime = e.parent.mtime = Date.now();\n            },\n            unlink(e, t) {\n              delete e.contents[t], e.ctime = e.mtime = Date.now();\n            },\n            rmdir(e, t) {\n              var r = FS.lookupNode(e, t);\n              for (var a in r.contents) throw new FS.ErrnoError(55);\n              delete e.contents[t], e.ctime = e.mtime = Date.now();\n            },\n            readdir(e) {\n              return [\".\", \"..\", ...Object.keys(e.contents)];\n            },\n            symlink(e, t, r) {\n              var a = MEMFS.createNode(e, t, 41471, 0);\n              return a.link = r, a;\n            },\n            readlink(e) {\n              if (!FS.isLink(e.mode)) throw new FS.ErrnoError(28);\n              return e.link;\n            }\n          },\n          stream_ops: {\n            read(e, t, r, a, o) {\n              var s = e.node.contents;\n              if (o >= e.node.usedBytes) return 0;\n              var l = Math.min(e.node.usedBytes - o, a);\n              if (l > 8 && s.subarray) t.set(s.subarray(o, o + l), r);else for (var n = 0; n < l; n++) t[r + n] = s[o + n];\n              return l;\n            },\n            write(e, t, r, a, o, s) {\n              if (t.buffer === HEAP8.buffer && (s = !1), !a) return 0;\n              var l = e.node;\n              if (l.mtime = l.ctime = Date.now(), t.subarray && (!l.contents || l.contents.subarray)) {\n                if (s) return l.contents = t.subarray(r, r + a), l.usedBytes = a, a;\n                if (l.usedBytes === 0 && o === 0) return l.contents = t.slice(r, r + a), l.usedBytes = a, a;\n                if (o + a <= l.usedBytes) return l.contents.set(t.subarray(r, r + a), o), a;\n              }\n              if (MEMFS.expandFileStorage(l, o + a), l.contents.subarray && t.subarray) l.contents.set(t.subarray(r, r + a), o);else for (var n = 0; n < a; n++) l.contents[o + n] = t[r + n];\n              return l.usedBytes = Math.max(l.usedBytes, o + a), a;\n            },\n            llseek(e, t, r) {\n              var a = t;\n              if (r === 1 ? a += e.position : r === 2 && FS.isFile(e.node.mode) && (a += e.node.usedBytes), a < 0) throw new FS.ErrnoError(28);\n              return a;\n            },\n            allocate(e, t, r) {\n              MEMFS.expandFileStorage(e.node, t + r), e.node.usedBytes = Math.max(e.node.usedBytes, t + r);\n            },\n            mmap(e, t, r, a, o) {\n              if (!FS.isFile(e.node.mode)) throw new FS.ErrnoError(43);\n              var s,\n                l,\n                n = e.node.contents;\n              if (!(o & 2) && n && n.buffer === HEAP8.buffer) l = !1, s = n.byteOffset;else {\n                if (l = !0, s = mmapAlloc(t), !s) throw new FS.ErrnoError(48);\n                n && ((r > 0 || r + t < n.length) && (n.subarray ? n = n.subarray(r, r + t) : n = Array.prototype.slice.call(n, r, r + t)), HEAP8.set(n, s));\n              }\n              return {\n                ptr: s,\n                allocated: l\n              };\n            },\n            msync(e, t, r, a, o) {\n              return MEMFS.stream_ops.write(e, t, 0, a, r, !1), 0;\n            }\n          }\n        },\n        FS_createDataFile = (e, t, r, a, o, s) => {\n          FS.createDataFile(e, t, r, a, o, s);\n        },\n        FS_handledByPreloadPlugin = (e, t, r, a) => {\n          typeof Browser < \"u\" && Browser.init();\n          var o = !1;\n          return preloadPlugins.forEach(s => {\n            o || s.canHandle(t) && (s.handle(e, t, r, a), o = !0);\n          }), o;\n        },\n        FS_createPreloadedFile = (e, t, r, a, o, s, l, n, _, m) => {\n          var p = t ? PATH_FS.resolve(PATH.join2(e, t)) : e,\n            d = `cp ${p}`;\n          function g(c) {\n            function f(u) {\n              m?.(), n || FS_createDataFile(e, t, u, a, o, _), s?.(), removeRunDependency(d);\n            }\n            FS_handledByPreloadPlugin(c, p, f, () => {\n              l?.(), removeRunDependency(d);\n            }) || f(c);\n          }\n          addRunDependency(d), typeof r == \"string\" ? asyncLoad(r).then(g, l) : g(r);\n        },\n        FS_modeStringToFlags = e => {\n          var t = {\n              r: 0,\n              \"r+\": 2,\n              w: 577,\n              \"w+\": 578,\n              a: 1089,\n              \"a+\": 1090\n            },\n            r = t[e];\n          if (typeof r > \"u\") throw new Error(`Unknown file open mode: ${e}`);\n          return r;\n        },\n        FS_getMode = (e, t) => {\n          var r = 0;\n          return e && (r |= 365), t && (r |= 146), r;\n        },\n        IDBFS = {\n          dbs: {},\n          indexedDB: () => {\n            if (typeof indexedDB < \"u\") return indexedDB;\n            var e = null;\n            return typeof window == \"object\" && (e = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB), e;\n          },\n          DB_VERSION: 21,\n          DB_STORE_NAME: \"FILE_DATA\",\n          queuePersist: e => {\n            function t() {\n              e.idbPersistState === \"again\" ? r() : e.idbPersistState = 0;\n            }\n            function r() {\n              e.idbPersistState = \"idb\", IDBFS.syncfs(e, !1, t);\n            }\n            e.idbPersistState ? e.idbPersistState === \"idb\" && (e.idbPersistState = \"again\") : e.idbPersistState = setTimeout(r, 0);\n          },\n          mount: e => {\n            var t = MEMFS.mount(e);\n            if (e?.opts?.autoPersist) {\n              t.idbPersistState = 0;\n              var r = t.node_ops;\n              t.node_ops = Object.assign({}, t.node_ops), t.node_ops.mknod = (a, o, s, l) => {\n                var n = r.mknod(a, o, s, l);\n                return n.node_ops = t.node_ops, n.idbfs_mount = t.mount, n.memfs_stream_ops = n.stream_ops, n.stream_ops = Object.assign({}, n.stream_ops), n.stream_ops.write = (_, m, p, d, g, c) => (_.node.isModified = !0, n.memfs_stream_ops.write(_, m, p, d, g, c)), n.stream_ops.close = _ => {\n                  var m = _.node;\n                  if (m.isModified && (IDBFS.queuePersist(m.idbfs_mount), m.isModified = !1), m.memfs_stream_ops.close) return m.memfs_stream_ops.close(_);\n                }, n;\n              }, t.node_ops.mkdir = (...a) => (IDBFS.queuePersist(t.mount), r.mkdir(...a)), t.node_ops.rmdir = (...a) => (IDBFS.queuePersist(t.mount), r.rmdir(...a)), t.node_ops.symlink = (...a) => (IDBFS.queuePersist(t.mount), r.symlink(...a)), t.node_ops.unlink = (...a) => (IDBFS.queuePersist(t.mount), r.unlink(...a)), t.node_ops.rename = (...a) => (IDBFS.queuePersist(t.mount), r.rename(...a));\n            }\n            return t;\n          },\n          syncfs: (e, t, r) => {\n            IDBFS.getLocalSet(e, (a, o) => {\n              if (a) return r(a);\n              IDBFS.getRemoteSet(e, (s, l) => {\n                if (s) return r(s);\n                var n = t ? l : o,\n                  _ = t ? o : l;\n                IDBFS.reconcile(n, _, r);\n              });\n            });\n          },\n          quit: () => {\n            Object.values(IDBFS.dbs).forEach(e => e.close()), IDBFS.dbs = {};\n          },\n          getDB: (e, t) => {\n            var r = IDBFS.dbs[e];\n            if (r) return t(null, r);\n            var a;\n            try {\n              a = IDBFS.indexedDB().open(e, IDBFS.DB_VERSION);\n            } catch (o) {\n              return t(o);\n            }\n            if (!a) return t(\"Unable to connect to IndexedDB\");\n            a.onupgradeneeded = o => {\n              var s = o.target.result,\n                l = o.target.transaction,\n                n;\n              s.objectStoreNames.contains(IDBFS.DB_STORE_NAME) ? n = l.objectStore(IDBFS.DB_STORE_NAME) : n = s.createObjectStore(IDBFS.DB_STORE_NAME), n.indexNames.contains(\"timestamp\") || n.createIndex(\"timestamp\", \"timestamp\", {\n                unique: !1\n              });\n            }, a.onsuccess = () => {\n              r = a.result, IDBFS.dbs[e] = r, t(null, r);\n            }, a.onerror = o => {\n              t(o.target.error), o.preventDefault();\n            };\n          },\n          getLocalSet: (e, t) => {\n            var r = {};\n            function a(_) {\n              return _ !== \".\" && _ !== \"..\";\n            }\n            function o(_) {\n              return m => PATH.join2(_, m);\n            }\n            for (var s = FS.readdir(e.mountpoint).filter(a).map(o(e.mountpoint)); s.length;) {\n              var l = s.pop(),\n                n;\n              try {\n                n = FS.stat(l);\n              } catch (_) {\n                return t(_);\n              }\n              FS.isDir(n.mode) && s.push(...FS.readdir(l).filter(a).map(o(l))), r[l] = {\n                timestamp: n.mtime\n              };\n            }\n            return t(null, {\n              type: \"local\",\n              entries: r\n            });\n          },\n          getRemoteSet: (e, t) => {\n            var r = {};\n            IDBFS.getDB(e.mountpoint, (a, o) => {\n              if (a) return t(a);\n              try {\n                var s = o.transaction([IDBFS.DB_STORE_NAME], \"readonly\");\n                s.onerror = _ => {\n                  t(_.target.error), _.preventDefault();\n                };\n                var l = s.objectStore(IDBFS.DB_STORE_NAME),\n                  n = l.index(\"timestamp\");\n                n.openKeyCursor().onsuccess = _ => {\n                  var m = _.target.result;\n                  if (!m) return t(null, {\n                    type: \"remote\",\n                    db: o,\n                    entries: r\n                  });\n                  r[m.primaryKey] = {\n                    timestamp: m.key\n                  }, m.continue();\n                };\n              } catch (_) {\n                return t(_);\n              }\n            });\n          },\n          loadLocalEntry: (e, t) => {\n            var r, a;\n            try {\n              var o = FS.lookupPath(e);\n              a = o.node, r = FS.stat(e);\n            } catch (s) {\n              return t(s);\n            }\n            return FS.isDir(r.mode) ? t(null, {\n              timestamp: r.mtime,\n              mode: r.mode\n            }) : FS.isFile(r.mode) ? (a.contents = MEMFS.getFileDataAsTypedArray(a), t(null, {\n              timestamp: r.mtime,\n              mode: r.mode,\n              contents: a.contents\n            })) : t(new Error(\"node type not supported\"));\n          },\n          storeLocalEntry: (e, t, r) => {\n            try {\n              if (FS.isDir(t.mode)) FS.mkdirTree(e, t.mode);else if (FS.isFile(t.mode)) FS.writeFile(e, t.contents, {\n                canOwn: !0\n              });else return r(new Error(\"node type not supported\"));\n              FS.chmod(e, t.mode), FS.utime(e, t.timestamp, t.timestamp);\n            } catch (a) {\n              return r(a);\n            }\n            r(null);\n          },\n          removeLocalEntry: (e, t) => {\n            try {\n              var r = FS.stat(e);\n              FS.isDir(r.mode) ? FS.rmdir(e) : FS.isFile(r.mode) && FS.unlink(e);\n            } catch (a) {\n              return t(a);\n            }\n            t(null);\n          },\n          loadRemoteEntry: (e, t, r) => {\n            var a = e.get(t);\n            a.onsuccess = o => r(null, o.target.result), a.onerror = o => {\n              r(o.target.error), o.preventDefault();\n            };\n          },\n          storeRemoteEntry: (e, t, r, a) => {\n            try {\n              var o = e.put(r, t);\n            } catch (s) {\n              a(s);\n              return;\n            }\n            o.onsuccess = s => a(), o.onerror = s => {\n              a(s.target.error), s.preventDefault();\n            };\n          },\n          removeRemoteEntry: (e, t, r) => {\n            var a = e.delete(t);\n            a.onsuccess = o => r(), a.onerror = o => {\n              r(o.target.error), o.preventDefault();\n            };\n          },\n          reconcile: (e, t, r) => {\n            var a = 0,\n              o = [];\n            Object.keys(e.entries).forEach(d => {\n              var g = e.entries[d],\n                c = t.entries[d];\n              (!c || g.timestamp.getTime() != c.timestamp.getTime()) && (o.push(d), a++);\n            });\n            var s = [];\n            if (Object.keys(t.entries).forEach(d => {\n              e.entries[d] || (s.push(d), a++);\n            }), !a) return r(null);\n            var l = !1,\n              n = e.type === \"remote\" ? e.db : t.db,\n              _ = n.transaction([IDBFS.DB_STORE_NAME], \"readwrite\"),\n              m = _.objectStore(IDBFS.DB_STORE_NAME);\n            function p(d) {\n              if (d && !l) return l = !0, r(d);\n            }\n            _.onerror = _.onabort = d => {\n              p(d.target.error), d.preventDefault();\n            }, _.oncomplete = d => {\n              l || r(null);\n            }, o.sort().forEach(d => {\n              t.type === \"local\" ? IDBFS.loadRemoteEntry(m, d, (g, c) => {\n                if (g) return p(g);\n                IDBFS.storeLocalEntry(d, c, p);\n              }) : IDBFS.loadLocalEntry(d, (g, c) => {\n                if (g) return p(g);\n                IDBFS.storeRemoteEntry(m, d, c, p);\n              });\n            }), s.sort().reverse().forEach(d => {\n              t.type === \"local\" ? IDBFS.removeLocalEntry(d, p) : IDBFS.removeRemoteEntry(m, d, p);\n            });\n          }\n        },\n        ERRNO_CODES = {\n          EPERM: 63,\n          ENOENT: 44,\n          ESRCH: 71,\n          EINTR: 27,\n          EIO: 29,\n          ENXIO: 60,\n          E2BIG: 1,\n          ENOEXEC: 45,\n          EBADF: 8,\n          ECHILD: 12,\n          EAGAIN: 6,\n          EWOULDBLOCK: 6,\n          ENOMEM: 48,\n          EACCES: 2,\n          EFAULT: 21,\n          ENOTBLK: 105,\n          EBUSY: 10,\n          EEXIST: 20,\n          EXDEV: 75,\n          ENODEV: 43,\n          ENOTDIR: 54,\n          EISDIR: 31,\n          EINVAL: 28,\n          ENFILE: 41,\n          EMFILE: 33,\n          ENOTTY: 59,\n          ETXTBSY: 74,\n          EFBIG: 22,\n          ENOSPC: 51,\n          ESPIPE: 70,\n          EROFS: 69,\n          EMLINK: 34,\n          EPIPE: 64,\n          EDOM: 18,\n          ERANGE: 68,\n          ENOMSG: 49,\n          EIDRM: 24,\n          ECHRNG: 106,\n          EL2NSYNC: 156,\n          EL3HLT: 107,\n          EL3RST: 108,\n          ELNRNG: 109,\n          EUNATCH: 110,\n          ENOCSI: 111,\n          EL2HLT: 112,\n          EDEADLK: 16,\n          ENOLCK: 46,\n          EBADE: 113,\n          EBADR: 114,\n          EXFULL: 115,\n          ENOANO: 104,\n          EBADRQC: 103,\n          EBADSLT: 102,\n          EDEADLOCK: 16,\n          EBFONT: 101,\n          ENOSTR: 100,\n          ENODATA: 116,\n          ETIME: 117,\n          ENOSR: 118,\n          ENONET: 119,\n          ENOPKG: 120,\n          EREMOTE: 121,\n          ENOLINK: 47,\n          EADV: 122,\n          ESRMNT: 123,\n          ECOMM: 124,\n          EPROTO: 65,\n          EMULTIHOP: 36,\n          EDOTDOT: 125,\n          EBADMSG: 9,\n          ENOTUNIQ: 126,\n          EBADFD: 127,\n          EREMCHG: 128,\n          ELIBACC: 129,\n          ELIBBAD: 130,\n          ELIBSCN: 131,\n          ELIBMAX: 132,\n          ELIBEXEC: 133,\n          ENOSYS: 52,\n          ENOTEMPTY: 55,\n          ENAMETOOLONG: 37,\n          ELOOP: 32,\n          EOPNOTSUPP: 138,\n          EPFNOSUPPORT: 139,\n          ECONNRESET: 15,\n          ENOBUFS: 42,\n          EAFNOSUPPORT: 5,\n          EPROTOTYPE: 67,\n          ENOTSOCK: 57,\n          ENOPROTOOPT: 50,\n          ESHUTDOWN: 140,\n          ECONNREFUSED: 14,\n          EADDRINUSE: 3,\n          ECONNABORTED: 13,\n          ENETUNREACH: 40,\n          ENETDOWN: 38,\n          ETIMEDOUT: 73,\n          EHOSTDOWN: 142,\n          EHOSTUNREACH: 23,\n          EINPROGRESS: 26,\n          EALREADY: 7,\n          EDESTADDRREQ: 17,\n          EMSGSIZE: 35,\n          EPROTONOSUPPORT: 66,\n          ESOCKTNOSUPPORT: 137,\n          EADDRNOTAVAIL: 4,\n          ENETRESET: 39,\n          EISCONN: 30,\n          ENOTCONN: 53,\n          ETOOMANYREFS: 141,\n          EUSERS: 136,\n          EDQUOT: 19,\n          ESTALE: 72,\n          ENOTSUP: 138,\n          ENOMEDIUM: 148,\n          EILSEQ: 25,\n          EOVERFLOW: 61,\n          ECANCELED: 11,\n          ENOTRECOVERABLE: 56,\n          EOWNERDEAD: 62,\n          ESTRPIPE: 135\n        },\n        NODEFS = {\n          isWindows: !1,\n          staticInit() {\n            NODEFS.isWindows = !!process.platform.match(/^win/);\n            var e = process.binding(\"constants\");\n            e.fs && (e = e.fs), NODEFS.flagsForNodeMap = {\n              1024: e.O_APPEND,\n              64: e.O_CREAT,\n              128: e.O_EXCL,\n              256: e.O_NOCTTY,\n              0: e.O_RDONLY,\n              2: e.O_RDWR,\n              4096: e.O_SYNC,\n              512: e.O_TRUNC,\n              1: e.O_WRONLY,\n              131072: e.O_NOFOLLOW\n            };\n          },\n          convertNodeCode(e) {\n            var t = e.code;\n            return ERRNO_CODES[t];\n          },\n          tryFSOperation(e) {\n            try {\n              return e();\n            } catch (t) {\n              throw t.code ? t.code === \"UNKNOWN\" ? new FS.ErrnoError(28) : new FS.ErrnoError(NODEFS.convertNodeCode(t)) : t;\n            }\n          },\n          mount(e) {\n            return NODEFS.createNode(null, \"/\", NODEFS.getMode(e.opts.root), 0);\n          },\n          createNode(e, t, r, a) {\n            if (!FS.isDir(r) && !FS.isFile(r) && !FS.isLink(r)) throw new FS.ErrnoError(28);\n            var o = FS.createNode(e, t, r);\n            return o.node_ops = NODEFS.node_ops, o.stream_ops = NODEFS.stream_ops, o;\n          },\n          getMode(e) {\n            return NODEFS.tryFSOperation(() => {\n              var t = fs.lstatSync(e).mode;\n              return NODEFS.isWindows && (t |= (t & 292) >> 2), t;\n            });\n          },\n          realPath(e) {\n            for (var t = []; e.parent !== e;) t.push(e.name), e = e.parent;\n            return t.push(e.mount.opts.root), t.reverse(), PATH.join(...t);\n          },\n          flagsForNode(e) {\n            e &= -2097153, e &= -2049, e &= -32769, e &= -524289, e &= -65537;\n            var t = 0;\n            for (var r in NODEFS.flagsForNodeMap) e & r && (t |= NODEFS.flagsForNodeMap[r], e ^= r);\n            if (e) throw new FS.ErrnoError(28);\n            return t;\n          },\n          node_ops: {\n            getattr(e) {\n              var t = NODEFS.realPath(e),\n                r;\n              return NODEFS.tryFSOperation(() => r = fs.lstatSync(t)), NODEFS.isWindows && (r.blksize || (r.blksize = 4096), r.blocks || (r.blocks = (r.size + r.blksize - 1) / r.blksize | 0), r.mode |= (r.mode & 292) >> 2), {\n                dev: r.dev,\n                ino: r.ino,\n                mode: r.mode,\n                nlink: r.nlink,\n                uid: r.uid,\n                gid: r.gid,\n                rdev: r.rdev,\n                size: r.size,\n                atime: r.atime,\n                mtime: r.mtime,\n                ctime: r.ctime,\n                blksize: r.blksize,\n                blocks: r.blocks\n              };\n            },\n            setattr(e, t) {\n              var r = NODEFS.realPath(e);\n              NODEFS.tryFSOperation(() => {\n                if (t.mode !== void 0) {\n                  var a = t.mode;\n                  NODEFS.isWindows && (a &= 384), fs.chmodSync(r, a), e.mode = t.mode;\n                }\n                if (t.atime || t.mtime) {\n                  var o = t.atime && new Date(t.atime),\n                    s = t.mtime && new Date(t.mtime);\n                  fs.utimesSync(r, o, s);\n                }\n                t.size !== void 0 && fs.truncateSync(r, t.size);\n              });\n            },\n            lookup(e, t) {\n              var r = PATH.join2(NODEFS.realPath(e), t),\n                a = NODEFS.getMode(r);\n              return NODEFS.createNode(e, t, a);\n            },\n            mknod(e, t, r, a) {\n              var o = NODEFS.createNode(e, t, r, a),\n                s = NODEFS.realPath(o);\n              return NODEFS.tryFSOperation(() => {\n                FS.isDir(o.mode) ? fs.mkdirSync(s, o.mode) : fs.writeFileSync(s, \"\", {\n                  mode: o.mode\n                });\n              }), o;\n            },\n            rename(e, t, r) {\n              var a = NODEFS.realPath(e),\n                o = PATH.join2(NODEFS.realPath(t), r);\n              try {\n                FS.unlink(o);\n              } catch {}\n              NODEFS.tryFSOperation(() => fs.renameSync(a, o)), e.name = r;\n            },\n            unlink(e, t) {\n              var r = PATH.join2(NODEFS.realPath(e), t);\n              NODEFS.tryFSOperation(() => fs.unlinkSync(r));\n            },\n            rmdir(e, t) {\n              var r = PATH.join2(NODEFS.realPath(e), t);\n              NODEFS.tryFSOperation(() => fs.rmdirSync(r));\n            },\n            readdir(e) {\n              var t = NODEFS.realPath(e);\n              return NODEFS.tryFSOperation(() => fs.readdirSync(t));\n            },\n            symlink(e, t, r) {\n              var a = PATH.join2(NODEFS.realPath(e), t);\n              NODEFS.tryFSOperation(() => fs.symlinkSync(r, a));\n            },\n            readlink(e) {\n              var t = NODEFS.realPath(e);\n              return NODEFS.tryFSOperation(() => fs.readlinkSync(t));\n            },\n            statfs(e) {\n              var t = NODEFS.tryFSOperation(() => fs.statfsSync(e));\n              return t.frsize = t.bsize, t;\n            }\n          },\n          stream_ops: {\n            open(e) {\n              var t = NODEFS.realPath(e.node);\n              NODEFS.tryFSOperation(() => {\n                FS.isFile(e.node.mode) && (e.shared.refcount = 1, e.nfd = fs.openSync(t, NODEFS.flagsForNode(e.flags)));\n              });\n            },\n            close(e) {\n              NODEFS.tryFSOperation(() => {\n                FS.isFile(e.node.mode) && e.nfd && --e.shared.refcount === 0 && fs.closeSync(e.nfd);\n              });\n            },\n            dup(e) {\n              e.shared.refcount++;\n            },\n            read(e, t, r, a, o) {\n              return a === 0 ? 0 : NODEFS.tryFSOperation(() => fs.readSync(e.nfd, new Int8Array(t.buffer, r, a), 0, a, o));\n            },\n            write(e, t, r, a, o) {\n              return NODEFS.tryFSOperation(() => fs.writeSync(e.nfd, new Int8Array(t.buffer, r, a), 0, a, o));\n            },\n            llseek(e, t, r) {\n              var a = t;\n              if (r === 1 ? a += e.position : r === 2 && FS.isFile(e.node.mode) && NODEFS.tryFSOperation(() => {\n                var o = fs.fstatSync(e.nfd);\n                a += o.size;\n              }), a < 0) throw new FS.ErrnoError(28);\n              return a;\n            },\n            mmap(e, t, r, a, o) {\n              if (!FS.isFile(e.node.mode)) throw new FS.ErrnoError(43);\n              var s = mmapAlloc(t);\n              return NODEFS.stream_ops.read(e, HEAP8, s, t, r), {\n                ptr: s,\n                allocated: !0\n              };\n            },\n            msync(e, t, r, a, o) {\n              return NODEFS.stream_ops.write(e, t, 0, a, r, !1), 0;\n            }\n          }\n        },\n        FS = {\n          root: null,\n          mounts: [],\n          devices: {},\n          streams: [],\n          nextInode: 1,\n          nameTable: null,\n          currentPath: \"/\",\n          initialized: !1,\n          ignorePermissions: !0,\n          ErrnoError: class {\n            constructor(e) {\n              (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.d)(this, \"name\", \"ErrnoError\");\n              this.errno = e;\n            }\n          },\n          filesystems: null,\n          syncFSRequests: 0,\n          readFiles: {},\n          FSStream: class {\n            constructor() {\n              (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.d)(this, \"shared\", {});\n            }\n            get object() {\n              return this.node;\n            }\n            set object(e) {\n              this.node = e;\n            }\n            get isRead() {\n              return (this.flags & 2097155) !== 1;\n            }\n            get isWrite() {\n              return (this.flags & 2097155) !== 0;\n            }\n            get isAppend() {\n              return this.flags & 1024;\n            }\n            get flags() {\n              return this.shared.flags;\n            }\n            set flags(e) {\n              this.shared.flags = e;\n            }\n            get position() {\n              return this.shared.position;\n            }\n            set position(e) {\n              this.shared.position = e;\n            }\n          },\n          FSNode: class {\n            constructor(e, t, r, a) {\n              (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.d)(this, \"node_ops\", {});\n              (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.d)(this, \"stream_ops\", {});\n              (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.d)(this, \"readMode\", 365);\n              (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.d)(this, \"writeMode\", 146);\n              (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.d)(this, \"mounted\", null);\n              e || (e = this), this.parent = e, this.mount = e.mount, this.id = FS.nextInode++, this.name = t, this.mode = r, this.rdev = a, this.atime = this.mtime = this.ctime = Date.now();\n            }\n            get read() {\n              return (this.mode & this.readMode) === this.readMode;\n            }\n            set read(e) {\n              e ? this.mode |= this.readMode : this.mode &= ~this.readMode;\n            }\n            get write() {\n              return (this.mode & this.writeMode) === this.writeMode;\n            }\n            set write(e) {\n              e ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;\n            }\n            get isFolder() {\n              return FS.isDir(this.mode);\n            }\n            get isDevice() {\n              return FS.isChrdev(this.mode);\n            }\n          },\n          lookupPath(e, t = {}) {\n            if (!e) return {\n              path: \"\",\n              node: null\n            };\n            t.follow_mount ?? (t.follow_mount = !0), PATH.isAbs(e) || (e = FS.cwd() + \"/\" + e);\n            e: for (var r = 0; r < 40; r++) {\n              for (var a = e.split(\"/\").filter(m => !!m && m !== \".\"), o = FS.root, s = \"/\", l = 0; l < a.length; l++) {\n                var n = l === a.length - 1;\n                if (n && t.parent) break;\n                if (a[l] === \"..\") {\n                  s = PATH.dirname(s), o = o.parent;\n                  continue;\n                }\n                s = PATH.join2(s, a[l]);\n                try {\n                  o = FS.lookupNode(o, a[l]);\n                } catch (m) {\n                  if (m?.errno === 44 && n && t.noent_okay) return {\n                    path: s\n                  };\n                  throw m;\n                }\n                if (FS.isMountpoint(o) && (!n || t.follow_mount) && (o = o.mounted.root), FS.isLink(o.mode) && (!n || t.follow)) {\n                  if (!o.node_ops.readlink) throw new FS.ErrnoError(52);\n                  var _ = o.node_ops.readlink(o);\n                  PATH.isAbs(_) || (_ = PATH.dirname(s) + \"/\" + _), e = _ + \"/\" + a.slice(l + 1).join(\"/\");\n                  continue e;\n                }\n              }\n              return {\n                path: s,\n                node: o\n              };\n            }\n            throw new FS.ErrnoError(32);\n          },\n          getPath(e) {\n            for (var t;;) {\n              if (FS.isRoot(e)) {\n                var r = e.mount.mountpoint;\n                return t ? r[r.length - 1] !== \"/\" ? `${r}/${t}` : r + t : r;\n              }\n              t = t ? `${e.name}/${t}` : e.name, e = e.parent;\n            }\n          },\n          hashName(e, t) {\n            for (var r = 0, a = 0; a < t.length; a++) r = (r << 5) - r + t.charCodeAt(a) | 0;\n            return (e + r >>> 0) % FS.nameTable.length;\n          },\n          hashAddNode(e) {\n            var t = FS.hashName(e.parent.id, e.name);\n            e.name_next = FS.nameTable[t], FS.nameTable[t] = e;\n          },\n          hashRemoveNode(e) {\n            var t = FS.hashName(e.parent.id, e.name);\n            if (FS.nameTable[t] === e) FS.nameTable[t] = e.name_next;else for (var r = FS.nameTable[t]; r;) {\n              if (r.name_next === e) {\n                r.name_next = e.name_next;\n                break;\n              }\n              r = r.name_next;\n            }\n          },\n          lookupNode(e, t) {\n            var r = FS.mayLookup(e);\n            if (r) throw new FS.ErrnoError(r);\n            for (var a = FS.hashName(e.id, t), o = FS.nameTable[a]; o; o = o.name_next) {\n              var s = o.name;\n              if (o.parent.id === e.id && s === t) return o;\n            }\n            return FS.lookup(e, t);\n          },\n          createNode(e, t, r, a) {\n            var o = new FS.FSNode(e, t, r, a);\n            return FS.hashAddNode(o), o;\n          },\n          destroyNode(e) {\n            FS.hashRemoveNode(e);\n          },\n          isRoot(e) {\n            return e === e.parent;\n          },\n          isMountpoint(e) {\n            return !!e.mounted;\n          },\n          isFile(e) {\n            return (e & 61440) === 32768;\n          },\n          isDir(e) {\n            return (e & 61440) === 16384;\n          },\n          isLink(e) {\n            return (e & 61440) === 40960;\n          },\n          isChrdev(e) {\n            return (e & 61440) === 8192;\n          },\n          isBlkdev(e) {\n            return (e & 61440) === 24576;\n          },\n          isFIFO(e) {\n            return (e & 61440) === 4096;\n          },\n          isSocket(e) {\n            return (e & 49152) === 49152;\n          },\n          flagsToPermissionString(e) {\n            var t = [\"r\", \"w\", \"rw\"][e & 3];\n            return e & 512 && (t += \"w\"), t;\n          },\n          nodePermissions(e, t) {\n            return FS.ignorePermissions ? 0 : t.includes(\"r\") && !(e.mode & 292) || t.includes(\"w\") && !(e.mode & 146) || t.includes(\"x\") && !(e.mode & 73) ? 2 : 0;\n          },\n          mayLookup(e) {\n            if (!FS.isDir(e.mode)) return 54;\n            var t = FS.nodePermissions(e, \"x\");\n            return t || (e.node_ops.lookup ? 0 : 2);\n          },\n          mayCreate(e, t) {\n            if (!FS.isDir(e.mode)) return 54;\n            try {\n              var r = FS.lookupNode(e, t);\n              return 20;\n            } catch {}\n            return FS.nodePermissions(e, \"wx\");\n          },\n          mayDelete(e, t, r) {\n            var a;\n            try {\n              a = FS.lookupNode(e, t);\n            } catch (s) {\n              return s.errno;\n            }\n            var o = FS.nodePermissions(e, \"wx\");\n            if (o) return o;\n            if (r) {\n              if (!FS.isDir(a.mode)) return 54;\n              if (FS.isRoot(a) || FS.getPath(a) === FS.cwd()) return 10;\n            } else if (FS.isDir(a.mode)) return 31;\n            return 0;\n          },\n          mayOpen(e, t) {\n            return e ? FS.isLink(e.mode) ? 32 : FS.isDir(e.mode) && (FS.flagsToPermissionString(t) !== \"r\" || t & 512) ? 31 : FS.nodePermissions(e, FS.flagsToPermissionString(t)) : 44;\n          },\n          MAX_OPEN_FDS: 4096,\n          nextfd() {\n            for (var e = 0; e <= FS.MAX_OPEN_FDS; e++) if (!FS.streams[e]) return e;\n            throw new FS.ErrnoError(33);\n          },\n          getStreamChecked(e) {\n            var t = FS.getStream(e);\n            if (!t) throw new FS.ErrnoError(8);\n            return t;\n          },\n          getStream: e => FS.streams[e],\n          createStream(e, t = -1) {\n            return e = Object.assign(new FS.FSStream(), e), t == -1 && (t = FS.nextfd()), e.fd = t, FS.streams[t] = e, e;\n          },\n          closeStream(e) {\n            FS.streams[e] = null;\n          },\n          dupStream(e, t = -1) {\n            var r = FS.createStream(e, t);\n            return r.stream_ops?.dup?.(r), r;\n          },\n          chrdev_stream_ops: {\n            open(e) {\n              var t = FS.getDevice(e.node.rdev);\n              e.stream_ops = t.stream_ops, e.stream_ops.open?.(e);\n            },\n            llseek() {\n              throw new FS.ErrnoError(70);\n            }\n          },\n          major: e => e >> 8,\n          minor: e => e & 255,\n          makedev: (e, t) => e << 8 | t,\n          registerDevice(e, t) {\n            FS.devices[e] = {\n              stream_ops: t\n            };\n          },\n          getDevice: e => FS.devices[e],\n          getMounts(e) {\n            for (var t = [], r = [e]; r.length;) {\n              var a = r.pop();\n              t.push(a), r.push(...a.mounts);\n            }\n            return t;\n          },\n          syncfs(e, t) {\n            typeof e == \"function\" && (t = e, e = !1), FS.syncFSRequests++, FS.syncFSRequests > 1 && err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);\n            var r = FS.getMounts(FS.root.mount),\n              a = 0;\n            function o(l) {\n              return FS.syncFSRequests--, t(l);\n            }\n            function s(l) {\n              if (l) return s.errored ? void 0 : (s.errored = !0, o(l));\n              ++a >= r.length && o(null);\n            }\n            r.forEach(l => {\n              if (!l.type.syncfs) return s(null);\n              l.type.syncfs(l, e, s);\n            });\n          },\n          mount(e, t, r) {\n            var a = r === \"/\",\n              o = !r,\n              s;\n            if (a && FS.root) throw new FS.ErrnoError(10);\n            if (!a && !o) {\n              var l = FS.lookupPath(r, {\n                follow_mount: !1\n              });\n              if (r = l.path, s = l.node, FS.isMountpoint(s)) throw new FS.ErrnoError(10);\n              if (!FS.isDir(s.mode)) throw new FS.ErrnoError(54);\n            }\n            var n = {\n                type: e,\n                opts: t,\n                mountpoint: r,\n                mounts: []\n              },\n              _ = e.mount(n);\n            return _.mount = n, n.root = _, a ? FS.root = _ : s && (s.mounted = n, s.mount && s.mount.mounts.push(n)), _;\n          },\n          unmount(e) {\n            var t = FS.lookupPath(e, {\n              follow_mount: !1\n            });\n            if (!FS.isMountpoint(t.node)) throw new FS.ErrnoError(28);\n            var r = t.node,\n              a = r.mounted,\n              o = FS.getMounts(a);\n            Object.keys(FS.nameTable).forEach(l => {\n              for (var n = FS.nameTable[l]; n;) {\n                var _ = n.name_next;\n                o.includes(n.mount) && FS.destroyNode(n), n = _;\n              }\n            }), r.mounted = null;\n            var s = r.mount.mounts.indexOf(a);\n            r.mount.mounts.splice(s, 1);\n          },\n          lookup(e, t) {\n            return e.node_ops.lookup(e, t);\n          },\n          mknod(e, t, r) {\n            var a = FS.lookupPath(e, {\n                parent: !0\n              }),\n              o = a.node,\n              s = PATH.basename(e);\n            if (!s || s === \".\" || s === \"..\") throw new FS.ErrnoError(28);\n            var l = FS.mayCreate(o, s);\n            if (l) throw new FS.ErrnoError(l);\n            if (!o.node_ops.mknod) throw new FS.ErrnoError(63);\n            return o.node_ops.mknod(o, s, t, r);\n          },\n          statfs(e) {\n            var t = {\n                bsize: 4096,\n                frsize: 4096,\n                blocks: 1e6,\n                bfree: 5e5,\n                bavail: 5e5,\n                files: FS.nextInode,\n                ffree: FS.nextInode - 1,\n                fsid: 42,\n                flags: 2,\n                namelen: 255\n              },\n              r = FS.lookupPath(e, {\n                follow: !0\n              }).node;\n            return r?.node_ops.statfs && Object.assign(t, r.node_ops.statfs(r.mount.opts.root)), t;\n          },\n          create(e, t = 438) {\n            return t &= 4095, t |= 32768, FS.mknod(e, t, 0);\n          },\n          mkdir(e, t = 511) {\n            return t &= 1023, t |= 16384, FS.mknod(e, t, 0);\n          },\n          mkdirTree(e, t) {\n            for (var r = e.split(\"/\"), a = \"\", o = 0; o < r.length; ++o) if (r[o]) {\n              a += \"/\" + r[o];\n              try {\n                FS.mkdir(a, t);\n              } catch (s) {\n                if (s.errno != 20) throw s;\n              }\n            }\n          },\n          mkdev(e, t, r) {\n            return typeof r > \"u\" && (r = t, t = 438), t |= 8192, FS.mknod(e, t, r);\n          },\n          symlink(e, t) {\n            if (!PATH_FS.resolve(e)) throw new FS.ErrnoError(44);\n            var r = FS.lookupPath(t, {\n                parent: !0\n              }),\n              a = r.node;\n            if (!a) throw new FS.ErrnoError(44);\n            var o = PATH.basename(t),\n              s = FS.mayCreate(a, o);\n            if (s) throw new FS.ErrnoError(s);\n            if (!a.node_ops.symlink) throw new FS.ErrnoError(63);\n            return a.node_ops.symlink(a, o, e);\n          },\n          rename(e, t) {\n            var r = PATH.dirname(e),\n              a = PATH.dirname(t),\n              o = PATH.basename(e),\n              s = PATH.basename(t),\n              l,\n              n,\n              _;\n            if (l = FS.lookupPath(e, {\n              parent: !0\n            }), n = l.node, l = FS.lookupPath(t, {\n              parent: !0\n            }), _ = l.node, !n || !_) throw new FS.ErrnoError(44);\n            if (n.mount !== _.mount) throw new FS.ErrnoError(75);\n            var m = FS.lookupNode(n, o),\n              p = PATH_FS.relative(e, a);\n            if (p.charAt(0) !== \".\") throw new FS.ErrnoError(28);\n            if (p = PATH_FS.relative(t, r), p.charAt(0) !== \".\") throw new FS.ErrnoError(55);\n            var d;\n            try {\n              d = FS.lookupNode(_, s);\n            } catch {}\n            if (m !== d) {\n              var g = FS.isDir(m.mode),\n                c = FS.mayDelete(n, o, g);\n              if (c) throw new FS.ErrnoError(c);\n              if (c = d ? FS.mayDelete(_, s, g) : FS.mayCreate(_, s), c) throw new FS.ErrnoError(c);\n              if (!n.node_ops.rename) throw new FS.ErrnoError(63);\n              if (FS.isMountpoint(m) || d && FS.isMountpoint(d)) throw new FS.ErrnoError(10);\n              if (_ !== n && (c = FS.nodePermissions(n, \"w\"), c)) throw new FS.ErrnoError(c);\n              FS.hashRemoveNode(m);\n              try {\n                n.node_ops.rename(m, _, s), m.parent = _;\n              } catch (f) {\n                throw f;\n              } finally {\n                FS.hashAddNode(m);\n              }\n            }\n          },\n          rmdir(e) {\n            var t = FS.lookupPath(e, {\n                parent: !0\n              }),\n              r = t.node,\n              a = PATH.basename(e),\n              o = FS.lookupNode(r, a),\n              s = FS.mayDelete(r, a, !0);\n            if (s) throw new FS.ErrnoError(s);\n            if (!r.node_ops.rmdir) throw new FS.ErrnoError(63);\n            if (FS.isMountpoint(o)) throw new FS.ErrnoError(10);\n            r.node_ops.rmdir(r, a), FS.destroyNode(o);\n          },\n          readdir(e) {\n            var t = FS.lookupPath(e, {\n                follow: !0\n              }),\n              r = t.node;\n            if (!r.node_ops.readdir) throw new FS.ErrnoError(54);\n            return r.node_ops.readdir(r);\n          },\n          unlink(e) {\n            var t = FS.lookupPath(e, {\n                parent: !0\n              }),\n              r = t.node;\n            if (!r) throw new FS.ErrnoError(44);\n            var a = PATH.basename(e),\n              o = FS.lookupNode(r, a),\n              s = FS.mayDelete(r, a, !1);\n            if (s) throw new FS.ErrnoError(s);\n            if (!r.node_ops.unlink) throw new FS.ErrnoError(63);\n            if (FS.isMountpoint(o)) throw new FS.ErrnoError(10);\n            r.node_ops.unlink(r, a), FS.destroyNode(o);\n          },\n          readlink(e) {\n            var t = FS.lookupPath(e),\n              r = t.node;\n            if (!r) throw new FS.ErrnoError(44);\n            if (!r.node_ops.readlink) throw new FS.ErrnoError(28);\n            return r.node_ops.readlink(r);\n          },\n          stat(e, t) {\n            var r = FS.lookupPath(e, {\n                follow: !t\n              }),\n              a = r.node;\n            if (!a) throw new FS.ErrnoError(44);\n            if (!a.node_ops.getattr) throw new FS.ErrnoError(63);\n            return a.node_ops.getattr(a);\n          },\n          lstat(e) {\n            return FS.stat(e, !0);\n          },\n          chmod(e, t, r) {\n            var a;\n            if (typeof e == \"string\") {\n              var o = FS.lookupPath(e, {\n                follow: !r\n              });\n              a = o.node;\n            } else a = e;\n            if (!a.node_ops.setattr) throw new FS.ErrnoError(63);\n            a.node_ops.setattr(a, {\n              mode: t & 4095 | a.mode & -4096,\n              ctime: Date.now()\n            });\n          },\n          lchmod(e, t) {\n            FS.chmod(e, t, !0);\n          },\n          fchmod(e, t) {\n            var r = FS.getStreamChecked(e);\n            FS.chmod(r.node, t);\n          },\n          chown(e, t, r, a) {\n            var o;\n            if (typeof e == \"string\") {\n              var s = FS.lookupPath(e, {\n                follow: !a\n              });\n              o = s.node;\n            } else o = e;\n            if (!o.node_ops.setattr) throw new FS.ErrnoError(63);\n            o.node_ops.setattr(o, {\n              timestamp: Date.now()\n            });\n          },\n          lchown(e, t, r) {\n            FS.chown(e, t, r, !0);\n          },\n          fchown(e, t, r) {\n            var a = FS.getStreamChecked(e);\n            FS.chown(a.node, t, r);\n          },\n          truncate(e, t) {\n            if (t < 0) throw new FS.ErrnoError(28);\n            var r;\n            if (typeof e == \"string\") {\n              var a = FS.lookupPath(e, {\n                follow: !0\n              });\n              r = a.node;\n            } else r = e;\n            if (!r.node_ops.setattr) throw new FS.ErrnoError(63);\n            if (FS.isDir(r.mode)) throw new FS.ErrnoError(31);\n            if (!FS.isFile(r.mode)) throw new FS.ErrnoError(28);\n            var o = FS.nodePermissions(r, \"w\");\n            if (o) throw new FS.ErrnoError(o);\n            r.node_ops.setattr(r, {\n              size: t,\n              timestamp: Date.now()\n            });\n          },\n          ftruncate(e, t) {\n            var r = FS.getStreamChecked(e);\n            if (!(r.flags & 2097155)) throw new FS.ErrnoError(28);\n            FS.truncate(r.node, t);\n          },\n          utime(e, t, r) {\n            var a = FS.lookupPath(e, {\n                follow: !0\n              }),\n              o = a.node;\n            o.node_ops.setattr(o, {\n              atime: t,\n              mtime: r\n            });\n          },\n          open(e, t, r = 438) {\n            if (e === \"\") throw new FS.ErrnoError(44);\n            t = typeof t == \"string\" ? FS_modeStringToFlags(t) : t, t & 64 ? r = r & 4095 | 32768 : r = 0;\n            var a;\n            if (typeof e == \"object\") a = e;else {\n              var o = FS.lookupPath(e, {\n                follow: !(t & 131072),\n                noent_okay: !0\n              });\n              a = o.node, e = o.path;\n            }\n            var s = !1;\n            if (t & 64) if (a) {\n              if (t & 128) throw new FS.ErrnoError(20);\n            } else a = FS.mknod(e, r, 0), s = !0;\n            if (!a) throw new FS.ErrnoError(44);\n            if (FS.isChrdev(a.mode) && (t &= -513), t & 65536 && !FS.isDir(a.mode)) throw new FS.ErrnoError(54);\n            if (!s) {\n              var l = FS.mayOpen(a, t);\n              if (l) throw new FS.ErrnoError(l);\n            }\n            t & 512 && !s && FS.truncate(a, 0), t &= -131713;\n            var n = FS.createStream({\n              node: a,\n              path: FS.getPath(a),\n              flags: t,\n              seekable: !0,\n              position: 0,\n              stream_ops: a.stream_ops,\n              ungotten: [],\n              error: !1\n            });\n            return n.stream_ops.open && n.stream_ops.open(n), Module.logReadFiles && !(t & 1) && (e in FS.readFiles || (FS.readFiles[e] = 1)), n;\n          },\n          close(e) {\n            if (FS.isClosed(e)) throw new FS.ErrnoError(8);\n            e.getdents && (e.getdents = null);\n            try {\n              e.stream_ops.close && e.stream_ops.close(e);\n            } catch (t) {\n              throw t;\n            } finally {\n              FS.closeStream(e.fd);\n            }\n            e.fd = null;\n          },\n          isClosed(e) {\n            return e.fd === null;\n          },\n          llseek(e, t, r) {\n            if (FS.isClosed(e)) throw new FS.ErrnoError(8);\n            if (!e.seekable || !e.stream_ops.llseek) throw new FS.ErrnoError(70);\n            if (r != 0 && r != 1 && r != 2) throw new FS.ErrnoError(28);\n            return e.position = e.stream_ops.llseek(e, t, r), e.ungotten = [], e.position;\n          },\n          read(e, t, r, a, o) {\n            if (a < 0 || o < 0) throw new FS.ErrnoError(28);\n            if (FS.isClosed(e)) throw new FS.ErrnoError(8);\n            if ((e.flags & 2097155) === 1) throw new FS.ErrnoError(8);\n            if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);\n            if (!e.stream_ops.read) throw new FS.ErrnoError(28);\n            var s = typeof o < \"u\";\n            if (!s) o = e.position;else if (!e.seekable) throw new FS.ErrnoError(70);\n            var l = e.stream_ops.read(e, t, r, a, o);\n            return s || (e.position += l), l;\n          },\n          write(e, t, r, a, o, s) {\n            if (a < 0 || o < 0) throw new FS.ErrnoError(28);\n            if (FS.isClosed(e)) throw new FS.ErrnoError(8);\n            if (!(e.flags & 2097155)) throw new FS.ErrnoError(8);\n            if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);\n            if (!e.stream_ops.write) throw new FS.ErrnoError(28);\n            e.seekable && e.flags & 1024 && FS.llseek(e, 0, 2);\n            var l = typeof o < \"u\";\n            if (!l) o = e.position;else if (!e.seekable) throw new FS.ErrnoError(70);\n            var n = e.stream_ops.write(e, t, r, a, o, s);\n            return l || (e.position += n), n;\n          },\n          allocate(e, t, r) {\n            if (FS.isClosed(e)) throw new FS.ErrnoError(8);\n            if (t < 0 || r <= 0) throw new FS.ErrnoError(28);\n            if (!(e.flags & 2097155)) throw new FS.ErrnoError(8);\n            if (!FS.isFile(e.node.mode) && !FS.isDir(e.node.mode)) throw new FS.ErrnoError(43);\n            if (!e.stream_ops.allocate) throw new FS.ErrnoError(138);\n            e.stream_ops.allocate(e, t, r);\n          },\n          mmap(e, t, r, a, o) {\n            if (a & 2 && !(o & 2) && (e.flags & 2097155) !== 2) throw new FS.ErrnoError(2);\n            if ((e.flags & 2097155) === 1) throw new FS.ErrnoError(2);\n            if (!e.stream_ops.mmap) throw new FS.ErrnoError(43);\n            if (!t) throw new FS.ErrnoError(28);\n            return e.stream_ops.mmap(e, t, r, a, o);\n          },\n          msync(e, t, r, a, o) {\n            return e.stream_ops.msync ? e.stream_ops.msync(e, t, r, a, o) : 0;\n          },\n          ioctl(e, t, r) {\n            if (!e.stream_ops.ioctl) throw new FS.ErrnoError(59);\n            return e.stream_ops.ioctl(e, t, r);\n          },\n          readFile(e, t = {}) {\n            if (t.flags = t.flags || 0, t.encoding = t.encoding || \"binary\", t.encoding !== \"utf8\" && t.encoding !== \"binary\") throw new Error(`Invalid encoding type \"${t.encoding}\"`);\n            var r,\n              a = FS.open(e, t.flags),\n              o = FS.stat(e),\n              s = o.size,\n              l = new Uint8Array(s);\n            return FS.read(a, l, 0, s, 0), t.encoding === \"utf8\" ? r = UTF8ArrayToString(l) : t.encoding === \"binary\" && (r = l), FS.close(a), r;\n          },\n          writeFile(e, t, r = {}) {\n            r.flags = r.flags || 577;\n            var a = FS.open(e, r.flags, r.mode);\n            if (typeof t == \"string\") {\n              var o = new Uint8Array(lengthBytesUTF8(t) + 1),\n                s = stringToUTF8Array(t, o, 0, o.length);\n              FS.write(a, o, 0, s, void 0, r.canOwn);\n            } else if (ArrayBuffer.isView(t)) FS.write(a, t, 0, t.byteLength, void 0, r.canOwn);else throw new Error(\"Unsupported data type\");\n            FS.close(a);\n          },\n          cwd: () => FS.currentPath,\n          chdir(e) {\n            var t = FS.lookupPath(e, {\n              follow: !0\n            });\n            if (t.node === null) throw new FS.ErrnoError(44);\n            if (!FS.isDir(t.node.mode)) throw new FS.ErrnoError(54);\n            var r = FS.nodePermissions(t.node, \"x\");\n            if (r) throw new FS.ErrnoError(r);\n            FS.currentPath = t.path;\n          },\n          createDefaultDirectories() {\n            FS.mkdir(\"/tmp\"), FS.mkdir(\"/home\"), FS.mkdir(\"/home/web_user\");\n          },\n          createDefaultDevices() {\n            FS.mkdir(\"/dev\"), FS.registerDevice(FS.makedev(1, 3), {\n              read: () => 0,\n              write: (a, o, s, l, n) => l,\n              llseek: () => 0\n            }), FS.mkdev(\"/dev/null\", FS.makedev(1, 3)), TTY.register(FS.makedev(5, 0), TTY.default_tty_ops), TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops), FS.mkdev(\"/dev/tty\", FS.makedev(5, 0)), FS.mkdev(\"/dev/tty1\", FS.makedev(6, 0));\n            var e = new Uint8Array(1024),\n              t = 0,\n              r = () => (t === 0 && (t = randomFill(e).byteLength), e[--t]);\n            FS.createDevice(\"/dev\", \"random\", r), FS.createDevice(\"/dev\", \"urandom\", r), FS.mkdir(\"/dev/shm\"), FS.mkdir(\"/dev/shm/tmp\");\n          },\n          createSpecialDirectories() {\n            FS.mkdir(\"/proc\");\n            var e = FS.mkdir(\"/proc/self\");\n            FS.mkdir(\"/proc/self/fd\"), FS.mount({\n              mount() {\n                var t = FS.createNode(e, \"fd\", 16895, 73);\n                return t.stream_ops = {\n                  llseek: MEMFS.stream_ops.llseek\n                }, t.node_ops = {\n                  lookup(r, a) {\n                    var o = +a,\n                      s = FS.getStreamChecked(o),\n                      l = {\n                        parent: null,\n                        mount: {\n                          mountpoint: \"fake\"\n                        },\n                        node_ops: {\n                          readlink: () => s.path\n                        },\n                        id: o + 1\n                      };\n                    return l.parent = l, l;\n                  },\n                  readdir() {\n                    return Array.from(FS.streams.entries()).filter(([r, a]) => a).map(([r, a]) => r.toString());\n                  }\n                }, t;\n              }\n            }, {}, \"/proc/self/fd\");\n          },\n          createStandardStreams(e, t, r) {\n            e ? FS.createDevice(\"/dev\", \"stdin\", e) : FS.symlink(\"/dev/tty\", \"/dev/stdin\"), t ? FS.createDevice(\"/dev\", \"stdout\", null, t) : FS.symlink(\"/dev/tty\", \"/dev/stdout\"), r ? FS.createDevice(\"/dev\", \"stderr\", null, r) : FS.symlink(\"/dev/tty1\", \"/dev/stderr\");\n            var a = FS.open(\"/dev/stdin\", 0),\n              o = FS.open(\"/dev/stdout\", 1),\n              s = FS.open(\"/dev/stderr\", 1);\n          },\n          staticInit() {\n            FS.nameTable = new Array(4096), FS.mount(MEMFS, {}, \"/\"), FS.createDefaultDirectories(), FS.createDefaultDevices(), FS.createSpecialDirectories(), FS.filesystems = {\n              MEMFS,\n              IDBFS,\n              NODEFS\n            };\n          },\n          init(e, t, r) {\n            FS.initialized = !0, e ?? (e = Module.stdin), t ?? (t = Module.stdout), r ?? (r = Module.stderr), FS.createStandardStreams(e, t, r);\n          },\n          quit() {\n            FS.initialized = !1, _fflush(0);\n            for (var e = 0; e < FS.streams.length; e++) {\n              var t = FS.streams[e];\n              t && FS.close(t);\n            }\n          },\n          findObject(e, t) {\n            var r = FS.analyzePath(e, t);\n            return r.exists ? r.object : null;\n          },\n          analyzePath(e, t) {\n            try {\n              var r = FS.lookupPath(e, {\n                follow: !t\n              });\n              e = r.path;\n            } catch {}\n            var a = {\n              isRoot: !1,\n              exists: !1,\n              error: 0,\n              name: null,\n              path: null,\n              object: null,\n              parentExists: !1,\n              parentPath: null,\n              parentObject: null\n            };\n            try {\n              var r = FS.lookupPath(e, {\n                parent: !0\n              });\n              a.parentExists = !0, a.parentPath = r.path, a.parentObject = r.node, a.name = PATH.basename(e), r = FS.lookupPath(e, {\n                follow: !t\n              }), a.exists = !0, a.path = r.path, a.object = r.node, a.name = r.node.name, a.isRoot = r.path === \"/\";\n            } catch (o) {\n              a.error = o.errno;\n            }\n            return a;\n          },\n          createPath(e, t, r, a) {\n            e = typeof e == \"string\" ? e : FS.getPath(e);\n            for (var o = t.split(\"/\").reverse(); o.length;) {\n              var s = o.pop();\n              if (s) {\n                var l = PATH.join2(e, s);\n                try {\n                  FS.mkdir(l);\n                } catch {}\n                e = l;\n              }\n            }\n            return l;\n          },\n          createFile(e, t, r, a, o) {\n            var s = PATH.join2(typeof e == \"string\" ? e : FS.getPath(e), t),\n              l = FS_getMode(a, o);\n            return FS.create(s, l);\n          },\n          createDataFile(e, t, r, a, o, s) {\n            var l = t;\n            e && (e = typeof e == \"string\" ? e : FS.getPath(e), l = t ? PATH.join2(e, t) : e);\n            var n = FS_getMode(a, o),\n              _ = FS.create(l, n);\n            if (r) {\n              if (typeof r == \"string\") {\n                for (var m = new Array(r.length), p = 0, d = r.length; p < d; ++p) m[p] = r.charCodeAt(p);\n                r = m;\n              }\n              FS.chmod(_, n | 146);\n              var g = FS.open(_, 577);\n              FS.write(g, r, 0, r.length, 0, s), FS.close(g), FS.chmod(_, n);\n            }\n          },\n          createDevice(e, t, r, a) {\n            var n;\n            var o = PATH.join2(typeof e == \"string\" ? e : FS.getPath(e), t),\n              s = FS_getMode(!!r, !!a);\n            (n = FS.createDevice).major ?? (n.major = 64);\n            var l = FS.makedev(FS.createDevice.major++, 0);\n            return FS.registerDevice(l, {\n              open(_) {\n                _.seekable = !1;\n              },\n              close(_) {\n                a?.buffer?.length && a(10);\n              },\n              read(_, m, p, d, g) {\n                for (var c = 0, f = 0; f < d; f++) {\n                  var u;\n                  try {\n                    u = r();\n                  } catch {\n                    throw new FS.ErrnoError(29);\n                  }\n                  if (u === void 0 && c === 0) throw new FS.ErrnoError(6);\n                  if (u == null) break;\n                  c++, m[p + f] = u;\n                }\n                return c && (_.node.atime = Date.now()), c;\n              },\n              write(_, m, p, d, g) {\n                for (var c = 0; c < d; c++) try {\n                  a(m[p + c]);\n                } catch {\n                  throw new FS.ErrnoError(29);\n                }\n                return d && (_.node.mtime = _.node.ctime = Date.now()), c;\n              }\n            }), FS.mkdev(o, s, l);\n          },\n          forceLoadFile(e) {\n            if (e.isDevice || e.isFolder || e.link || e.contents) return !0;\n            if (typeof XMLHttpRequest < \"u\") throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\");\n            try {\n              e.contents = readBinary(e.url), e.usedBytes = e.contents.length;\n            } catch {\n              throw new FS.ErrnoError(29);\n            }\n          },\n          createLazyFile(e, t, r, a, o) {\n            class s {\n              constructor() {\n                (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.d)(this, \"lengthKnown\", !1);\n                (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.d)(this, \"chunks\", []);\n              }\n              get(c) {\n                if (!(c > this.length - 1 || c < 0)) {\n                  var f = c % this.chunkSize,\n                    u = c / this.chunkSize | 0;\n                  return this.getter(u)[f];\n                }\n              }\n              setDataGetter(c) {\n                this.getter = c;\n              }\n              cacheLength() {\n                var c = new XMLHttpRequest();\n                if (c.open(\"HEAD\", r, !1), c.send(null), !(c.status >= 200 && c.status < 300 || c.status === 304)) throw new Error(\"Couldn't load \" + r + \". Status: \" + c.status);\n                var f = Number(c.getResponseHeader(\"Content-length\")),\n                  u,\n                  w = (u = c.getResponseHeader(\"Accept-Ranges\")) && u === \"bytes\",\n                  h = (u = c.getResponseHeader(\"Content-Encoding\")) && u === \"gzip\",\n                  S = 1024 * 1024;\n                w || (S = f);\n                var M = (x, E) => {\n                    if (x > E) throw new Error(\"invalid range (\" + x + \", \" + E + \") or no bytes requested!\");\n                    if (E > f - 1) throw new Error(\"only \" + f + \" bytes available! programmer error!\");\n                    var b = new XMLHttpRequest();\n                    if (b.open(\"GET\", r, !1), f !== S && b.setRequestHeader(\"Range\", \"bytes=\" + x + \"-\" + E), b.responseType = \"arraybuffer\", b.overrideMimeType && b.overrideMimeType(\"text/plain; charset=x-user-defined\"), b.send(null), !(b.status >= 200 && b.status < 300 || b.status === 304)) throw new Error(\"Couldn't load \" + r + \". Status: \" + b.status);\n                    return b.response !== void 0 ? new Uint8Array(b.response || []) : intArrayFromString(b.responseText || \"\", !0);\n                  },\n                  y = this;\n                y.setDataGetter(x => {\n                  var E = x * S,\n                    b = (x + 1) * S - 1;\n                  if (b = Math.min(b, f - 1), typeof y.chunks[x] > \"u\" && (y.chunks[x] = M(E, b)), typeof y.chunks[x] > \"u\") throw new Error(\"doXHR failed!\");\n                  return y.chunks[x];\n                }), (h || !f) && (S = f = 1, f = this.getter(0).length, S = f, out(\"LazyFiles on gzip forces download of the whole file when length is accessed\")), this._length = f, this._chunkSize = S, this.lengthKnown = !0;\n              }\n              get length() {\n                return this.lengthKnown || this.cacheLength(), this._length;\n              }\n              get chunkSize() {\n                return this.lengthKnown || this.cacheLength(), this._chunkSize;\n              }\n            }\n            if (typeof XMLHttpRequest < \"u\") {\n              if (!ENVIRONMENT_IS_WORKER) throw \"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc\";\n              var l = new s(),\n                n = {\n                  isDevice: !1,\n                  contents: l\n                };\n            } else var n = {\n              isDevice: !1,\n              url: r\n            };\n            var _ = FS.createFile(e, t, n, a, o);\n            n.contents ? _.contents = n.contents : n.url && (_.contents = null, _.url = n.url), Object.defineProperties(_, {\n              usedBytes: {\n                get: function () {\n                  return this.contents.length;\n                }\n              }\n            });\n            var m = {},\n              p = Object.keys(_.stream_ops);\n            p.forEach(g => {\n              var c = _.stream_ops[g];\n              m[g] = (...f) => (FS.forceLoadFile(_), c(...f));\n            });\n            function d(g, c, f, u, w) {\n              var h = g.node.contents;\n              if (w >= h.length) return 0;\n              var S = Math.min(h.length - w, u);\n              if (h.slice) for (var M = 0; M < S; M++) c[f + M] = h[w + M];else for (var M = 0; M < S; M++) c[f + M] = h.get(w + M);\n              return S;\n            }\n            return m.read = (g, c, f, u, w) => (FS.forceLoadFile(_), d(g, c, f, u, w)), m.mmap = (g, c, f, u, w) => {\n              FS.forceLoadFile(_);\n              var h = mmapAlloc(c);\n              if (!h) throw new FS.ErrnoError(48);\n              return d(g, HEAP8, h, c, f), {\n                ptr: h,\n                allocated: !0\n              };\n            }, _.stream_ops = m, _;\n          }\n        },\n        SYSCALLS = {\n          DEFAULT_POLLMASK: 5,\n          calculateAt(e, t, r) {\n            if (PATH.isAbs(t)) return t;\n            var a;\n            if (e === -100) a = FS.cwd();else {\n              var o = SYSCALLS.getStreamFromFD(e);\n              a = o.path;\n            }\n            if (t.length == 0) {\n              if (!r) throw new FS.ErrnoError(44);\n              return a;\n            }\n            return a + \"/\" + t;\n          },\n          doStat(e, t, r) {\n            var a = e(t);\n            HEAP32[r >> 2] = a.dev, HEAP32[r + 4 >> 2] = a.mode, HEAPU32[r + 8 >> 2] = a.nlink, HEAP32[r + 12 >> 2] = a.uid, HEAP32[r + 16 >> 2] = a.gid, HEAP32[r + 20 >> 2] = a.rdev, HEAP64[r + 24 >> 3] = BigInt(a.size), HEAP32[r + 32 >> 2] = 4096, HEAP32[r + 36 >> 2] = a.blocks;\n            var o = a.atime.getTime(),\n              s = a.mtime.getTime(),\n              l = a.ctime.getTime();\n            return HEAP64[r + 40 >> 3] = BigInt(Math.floor(o / 1e3)), HEAPU32[r + 48 >> 2] = o % 1e3 * 1e3 * 1e3, HEAP64[r + 56 >> 3] = BigInt(Math.floor(s / 1e3)), HEAPU32[r + 64 >> 2] = s % 1e3 * 1e3 * 1e3, HEAP64[r + 72 >> 3] = BigInt(Math.floor(l / 1e3)), HEAPU32[r + 80 >> 2] = l % 1e3 * 1e3 * 1e3, HEAP64[r + 88 >> 3] = BigInt(a.ino), 0;\n          },\n          doMsync(e, t, r, a, o) {\n            if (!FS.isFile(t.node.mode)) throw new FS.ErrnoError(43);\n            if (a & 2) return 0;\n            var s = HEAPU8.slice(e, e + r);\n            FS.msync(t, s, o, r, a);\n          },\n          getStreamFromFD(e) {\n            var t = FS.getStreamChecked(e);\n            return t;\n          },\n          varargs: void 0,\n          getStr(e) {\n            var t = UTF8ToString(e);\n            return t;\n          }\n        },\n        ___syscall__newselect = function (e, t, r, a, o) {\n          try {\n            for (var s = 0, l = t ? HEAP32[t >> 2] : 0, n = t ? HEAP32[t + 4 >> 2] : 0, _ = r ? HEAP32[r >> 2] : 0, m = r ? HEAP32[r + 4 >> 2] : 0, p = a ? HEAP32[a >> 2] : 0, d = a ? HEAP32[a + 4 >> 2] : 0, g = 0, c = 0, f = 0, u = 0, w = 0, h = 0, S = (t ? HEAP32[t >> 2] : 0) | (r ? HEAP32[r >> 2] : 0) | (a ? HEAP32[a >> 2] : 0), M = (t ? HEAP32[t + 4 >> 2] : 0) | (r ? HEAP32[r + 4 >> 2] : 0) | (a ? HEAP32[a + 4 >> 2] : 0), y = (z, P, U, A) => z < 32 ? P & A : U & A, x = 0; x < e; x++) {\n              var E = 1 << x % 32;\n              if (y(x, S, M, E)) {\n                var b = SYSCALLS.getStreamFromFD(x),\n                  T = SYSCALLS.DEFAULT_POLLMASK;\n                if (b.stream_ops.poll) {\n                  var D = -1;\n                  if (o) {\n                    var X = t ? HEAP32[o >> 2] : 0,\n                      R = t ? HEAP32[o + 4 >> 2] : 0;\n                    D = (X + R / 1e6) * 1e3;\n                  }\n                  T = b.stream_ops.poll(b, D);\n                }\n                T & 1 && y(x, l, n, E) && (x < 32 ? g = g | E : c = c | E, s++), T & 4 && y(x, _, m, E) && (x < 32 ? f = f | E : u = u | E, s++), T & 2 && y(x, p, d, E) && (x < 32 ? w = w | E : h = h | E, s++);\n              }\n            }\n            return t && (HEAP32[t >> 2] = g, HEAP32[t + 4 >> 2] = c), r && (HEAP32[r >> 2] = f, HEAP32[r + 4 >> 2] = u), a && (HEAP32[a >> 2] = w, HEAP32[a + 4 >> 2] = h), s;\n          } catch (z) {\n            if (typeof FS > \"u\" || z.name !== \"ErrnoError\") throw z;\n            return -z.errno;\n          }\n        };\n      ___syscall__newselect.sig = \"iipppp\";\n      var SOCKFS = {\n          websocketArgs: {},\n          callbacks: {},\n          on(e, t) {\n            SOCKFS.callbacks[e] = t;\n          },\n          emit(e, t) {\n            SOCKFS.callbacks[e]?.(t);\n          },\n          mount(e) {\n            return SOCKFS.websocketArgs = Module.websocket || {}, (Module.websocket ?? (Module.websocket = {})).on = SOCKFS.on, FS.createNode(null, \"/\", 16895, 0);\n          },\n          createSocket(e, t, r) {\n            t &= -526337;\n            var a = t == 1;\n            if (a && r && r != 6) throw new FS.ErrnoError(66);\n            var o = {\n                family: e,\n                type: t,\n                protocol: r,\n                server: null,\n                error: null,\n                peers: {},\n                pending: [],\n                recv_queue: [],\n                sock_ops: SOCKFS.websocket_sock_ops\n              },\n              s = SOCKFS.nextname(),\n              l = FS.createNode(SOCKFS.root, s, 49152, 0);\n            l.sock = o;\n            var n = FS.createStream({\n              path: s,\n              node: l,\n              flags: 2,\n              seekable: !1,\n              stream_ops: SOCKFS.stream_ops\n            });\n            return o.stream = n, o;\n          },\n          getSocket(e) {\n            var t = FS.getStream(e);\n            return !t || !FS.isSocket(t.node.mode) ? null : t.node.sock;\n          },\n          stream_ops: {\n            poll(e) {\n              var t = e.node.sock;\n              return t.sock_ops.poll(t);\n            },\n            ioctl(e, t, r) {\n              var a = e.node.sock;\n              return a.sock_ops.ioctl(a, t, r);\n            },\n            read(e, t, r, a, o) {\n              var s = e.node.sock,\n                l = s.sock_ops.recvmsg(s, a);\n              return l ? (t.set(l.buffer, r), l.buffer.length) : 0;\n            },\n            write(e, t, r, a, o) {\n              var s = e.node.sock;\n              return s.sock_ops.sendmsg(s, t, r, a);\n            },\n            close(e) {\n              var t = e.node.sock;\n              t.sock_ops.close(t);\n            }\n          },\n          nextname() {\n            return SOCKFS.nextname.current || (SOCKFS.nextname.current = 0), `socket[${SOCKFS.nextname.current++}]`;\n          },\n          websocket_sock_ops: {\n            createPeer(e, t, r) {\n              var a;\n              if (typeof t == \"object\" && (a = t, t = null, r = null), a) {\n                if (a._socket) t = a._socket.remoteAddress, r = a._socket.remotePort;else {\n                  var o = /ws[s]?:\\/\\/([^:]+):(\\d+)/.exec(a.url);\n                  if (!o) throw new Error(\"WebSocket URL must be in the format ws(s)://address:port\");\n                  t = o[1], r = parseInt(o[2], 10);\n                }\n              } else try {\n                var s = \"ws:#\".replace(\"#\", \"//\"),\n                  l = \"binary\",\n                  n = void 0;\n                if (SOCKFS.websocketArgs.url && (s = SOCKFS.websocketArgs.url), SOCKFS.websocketArgs.subprotocol ? l = SOCKFS.websocketArgs.subprotocol : SOCKFS.websocketArgs.subprotocol === null && (l = \"null\"), s === \"ws://\" || s === \"wss://\") {\n                  var _ = t.split(\"/\");\n                  s = s + _[0] + \":\" + r + \"/\" + _.slice(1).join(\"/\");\n                }\n                l !== \"null\" && (l = l.replace(/^ +| +$/g, \"\").split(/ *, */), n = l);\n                var m;\n                ENVIRONMENT_IS_NODE ? m = require(\"ws\") : m = WebSocket, a = new m(s, n), a.binaryType = \"arraybuffer\";\n              } catch {\n                throw new FS.ErrnoError(23);\n              }\n              var p = {\n                addr: t,\n                port: r,\n                socket: a,\n                msg_send_queue: []\n              };\n              return SOCKFS.websocket_sock_ops.addPeer(e, p), SOCKFS.websocket_sock_ops.handlePeerEvents(e, p), e.type === 2 && typeof e.sport < \"u\" && p.msg_send_queue.push(new Uint8Array([255, 255, 255, 255, 112, 111, 114, 116, (e.sport & 65280) >> 8, e.sport & 255])), p;\n            },\n            getPeer(e, t, r) {\n              return e.peers[t + \":\" + r];\n            },\n            addPeer(e, t) {\n              e.peers[t.addr + \":\" + t.port] = t;\n            },\n            removePeer(e, t) {\n              delete e.peers[t.addr + \":\" + t.port];\n            },\n            handlePeerEvents(e, t) {\n              var r = !0,\n                a = function () {\n                  e.connecting = !1, SOCKFS.emit(\"open\", e.stream.fd);\n                  try {\n                    for (var s = t.msg_send_queue.shift(); s;) t.socket.send(s), s = t.msg_send_queue.shift();\n                  } catch {\n                    t.socket.close();\n                  }\n                };\n              function o(s) {\n                if (typeof s == \"string\") {\n                  var l = new TextEncoder();\n                  s = l.encode(s);\n                } else {\n                  if (assert(s.byteLength !== void 0), s.byteLength == 0) return;\n                  s = new Uint8Array(s);\n                }\n                var n = r;\n                if (r = !1, n && s.length === 10 && s[0] === 255 && s[1] === 255 && s[2] === 255 && s[3] === 255 && s[4] === 112 && s[5] === 111 && s[6] === 114 && s[7] === 116) {\n                  var _ = s[8] << 8 | s[9];\n                  SOCKFS.websocket_sock_ops.removePeer(e, t), t.port = _, SOCKFS.websocket_sock_ops.addPeer(e, t);\n                  return;\n                }\n                e.recv_queue.push({\n                  addr: t.addr,\n                  port: t.port,\n                  data: s\n                }), SOCKFS.emit(\"message\", e.stream.fd);\n              }\n              ENVIRONMENT_IS_NODE ? (t.socket.on(\"open\", a), t.socket.on(\"message\", function (s, l) {\n                l && o(new Uint8Array(s).buffer);\n              }), t.socket.on(\"close\", function () {\n                SOCKFS.emit(\"close\", e.stream.fd);\n              }), t.socket.on(\"error\", function (s) {\n                e.error = 14, SOCKFS.emit(\"error\", [e.stream.fd, e.error, \"ECONNREFUSED: Connection refused\"]);\n              })) : (t.socket.onopen = a, t.socket.onclose = function () {\n                SOCKFS.emit(\"close\", e.stream.fd);\n              }, t.socket.onmessage = function (l) {\n                o(l.data);\n              }, t.socket.onerror = function (s) {\n                e.error = 14, SOCKFS.emit(\"error\", [e.stream.fd, e.error, \"ECONNREFUSED: Connection refused\"]);\n              });\n            },\n            poll(e) {\n              if (e.type === 1 && e.server) return e.pending.length ? 65 : 0;\n              var t = 0,\n                r = e.type === 1 ? SOCKFS.websocket_sock_ops.getPeer(e, e.daddr, e.dport) : null;\n              return (e.recv_queue.length || !r || r && r.socket.readyState === r.socket.CLOSING || r && r.socket.readyState === r.socket.CLOSED) && (t |= 65), (!r || r && r.socket.readyState === r.socket.OPEN) && (t |= 4), (r && r.socket.readyState === r.socket.CLOSING || r && r.socket.readyState === r.socket.CLOSED) && (e.connecting ? t |= 4 : t |= 16), t;\n            },\n            ioctl(e, t, r) {\n              switch (t) {\n                case 21531:\n                  var a = 0;\n                  return e.recv_queue.length && (a = e.recv_queue[0].data.length), HEAP32[r >> 2] = a, 0;\n                default:\n                  return 28;\n              }\n            },\n            close(e) {\n              if (e.server) {\n                try {\n                  e.server.close();\n                } catch {}\n                e.server = null;\n              }\n              for (var t = Object.keys(e.peers), r = 0; r < t.length; r++) {\n                var a = e.peers[t[r]];\n                try {\n                  a.socket.close();\n                } catch {}\n                SOCKFS.websocket_sock_ops.removePeer(e, a);\n              }\n              return 0;\n            },\n            bind(e, t, r) {\n              if (typeof e.saddr < \"u\" || typeof e.sport < \"u\") throw new FS.ErrnoError(28);\n              if (e.saddr = t, e.sport = r, e.type === 2) {\n                e.server && (e.server.close(), e.server = null);\n                try {\n                  e.sock_ops.listen(e, 0);\n                } catch (a) {\n                  if (a.name !== \"ErrnoError\" || a.errno !== 138) throw a;\n                }\n              }\n            },\n            connect(e, t, r) {\n              if (e.server) throw new FS.ErrnoError(138);\n              if (typeof e.daddr < \"u\" && typeof e.dport < \"u\") {\n                var a = SOCKFS.websocket_sock_ops.getPeer(e, e.daddr, e.dport);\n                if (a) throw a.socket.readyState === a.socket.CONNECTING ? new FS.ErrnoError(7) : new FS.ErrnoError(30);\n              }\n              var o = SOCKFS.websocket_sock_ops.createPeer(e, t, r);\n              e.daddr = o.addr, e.dport = o.port, e.connecting = !0;\n            },\n            listen(e, t) {\n              if (!ENVIRONMENT_IS_NODE) throw new FS.ErrnoError(138);\n              if (e.server) throw new FS.ErrnoError(28);\n              var r = require(\"ws\").Server,\n                a = e.saddr;\n              e.server = new r({\n                host: a,\n                port: e.sport\n              }), SOCKFS.emit(\"listen\", e.stream.fd), e.server.on(\"connection\", function (o) {\n                if (e.type === 1) {\n                  var s = SOCKFS.createSocket(e.family, e.type, e.protocol),\n                    l = SOCKFS.websocket_sock_ops.createPeer(s, o);\n                  s.daddr = l.addr, s.dport = l.port, e.pending.push(s), SOCKFS.emit(\"connection\", s.stream.fd);\n                } else SOCKFS.websocket_sock_ops.createPeer(e, o), SOCKFS.emit(\"connection\", e.stream.fd);\n              }), e.server.on(\"close\", function () {\n                SOCKFS.emit(\"close\", e.stream.fd), e.server = null;\n              }), e.server.on(\"error\", function (o) {\n                e.error = 23, SOCKFS.emit(\"error\", [e.stream.fd, e.error, \"EHOSTUNREACH: Host is unreachable\"]);\n              });\n            },\n            accept(e) {\n              if (!e.server || !e.pending.length) throw new FS.ErrnoError(28);\n              var t = e.pending.shift();\n              return t.stream.flags = e.stream.flags, t;\n            },\n            getname(e, t) {\n              var r, a;\n              if (t) {\n                if (e.daddr === void 0 || e.dport === void 0) throw new FS.ErrnoError(53);\n                r = e.daddr, a = e.dport;\n              } else r = e.saddr || 0, a = e.sport || 0;\n              return {\n                addr: r,\n                port: a\n              };\n            },\n            sendmsg(e, t, r, a, o, s) {\n              if (e.type === 2) {\n                if ((o === void 0 || s === void 0) && (o = e.daddr, s = e.dport), o === void 0 || s === void 0) throw new FS.ErrnoError(17);\n              } else o = e.daddr, s = e.dport;\n              var l = SOCKFS.websocket_sock_ops.getPeer(e, o, s);\n              if (e.type === 1 && (!l || l.socket.readyState === l.socket.CLOSING || l.socket.readyState === l.socket.CLOSED)) throw new FS.ErrnoError(53);\n              ArrayBuffer.isView(t) && (r += t.byteOffset, t = t.buffer);\n              var n = t.slice(r, r + a);\n              if (!l || l.socket.readyState !== l.socket.OPEN) return e.type === 2 && (!l || l.socket.readyState === l.socket.CLOSING || l.socket.readyState === l.socket.CLOSED) && (l = SOCKFS.websocket_sock_ops.createPeer(e, o, s)), l.msg_send_queue.push(n), a;\n              try {\n                return l.socket.send(n), a;\n              } catch {\n                throw new FS.ErrnoError(28);\n              }\n            },\n            recvmsg(e, t) {\n              if (e.type === 1 && e.server) throw new FS.ErrnoError(53);\n              var r = e.recv_queue.shift();\n              if (!r) {\n                if (e.type === 1) {\n                  var a = SOCKFS.websocket_sock_ops.getPeer(e, e.daddr, e.dport);\n                  if (!a) throw new FS.ErrnoError(53);\n                  if (a.socket.readyState === a.socket.CLOSING || a.socket.readyState === a.socket.CLOSED) return null;\n                  throw new FS.ErrnoError(6);\n                }\n                throw new FS.ErrnoError(6);\n              }\n              var o = r.data.byteLength || r.data.length,\n                s = r.data.byteOffset || 0,\n                l = r.data.buffer || r.data,\n                n = Math.min(t, o),\n                _ = {\n                  buffer: new Uint8Array(l, s, n),\n                  addr: r.addr,\n                  port: r.port\n                };\n              if (e.type === 1 && n < o) {\n                var m = o - n;\n                r.data = new Uint8Array(l, s + n, m), e.recv_queue.unshift(r);\n              }\n              return _;\n            }\n          }\n        },\n        getSocketFromFD = e => {\n          var t = SOCKFS.getSocket(e);\n          if (!t) throw new FS.ErrnoError(8);\n          return t;\n        },\n        inetNtop4 = e => (e & 255) + \".\" + (e >> 8 & 255) + \".\" + (e >> 16 & 255) + \".\" + (e >> 24 & 255),\n        inetNtop6 = e => {\n          var t = \"\",\n            r = 0,\n            a = 0,\n            o = 0,\n            s = 0,\n            l = 0,\n            n = 0,\n            _ = [e[0] & 65535, e[0] >> 16, e[1] & 65535, e[1] >> 16, e[2] & 65535, e[2] >> 16, e[3] & 65535, e[3] >> 16],\n            m = !0,\n            p = \"\";\n          for (n = 0; n < 5; n++) if (_[n] !== 0) {\n            m = !1;\n            break;\n          }\n          if (m) {\n            if (p = inetNtop4(_[6] | _[7] << 16), _[5] === -1) return t = \"::ffff:\", t += p, t;\n            if (_[5] === 0) return t = \"::\", p === \"0.0.0.0\" && (p = \"\"), p === \"0.0.0.1\" && (p = \"1\"), t += p, t;\n          }\n          for (r = 0; r < 8; r++) _[r] === 0 && (r - o > 1 && (l = 0), o = r, l++), l > a && (a = l, s = r - a + 1);\n          for (r = 0; r < 8; r++) {\n            if (a > 1 && _[r] === 0 && r >= s && r < s + a) {\n              r === s && (t += \":\", s === 0 && (t += \":\"));\n              continue;\n            }\n            t += Number(_ntohs(_[r] & 65535)).toString(16), t += r < 7 ? \":\" : \"\";\n          }\n          return t;\n        },\n        readSockaddr = (e, t) => {\n          var r = HEAP16[e >> 1],\n            a = _ntohs(HEAPU16[e + 2 >> 1]),\n            o;\n          switch (r) {\n            case 2:\n              if (t !== 16) return {\n                errno: 28\n              };\n              o = HEAP32[e + 4 >> 2], o = inetNtop4(o);\n              break;\n            case 10:\n              if (t !== 28) return {\n                errno: 28\n              };\n              o = [HEAP32[e + 8 >> 2], HEAP32[e + 12 >> 2], HEAP32[e + 16 >> 2], HEAP32[e + 20 >> 2]], o = inetNtop6(o);\n              break;\n            default:\n              return {\n                errno: 5\n              };\n          }\n          return {\n            family: r,\n            addr: o,\n            port: a\n          };\n        },\n        inetPton4 = e => {\n          for (var t = e.split(\".\"), r = 0; r < 4; r++) {\n            var a = Number(t[r]);\n            if (isNaN(a)) return null;\n            t[r] = a;\n          }\n          return (t[0] | t[1] << 8 | t[2] << 16 | t[3] << 24) >>> 0;\n        },\n        jstoi_q = e => parseInt(e),\n        inetPton6 = e => {\n          var t,\n            r,\n            a,\n            o,\n            s = /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i,\n            l = [];\n          if (!s.test(e)) return null;\n          if (e === \"::\") return [0, 0, 0, 0, 0, 0, 0, 0];\n          for (e.startsWith(\"::\") ? e = e.replace(\"::\", \"Z:\") : e = e.replace(\"::\", \":Z:\"), e.indexOf(\".\") > 0 ? (e = e.replace(new RegExp(\"[.]\", \"g\"), \":\"), t = e.split(\":\"), t[t.length - 4] = jstoi_q(t[t.length - 4]) + jstoi_q(t[t.length - 3]) * 256, t[t.length - 3] = jstoi_q(t[t.length - 2]) + jstoi_q(t[t.length - 1]) * 256, t = t.slice(0, t.length - 2)) : t = e.split(\":\"), a = 0, o = 0, r = 0; r < t.length; r++) if (typeof t[r] == \"string\") {\n            if (t[r] === \"Z\") {\n              for (o = 0; o < 8 - t.length + 1; o++) l[r + o] = 0;\n              a = o - 1;\n            } else l[r + a] = _htons(parseInt(t[r], 16));\n          } else l[r + a] = t[r];\n          return [l[1] << 16 | l[0], l[3] << 16 | l[2], l[5] << 16 | l[4], l[7] << 16 | l[6]];\n        },\n        DNS = {\n          address_map: {\n            id: 1,\n            addrs: {},\n            names: {}\n          },\n          lookup_name(e) {\n            var t = inetPton4(e);\n            if (t !== null || (t = inetPton6(e), t !== null)) return e;\n            var r;\n            if (DNS.address_map.addrs[e]) r = DNS.address_map.addrs[e];else {\n              var a = DNS.address_map.id++;\n              assert(a < 65535, \"exceeded max address mappings of 65535\"), r = \"172.29.\" + (a & 255) + \".\" + (a & 65280), DNS.address_map.names[r] = e, DNS.address_map.addrs[e] = r;\n            }\n            return r;\n          },\n          lookup_addr(e) {\n            return DNS.address_map.names[e] ? DNS.address_map.names[e] : null;\n          }\n        },\n        getSocketAddress = (e, t) => {\n          var r = readSockaddr(e, t);\n          if (r.errno) throw new FS.ErrnoError(r.errno);\n          return r.addr = DNS.lookup_addr(r.addr) || r.addr, r;\n        };\n      function ___syscall_bind(e, t, r, a, o, s) {\n        try {\n          var l = getSocketFromFD(e),\n            n = getSocketAddress(t, r);\n          return l.sock_ops.bind(l, n.addr, n.port), 0;\n        } catch (_) {\n          if (typeof FS > \"u\" || _.name !== \"ErrnoError\") throw _;\n          return -_.errno;\n        }\n      }\n      ___syscall_bind.sig = \"iippiii\";\n      function ___syscall_chdir(e) {\n        try {\n          return e = SYSCALLS.getStr(e), FS.chdir(e), 0;\n        } catch (t) {\n          if (typeof FS > \"u\" || t.name !== \"ErrnoError\") throw t;\n          return -t.errno;\n        }\n      }\n      ___syscall_chdir.sig = \"ip\";\n      function ___syscall_chmod(e, t) {\n        try {\n          return e = SYSCALLS.getStr(e), FS.chmod(e, t), 0;\n        } catch (r) {\n          if (typeof FS > \"u\" || r.name !== \"ErrnoError\") throw r;\n          return -r.errno;\n        }\n      }\n      ___syscall_chmod.sig = \"ipi\";\n      function ___syscall_connect(e, t, r, a, o, s) {\n        try {\n          var l = getSocketFromFD(e),\n            n = getSocketAddress(t, r);\n          return l.sock_ops.connect(l, n.addr, n.port), 0;\n        } catch (_) {\n          if (typeof FS > \"u\" || _.name !== \"ErrnoError\") throw _;\n          return -_.errno;\n        }\n      }\n      ___syscall_connect.sig = \"iippiii\";\n      function ___syscall_dup(e) {\n        try {\n          var t = SYSCALLS.getStreamFromFD(e);\n          return FS.dupStream(t).fd;\n        } catch (r) {\n          if (typeof FS > \"u\" || r.name !== \"ErrnoError\") throw r;\n          return -r.errno;\n        }\n      }\n      ___syscall_dup.sig = \"ii\";\n      function ___syscall_dup3(e, t, r) {\n        try {\n          var a = SYSCALLS.getStreamFromFD(e);\n          if (a.fd === t) return -28;\n          if (t < 0 || t >= FS.MAX_OPEN_FDS) return -8;\n          var o = FS.getStream(t);\n          return o && FS.close(o), FS.dupStream(a, t).fd;\n        } catch (s) {\n          if (typeof FS > \"u\" || s.name !== \"ErrnoError\") throw s;\n          return -s.errno;\n        }\n      }\n      ___syscall_dup3.sig = \"iiii\";\n      function ___syscall_faccessat(e, t, r, a) {\n        try {\n          if (t = SYSCALLS.getStr(t), t = SYSCALLS.calculateAt(e, t), r & -8) return -28;\n          var o = FS.lookupPath(t, {\n              follow: !0\n            }),\n            s = o.node;\n          if (!s) return -44;\n          var l = \"\";\n          return r & 4 && (l += \"r\"), r & 2 && (l += \"w\"), r & 1 && (l += \"x\"), l && FS.nodePermissions(s, l) ? -2 : 0;\n        } catch (n) {\n          if (typeof FS > \"u\" || n.name !== \"ErrnoError\") throw n;\n          return -n.errno;\n        }\n      }\n      ___syscall_faccessat.sig = \"iipii\";\n      var ___syscall_fadvise64 = (e, t, r, a) => 0;\n      ___syscall_fadvise64.sig = \"iijji\";\n      var INT53_MAX = 9007199254740992,\n        INT53_MIN = -9007199254740992,\n        bigintToI53Checked = e => e < INT53_MIN || e > INT53_MAX ? NaN : Number(e);\n      function ___syscall_fallocate(e, t, r, a) {\n        r = bigintToI53Checked(r), a = bigintToI53Checked(a);\n        try {\n          if (isNaN(r)) return 61;\n          var o = SYSCALLS.getStreamFromFD(e);\n          return FS.allocate(o, r, a), 0;\n        } catch (s) {\n          if (typeof FS > \"u\" || s.name !== \"ErrnoError\") throw s;\n          return -s.errno;\n        }\n      }\n      ___syscall_fallocate.sig = \"iiijj\";\n      var syscallGetVarargI = () => {\n          var e = HEAP32[+SYSCALLS.varargs >> 2];\n          return SYSCALLS.varargs += 4, e;\n        },\n        syscallGetVarargP = syscallGetVarargI;\n      function ___syscall_fcntl64(e, t, r) {\n        SYSCALLS.varargs = r;\n        try {\n          var a = SYSCALLS.getStreamFromFD(e);\n          switch (t) {\n            case 0:\n              {\n                var o = syscallGetVarargI();\n                if (o < 0) return -28;\n                for (; FS.streams[o];) o++;\n                var s;\n                return s = FS.dupStream(a, o), s.fd;\n              }\n            case 1:\n            case 2:\n              return 0;\n            case 3:\n              return a.flags;\n            case 4:\n              {\n                var o = syscallGetVarargI();\n                return a.flags |= o, 0;\n              }\n            case 12:\n              {\n                var o = syscallGetVarargP(),\n                  l = 0;\n                return HEAP16[o + l >> 1] = 2, 0;\n              }\n            case 13:\n            case 14:\n              return 0;\n          }\n          return -28;\n        } catch (n) {\n          if (typeof FS > \"u\" || n.name !== \"ErrnoError\") throw n;\n          return -n.errno;\n        }\n      }\n      ___syscall_fcntl64.sig = \"iiip\";\n      function ___syscall_fdatasync(e) {\n        try {\n          var t = SYSCALLS.getStreamFromFD(e);\n          return 0;\n        } catch (r) {\n          if (typeof FS > \"u\" || r.name !== \"ErrnoError\") throw r;\n          return -r.errno;\n        }\n      }\n      ___syscall_fdatasync.sig = \"ii\";\n      function ___syscall_fstat64(e, t) {\n        try {\n          var r = SYSCALLS.getStreamFromFD(e);\n          return SYSCALLS.doStat(FS.stat, r.path, t);\n        } catch (a) {\n          if (typeof FS > \"u\" || a.name !== \"ErrnoError\") throw a;\n          return -a.errno;\n        }\n      }\n      ___syscall_fstat64.sig = \"iip\";\n      function ___syscall_ftruncate64(e, t) {\n        t = bigintToI53Checked(t);\n        try {\n          return isNaN(t) ? 61 : (FS.ftruncate(e, t), 0);\n        } catch (r) {\n          if (typeof FS > \"u\" || r.name !== \"ErrnoError\") throw r;\n          return -r.errno;\n        }\n      }\n      ___syscall_ftruncate64.sig = \"iij\";\n      var stringToUTF8 = (e, t, r) => stringToUTF8Array(e, HEAPU8, t, r);\n      function ___syscall_getcwd(e, t) {\n        try {\n          if (t === 0) return -28;\n          var r = FS.cwd(),\n            a = lengthBytesUTF8(r) + 1;\n          return t < a ? -68 : (stringToUTF8(r, e, t), a);\n        } catch (o) {\n          if (typeof FS > \"u\" || o.name !== \"ErrnoError\") throw o;\n          return -o.errno;\n        }\n      }\n      ___syscall_getcwd.sig = \"ipp\";\n      function ___syscall_getdents64(e, t, r) {\n        try {\n          var a = SYSCALLS.getStreamFromFD(e);\n          a.getdents || (a.getdents = FS.readdir(a.path));\n          for (var o = 280, s = 0, l = FS.llseek(a, 0, 1), n = Math.floor(l / o), _ = Math.min(a.getdents.length, n + Math.floor(r / o)), m = n; m < _; m++) {\n            var p,\n              d,\n              g = a.getdents[m];\n            if (g === \".\") p = a.node.id, d = 4;else if (g === \"..\") {\n              var c = FS.lookupPath(a.path, {\n                parent: !0\n              });\n              p = c.node.id, d = 4;\n            } else {\n              var f;\n              try {\n                f = FS.lookupNode(a.node, g);\n              } catch (u) {\n                if (u?.errno === 28) continue;\n                throw u;\n              }\n              p = f.id, d = FS.isChrdev(f.mode) ? 2 : FS.isDir(f.mode) ? 4 : FS.isLink(f.mode) ? 10 : 8;\n            }\n            HEAP64[t + s >> 3] = BigInt(p), HEAP64[t + s + 8 >> 3] = BigInt((m + 1) * o), HEAP16[t + s + 16 >> 1] = 280, HEAP8[t + s + 18] = d, stringToUTF8(g, t + s + 19, 256), s += o;\n          }\n          return FS.llseek(a, m * o, 0), s;\n        } catch (u) {\n          if (typeof FS > \"u\" || u.name !== \"ErrnoError\") throw u;\n          return -u.errno;\n        }\n      }\n      ___syscall_getdents64.sig = \"iipp\";\n      var writeSockaddr = (e, t, r, a, o) => {\n        switch (t) {\n          case 2:\n            r = inetPton4(r), zeroMemory(e, 16), o && (HEAP32[o >> 2] = 16), HEAP16[e >> 1] = t, HEAP32[e + 4 >> 2] = r, HEAP16[e + 2 >> 1] = _htons(a);\n            break;\n          case 10:\n            r = inetPton6(r), zeroMemory(e, 28), o && (HEAP32[o >> 2] = 28), HEAP32[e >> 2] = t, HEAP32[e + 8 >> 2] = r[0], HEAP32[e + 12 >> 2] = r[1], HEAP32[e + 16 >> 2] = r[2], HEAP32[e + 20 >> 2] = r[3], HEAP16[e + 2 >> 1] = _htons(a);\n            break;\n          default:\n            return 5;\n        }\n        return 0;\n      };\n      function ___syscall_getsockname(e, t, r, a, o, s) {\n        try {\n          var l = getSocketFromFD(e),\n            n = writeSockaddr(t, l.family, DNS.lookup_name(l.saddr || \"0.0.0.0\"), l.sport, r);\n          return 0;\n        } catch (_) {\n          if (typeof FS > \"u\" || _.name !== \"ErrnoError\") throw _;\n          return -_.errno;\n        }\n      }\n      ___syscall_getsockname.sig = \"iippiii\";\n      function ___syscall_getsockopt(e, t, r, a, o, s) {\n        try {\n          var l = getSocketFromFD(e);\n          return t === 1 && r === 4 ? (HEAP32[a >> 2] = l.error, HEAP32[o >> 2] = 4, l.error = null, 0) : -50;\n        } catch (n) {\n          if (typeof FS > \"u\" || n.name !== \"ErrnoError\") throw n;\n          return -n.errno;\n        }\n      }\n      ___syscall_getsockopt.sig = \"iiiippi\";\n      function ___syscall_ioctl(e, t, r) {\n        SYSCALLS.varargs = r;\n        try {\n          var a = SYSCALLS.getStreamFromFD(e);\n          switch (t) {\n            case 21509:\n              return a.tty ? 0 : -59;\n            case 21505:\n              {\n                if (!a.tty) return -59;\n                if (a.tty.ops.ioctl_tcgets) {\n                  var o = a.tty.ops.ioctl_tcgets(a),\n                    s = syscallGetVarargP();\n                  HEAP32[s >> 2] = o.c_iflag || 0, HEAP32[s + 4 >> 2] = o.c_oflag || 0, HEAP32[s + 8 >> 2] = o.c_cflag || 0, HEAP32[s + 12 >> 2] = o.c_lflag || 0;\n                  for (var l = 0; l < 32; l++) HEAP8[s + l + 17] = o.c_cc[l] || 0;\n                  return 0;\n                }\n                return 0;\n              }\n            case 21510:\n            case 21511:\n            case 21512:\n              return a.tty ? 0 : -59;\n            case 21506:\n            case 21507:\n            case 21508:\n              {\n                if (!a.tty) return -59;\n                if (a.tty.ops.ioctl_tcsets) {\n                  for (var s = syscallGetVarargP(), n = HEAP32[s >> 2], _ = HEAP32[s + 4 >> 2], m = HEAP32[s + 8 >> 2], p = HEAP32[s + 12 >> 2], d = [], l = 0; l < 32; l++) d.push(HEAP8[s + l + 17]);\n                  return a.tty.ops.ioctl_tcsets(a.tty, t, {\n                    c_iflag: n,\n                    c_oflag: _,\n                    c_cflag: m,\n                    c_lflag: p,\n                    c_cc: d\n                  });\n                }\n                return 0;\n              }\n            case 21519:\n              {\n                if (!a.tty) return -59;\n                var s = syscallGetVarargP();\n                return HEAP32[s >> 2] = 0, 0;\n              }\n            case 21520:\n              return a.tty ? -28 : -59;\n            case 21531:\n              {\n                var s = syscallGetVarargP();\n                return FS.ioctl(a, t, s);\n              }\n            case 21523:\n              {\n                if (!a.tty) return -59;\n                if (a.tty.ops.ioctl_tiocgwinsz) {\n                  var g = a.tty.ops.ioctl_tiocgwinsz(a.tty),\n                    s = syscallGetVarargP();\n                  HEAP16[s >> 1] = g[0], HEAP16[s + 2 >> 1] = g[1];\n                }\n                return 0;\n              }\n            case 21524:\n              return a.tty ? 0 : -59;\n            case 21515:\n              return a.tty ? 0 : -59;\n            default:\n              return -28;\n          }\n        } catch (c) {\n          if (typeof FS > \"u\" || c.name !== \"ErrnoError\") throw c;\n          return -c.errno;\n        }\n      }\n      ___syscall_ioctl.sig = \"iiip\";\n      function ___syscall_lstat64(e, t) {\n        try {\n          return e = SYSCALLS.getStr(e), SYSCALLS.doStat(FS.lstat, e, t);\n        } catch (r) {\n          if (typeof FS > \"u\" || r.name !== \"ErrnoError\") throw r;\n          return -r.errno;\n        }\n      }\n      ___syscall_lstat64.sig = \"ipp\";\n      function ___syscall_mkdirat(e, t, r) {\n        try {\n          return t = SYSCALLS.getStr(t), t = SYSCALLS.calculateAt(e, t), FS.mkdir(t, r, 0), 0;\n        } catch (a) {\n          if (typeof FS > \"u\" || a.name !== \"ErrnoError\") throw a;\n          return -a.errno;\n        }\n      }\n      ___syscall_mkdirat.sig = \"iipi\";\n      function ___syscall_newfstatat(e, t, r, a) {\n        try {\n          t = SYSCALLS.getStr(t);\n          var o = a & 256,\n            s = a & 4096;\n          return a = a & -6401, t = SYSCALLS.calculateAt(e, t, s), SYSCALLS.doStat(o ? FS.lstat : FS.stat, t, r);\n        } catch (l) {\n          if (typeof FS > \"u\" || l.name !== \"ErrnoError\") throw l;\n          return -l.errno;\n        }\n      }\n      ___syscall_newfstatat.sig = \"iippi\";\n      function ___syscall_openat(e, t, r, a) {\n        SYSCALLS.varargs = a;\n        try {\n          t = SYSCALLS.getStr(t), t = SYSCALLS.calculateAt(e, t);\n          var o = a ? syscallGetVarargI() : 0;\n          return FS.open(t, r, o).fd;\n        } catch (s) {\n          if (typeof FS > \"u\" || s.name !== \"ErrnoError\") throw s;\n          return -s.errno;\n        }\n      }\n      ___syscall_openat.sig = \"iipip\";\n      var PIPEFS = {\n        BUCKET_BUFFER_SIZE: 8192,\n        mount(e) {\n          return FS.createNode(null, \"/\", 16895, 0);\n        },\n        createPipe() {\n          var e = {\n            buckets: [],\n            refcnt: 2\n          };\n          e.buckets.push({\n            buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),\n            offset: 0,\n            roffset: 0\n          });\n          var t = PIPEFS.nextname(),\n            r = PIPEFS.nextname(),\n            a = FS.createNode(PIPEFS.root, t, 4096, 0),\n            o = FS.createNode(PIPEFS.root, r, 4096, 0);\n          a.pipe = e, o.pipe = e;\n          var s = FS.createStream({\n            path: t,\n            node: a,\n            flags: 0,\n            seekable: !1,\n            stream_ops: PIPEFS.stream_ops\n          });\n          a.stream = s;\n          var l = FS.createStream({\n            path: r,\n            node: o,\n            flags: 1,\n            seekable: !1,\n            stream_ops: PIPEFS.stream_ops\n          });\n          return o.stream = l, {\n            readable_fd: s.fd,\n            writable_fd: l.fd\n          };\n        },\n        stream_ops: {\n          poll(e) {\n            var t = e.node.pipe;\n            if ((e.flags & 2097155) === 1) return 260;\n            if (t.buckets.length > 0) for (var r = 0; r < t.buckets.length; r++) {\n              var a = t.buckets[r];\n              if (a.offset - a.roffset > 0) return 65;\n            }\n            return 0;\n          },\n          ioctl(e, t, r) {\n            return 28;\n          },\n          fsync(e) {\n            return 28;\n          },\n          read(e, t, r, a, o) {\n            for (var s = e.node.pipe, l = 0, n = 0; n < s.buckets.length; n++) {\n              var _ = s.buckets[n];\n              l += _.offset - _.roffset;\n            }\n            var m = t.subarray(r, r + a);\n            if (a <= 0) return 0;\n            if (l == 0) throw new FS.ErrnoError(6);\n            for (var p = Math.min(l, a), d = p, g = 0, n = 0; n < s.buckets.length; n++) {\n              var c = s.buckets[n],\n                f = c.offset - c.roffset;\n              if (p <= f) {\n                var u = c.buffer.subarray(c.roffset, c.offset);\n                p < f ? (u = u.subarray(0, p), c.roffset += p) : g++, m.set(u);\n                break;\n              } else {\n                var u = c.buffer.subarray(c.roffset, c.offset);\n                m.set(u), m = m.subarray(u.byteLength), p -= u.byteLength, g++;\n              }\n            }\n            return g && g == s.buckets.length && (g--, s.buckets[g].offset = 0, s.buckets[g].roffset = 0), s.buckets.splice(0, g), d;\n          },\n          write(e, t, r, a, o) {\n            var s = e.node.pipe,\n              l = t.subarray(r, r + a),\n              n = l.byteLength;\n            if (n <= 0) return 0;\n            var _ = null;\n            s.buckets.length == 0 ? (_ = {\n              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),\n              offset: 0,\n              roffset: 0\n            }, s.buckets.push(_)) : _ = s.buckets[s.buckets.length - 1], assert(_.offset <= PIPEFS.BUCKET_BUFFER_SIZE);\n            var m = PIPEFS.BUCKET_BUFFER_SIZE - _.offset;\n            if (m >= n) return _.buffer.set(l, _.offset), _.offset += n, n;\n            m > 0 && (_.buffer.set(l.subarray(0, m), _.offset), _.offset += m, l = l.subarray(m, l.byteLength));\n            for (var p = l.byteLength / PIPEFS.BUCKET_BUFFER_SIZE | 0, d = l.byteLength % PIPEFS.BUCKET_BUFFER_SIZE, g = 0; g < p; g++) {\n              var c = {\n                buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),\n                offset: PIPEFS.BUCKET_BUFFER_SIZE,\n                roffset: 0\n              };\n              s.buckets.push(c), c.buffer.set(l.subarray(0, PIPEFS.BUCKET_BUFFER_SIZE)), l = l.subarray(PIPEFS.BUCKET_BUFFER_SIZE, l.byteLength);\n            }\n            if (d > 0) {\n              var c = {\n                buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),\n                offset: l.byteLength,\n                roffset: 0\n              };\n              s.buckets.push(c), c.buffer.set(l);\n            }\n            return n;\n          },\n          close(e) {\n            var t = e.node.pipe;\n            t.refcnt--, t.refcnt === 0 && (t.buckets = null);\n          }\n        },\n        nextname() {\n          return PIPEFS.nextname.current || (PIPEFS.nextname.current = 0), \"pipe[\" + PIPEFS.nextname.current++ + \"]\";\n        }\n      };\n      function ___syscall_pipe(e) {\n        try {\n          if (e == 0) throw new FS.ErrnoError(21);\n          var t = PIPEFS.createPipe();\n          return HEAP32[e >> 2] = t.readable_fd, HEAP32[e + 4 >> 2] = t.writable_fd, 0;\n        } catch (r) {\n          if (typeof FS > \"u\" || r.name !== \"ErrnoError\") throw r;\n          return -r.errno;\n        }\n      }\n      ___syscall_pipe.sig = \"ip\";\n      function ___syscall_poll(e, t, r) {\n        try {\n          for (var a = 0, o = 0; o < t; o++) {\n            var s = e + 8 * o,\n              l = HEAP32[s >> 2],\n              n = HEAP16[s + 4 >> 1],\n              _ = 32,\n              m = FS.getStream(l);\n            m && (_ = SYSCALLS.DEFAULT_POLLMASK, m.stream_ops.poll && (_ = m.stream_ops.poll(m, -1))), _ &= n | 8 | 16, _ && a++, HEAP16[s + 6 >> 1] = _;\n          }\n          return a;\n        } catch (p) {\n          if (typeof FS > \"u\" || p.name !== \"ErrnoError\") throw p;\n          return -p.errno;\n        }\n      }\n      ___syscall_poll.sig = \"ipii\";\n      function ___syscall_readlinkat(e, t, r, a) {\n        try {\n          if (t = SYSCALLS.getStr(t), t = SYSCALLS.calculateAt(e, t), a <= 0) return -28;\n          var o = FS.readlink(t),\n            s = Math.min(a, lengthBytesUTF8(o)),\n            l = HEAP8[r + s];\n          return stringToUTF8(o, r, a + 1), HEAP8[r + s] = l, s;\n        } catch (n) {\n          if (typeof FS > \"u\" || n.name !== \"ErrnoError\") throw n;\n          return -n.errno;\n        }\n      }\n      ___syscall_readlinkat.sig = \"iippp\";\n      function ___syscall_recvfrom(e, t, r, a, o, s) {\n        try {\n          var l = getSocketFromFD(e),\n            n = l.sock_ops.recvmsg(l, r);\n          if (!n) return 0;\n          if (o) var _ = writeSockaddr(o, l.family, DNS.lookup_name(n.addr), n.port, s);\n          return HEAPU8.set(n.buffer, t), n.buffer.byteLength;\n        } catch (m) {\n          if (typeof FS > \"u\" || m.name !== \"ErrnoError\") throw m;\n          return -m.errno;\n        }\n      }\n      ___syscall_recvfrom.sig = \"iippipp\";\n      function ___syscall_renameat(e, t, r, a) {\n        try {\n          return t = SYSCALLS.getStr(t), a = SYSCALLS.getStr(a), t = SYSCALLS.calculateAt(e, t), a = SYSCALLS.calculateAt(r, a), FS.rename(t, a), 0;\n        } catch (o) {\n          if (typeof FS > \"u\" || o.name !== \"ErrnoError\") throw o;\n          return -o.errno;\n        }\n      }\n      ___syscall_renameat.sig = \"iipip\";\n      function ___syscall_rmdir(e) {\n        try {\n          return e = SYSCALLS.getStr(e), FS.rmdir(e), 0;\n        } catch (t) {\n          if (typeof FS > \"u\" || t.name !== \"ErrnoError\") throw t;\n          return -t.errno;\n        }\n      }\n      ___syscall_rmdir.sig = \"ip\";\n      function ___syscall_sendto(e, t, r, a, o, s) {\n        try {\n          var l = getSocketFromFD(e);\n          if (!o) return FS.write(l.stream, HEAP8, t, r);\n          var n = getSocketAddress(o, s);\n          return l.sock_ops.sendmsg(l, HEAP8, t, r, n.addr, n.port);\n        } catch (_) {\n          if (typeof FS > \"u\" || _.name !== \"ErrnoError\") throw _;\n          return -_.errno;\n        }\n      }\n      ___syscall_sendto.sig = \"iippipp\";\n      function ___syscall_socket(e, t, r) {\n        try {\n          var a = SOCKFS.createSocket(e, t, r);\n          return a.stream.fd;\n        } catch (o) {\n          if (typeof FS > \"u\" || o.name !== \"ErrnoError\") throw o;\n          return -o.errno;\n        }\n      }\n      ___syscall_socket.sig = \"iiiiiii\";\n      function ___syscall_stat64(e, t) {\n        try {\n          return e = SYSCALLS.getStr(e), SYSCALLS.doStat(FS.stat, e, t);\n        } catch (r) {\n          if (typeof FS > \"u\" || r.name !== \"ErrnoError\") throw r;\n          return -r.errno;\n        }\n      }\n      ___syscall_stat64.sig = \"ipp\";\n      function ___syscall_symlinkat(e, t, r) {\n        try {\n          return e = SYSCALLS.getStr(e), r = SYSCALLS.getStr(r), r = SYSCALLS.calculateAt(t, r), FS.symlink(e, r), 0;\n        } catch (a) {\n          if (typeof FS > \"u\" || a.name !== \"ErrnoError\") throw a;\n          return -a.errno;\n        }\n      }\n      ___syscall_symlinkat.sig = \"ipip\";\n      function ___syscall_truncate64(e, t) {\n        t = bigintToI53Checked(t);\n        try {\n          return isNaN(t) ? 61 : (e = SYSCALLS.getStr(e), FS.truncate(e, t), 0);\n        } catch (r) {\n          if (typeof FS > \"u\" || r.name !== \"ErrnoError\") throw r;\n          return -r.errno;\n        }\n      }\n      ___syscall_truncate64.sig = \"ipj\";\n      function ___syscall_unlinkat(e, t, r) {\n        try {\n          return t = SYSCALLS.getStr(t), t = SYSCALLS.calculateAt(e, t), r === 0 ? FS.unlink(t) : r === 512 ? FS.rmdir(t) : abort(\"Invalid flags passed to unlinkat\"), 0;\n        } catch (a) {\n          if (typeof FS > \"u\" || a.name !== \"ErrnoError\") throw a;\n          return -a.errno;\n        }\n      }\n      ___syscall_unlinkat.sig = \"iipi\";\n      var ___table_base = new WebAssembly.Global({\n          value: \"i32\",\n          mutable: !1\n        }, 1),\n        __abort_js = () => abort(\"\");\n      __abort_js.sig = \"v\";\n      var ENV = {},\n        stackAlloc = e => __emscripten_stack_alloc(e),\n        stringToUTF8OnStack = e => {\n          var t = lengthBytesUTF8(e) + 1,\n            r = stackAlloc(t);\n          return stringToUTF8(e, r, t), r;\n        },\n        dlSetError = e => {\n          var t = stackSave(),\n            r = stringToUTF8OnStack(e);\n          ___dl_seterr(r, 0), stackRestore(t);\n        },\n        dlopenInternal = (e, t) => {\n          var r = UTF8ToString(e + 36),\n            a = HEAP32[e + 4 >> 2];\n          r = PATH.normalize(r);\n          var o = !!(a & 256),\n            s = o ? null : {},\n            l = {\n              global: o,\n              nodelete: !!(a & 4096),\n              loadAsync: t.loadAsync\n            };\n          if (t.loadAsync) return loadDynamicLibrary(r, l, s, e);\n          try {\n            return loadDynamicLibrary(r, l, s, e);\n          } catch (n) {\n            return dlSetError(`Could not load dynamic lib: ${r}\n${n}`), 0;\n          }\n        },\n        __dlopen_js = e => dlopenInternal(e, {\n          loadAsync: !1\n        });\n      __dlopen_js.sig = \"pp\";\n      var __dlsym_js = (e, t, r) => {\n        t = UTF8ToString(t);\n        var a,\n          o,\n          s = LDSO.loadedLibsByHandle[e];\n        if (!s.exports.hasOwnProperty(t) || s.exports[t].stub) return dlSetError(`Tried to lookup unknown symbol \"${t}\" in dynamic lib: ${s.name}`), 0;\n        if (o = Object.keys(s.exports).indexOf(t), a = s.exports[t], typeof a == \"function\") {\n          var l = getFunctionAddress(a);\n          l ? a = l : (a = addFunction(a, a.sig), HEAPU32[r >> 2] = o);\n        }\n        return a;\n      };\n      __dlsym_js.sig = \"pppp\";\n      var __emscripten_memcpy_js = (e, t, r) => HEAPU8.copyWithin(e, t, t + r);\n      __emscripten_memcpy_js.sig = \"vppp\";\n      var runtimeKeepaliveCounter = 0,\n        __emscripten_runtime_keepalive_clear = () => {\n          noExitRuntime = !1, runtimeKeepaliveCounter = 0;\n        };\n      __emscripten_runtime_keepalive_clear.sig = \"v\";\n      var __emscripten_system = e => {\n        if (ENVIRONMENT_IS_NODE) {\n          if (!e) return 1;\n          var t = UTF8ToString(e);\n          if (!t.length) return 0;\n          var r = require(\"child_process\"),\n            a = r.spawnSync(t, [], {\n              shell: !0,\n              stdio: \"inherit\"\n            }),\n            o = (l, n) => l << 8 | n;\n          if (a.status === null) {\n            var s = l => {\n              switch (l) {\n                case \"SIGHUP\":\n                  return 1;\n                case \"SIGQUIT\":\n                  return 3;\n                case \"SIGFPE\":\n                  return 8;\n                case \"SIGKILL\":\n                  return 9;\n                case \"SIGALRM\":\n                  return 14;\n                case \"SIGTERM\":\n                  return 15;\n                default:\n                  return 2;\n              }\n            };\n            return o(0, s(a.signal));\n          }\n          return o(a.status, 0);\n        }\n        return e ? -52 : 0;\n      };\n      __emscripten_system.sig = \"ip\";\n      var __emscripten_throw_longjmp = () => {\n        throw 1 / 0;\n      };\n      __emscripten_throw_longjmp.sig = \"v\";\n      function __gmtime_js(e, t) {\n        e = bigintToI53Checked(e);\n        var r = new Date(e * 1e3);\n        HEAP32[t >> 2] = r.getUTCSeconds(), HEAP32[t + 4 >> 2] = r.getUTCMinutes(), HEAP32[t + 8 >> 2] = r.getUTCHours(), HEAP32[t + 12 >> 2] = r.getUTCDate(), HEAP32[t + 16 >> 2] = r.getUTCMonth(), HEAP32[t + 20 >> 2] = r.getUTCFullYear() - 1900, HEAP32[t + 24 >> 2] = r.getUTCDay();\n        var a = Date.UTC(r.getUTCFullYear(), 0, 1, 0, 0, 0, 0),\n          o = (r.getTime() - a) / (1e3 * 60 * 60 * 24) | 0;\n        HEAP32[t + 28 >> 2] = o;\n      }\n      __gmtime_js.sig = \"vjp\";\n      var isLeapYear = e => e % 4 === 0 && (e % 100 !== 0 || e % 400 === 0),\n        MONTH_DAYS_LEAP_CUMULATIVE = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335],\n        MONTH_DAYS_REGULAR_CUMULATIVE = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n        ydayFromDate = e => {\n          var t = isLeapYear(e.getFullYear()),\n            r = t ? MONTH_DAYS_LEAP_CUMULATIVE : MONTH_DAYS_REGULAR_CUMULATIVE,\n            a = r[e.getMonth()] + e.getDate() - 1;\n          return a;\n        };\n      function __localtime_js(e, t) {\n        e = bigintToI53Checked(e);\n        var r = new Date(e * 1e3);\n        HEAP32[t >> 2] = r.getSeconds(), HEAP32[t + 4 >> 2] = r.getMinutes(), HEAP32[t + 8 >> 2] = r.getHours(), HEAP32[t + 12 >> 2] = r.getDate(), HEAP32[t + 16 >> 2] = r.getMonth(), HEAP32[t + 20 >> 2] = r.getFullYear() - 1900, HEAP32[t + 24 >> 2] = r.getDay();\n        var a = ydayFromDate(r) | 0;\n        HEAP32[t + 28 >> 2] = a, HEAP32[t + 36 >> 2] = -(r.getTimezoneOffset() * 60);\n        var o = new Date(r.getFullYear(), 0, 1),\n          s = new Date(r.getFullYear(), 6, 1).getTimezoneOffset(),\n          l = o.getTimezoneOffset(),\n          n = (s != l && r.getTimezoneOffset() == Math.min(l, s)) | 0;\n        HEAP32[t + 32 >> 2] = n;\n      }\n      __localtime_js.sig = \"vjp\";\n      function __mmap_js(e, t, r, a, o, s, l) {\n        o = bigintToI53Checked(o);\n        try {\n          if (isNaN(o)) return 61;\n          var n = SYSCALLS.getStreamFromFD(a),\n            _ = FS.mmap(n, e, o, t, r),\n            m = _.ptr;\n          return HEAP32[s >> 2] = _.allocated, HEAPU32[l >> 2] = m, 0;\n        } catch (p) {\n          if (typeof FS > \"u\" || p.name !== \"ErrnoError\") throw p;\n          return -p.errno;\n        }\n      }\n      __mmap_js.sig = \"ipiiijpp\";\n      function __munmap_js(e, t, r, a, o, s) {\n        s = bigintToI53Checked(s);\n        try {\n          var l = SYSCALLS.getStreamFromFD(o);\n          r & 2 && SYSCALLS.doMsync(e, l, t, a, s);\n        } catch (n) {\n          if (typeof FS > \"u\" || n.name !== \"ErrnoError\") throw n;\n          return -n.errno;\n        }\n      }\n      __munmap_js.sig = \"ippiiij\";\n      var timers = {},\n        handleException = e => {\n          if (e instanceof ExitStatus || e == \"unwind\") return EXITSTATUS;\n          quit_(1, e);\n        },\n        keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0,\n        _proc_exit = e => {\n          EXITSTATUS = e, keepRuntimeAlive() || (Module.onExit?.(e), ABORT = !0), quit_(e, new ExitStatus(e));\n        };\n      _proc_exit.sig = \"vi\";\n      var exitJS = (e, t) => {\n          EXITSTATUS = e, _proc_exit(e);\n        },\n        _exit = exitJS;\n      _exit.sig = \"vi\";\n      var maybeExit = () => {\n          if (!keepRuntimeAlive()) try {\n            _exit(EXITSTATUS);\n          } catch (e) {\n            handleException(e);\n          }\n        },\n        callUserCallback = e => {\n          if (!ABORT) try {\n            e(), maybeExit();\n          } catch (t) {\n            handleException(t);\n          }\n        },\n        _emscripten_get_now = () => performance.now();\n      _emscripten_get_now.sig = \"d\";\n      var __setitimer_js = (e, t) => {\n        if (timers[e] && (clearTimeout(timers[e].id), delete timers[e]), !t) return 0;\n        var r = setTimeout(() => {\n          delete timers[e], callUserCallback(() => __emscripten_timeout(e, _emscripten_get_now()));\n        }, t);\n        return timers[e] = {\n          id: r,\n          timeout_ms: t\n        }, 0;\n      };\n      __setitimer_js.sig = \"iid\";\n      var __tzset_js = (e, t, r, a) => {\n        var o = new Date().getFullYear(),\n          s = new Date(o, 0, 1),\n          l = new Date(o, 6, 1),\n          n = s.getTimezoneOffset(),\n          _ = l.getTimezoneOffset(),\n          m = Math.max(n, _);\n        HEAPU32[e >> 2] = m * 60, HEAP32[t >> 2] = +(n != _);\n        var p = c => {\n            var f = c >= 0 ? \"-\" : \"+\",\n              u = Math.abs(c),\n              w = String(Math.floor(u / 60)).padStart(2, \"0\"),\n              h = String(u % 60).padStart(2, \"0\");\n            return `UTC${f}${w}${h}`;\n          },\n          d = p(n),\n          g = p(_);\n        _ < n ? (stringToUTF8(d, r, 17), stringToUTF8(g, a, 17)) : (stringToUTF8(d, a, 17), stringToUTF8(g, r, 17));\n      };\n      __tzset_js.sig = \"vpppp\";\n      var _emscripten_date_now = () => Date.now();\n      _emscripten_date_now.sig = \"d\";\n      var nowIsMonotonic = 1,\n        checkWasiClock = e => e >= 0 && e <= 3;\n      function _clock_time_get(e, t, r) {\n        if (t = bigintToI53Checked(t), !checkWasiClock(e)) return 28;\n        var a;\n        if (e === 0) a = _emscripten_date_now();else if (nowIsMonotonic) a = _emscripten_get_now();else return 52;\n        var o = Math.round(a * 1e3 * 1e3);\n        return HEAP64[r >> 3] = BigInt(o), 0;\n      }\n      _clock_time_get.sig = \"iijp\";\n      var readEmAsmArgsArray = [],\n        readEmAsmArgs = (e, t) => {\n          readEmAsmArgsArray.length = 0;\n          for (var r; r = HEAPU8[e++];) {\n            var a = r != 105;\n            a &= r != 112, t += a && t % 8 ? 4 : 0, readEmAsmArgsArray.push(r == 112 ? HEAPU32[t >> 2] : r == 106 ? HEAP64[t >> 3] : r == 105 ? HEAP32[t >> 2] : HEAPF64[t >> 3]), t += a ? 8 : 4;\n          }\n          return readEmAsmArgsArray;\n        },\n        runEmAsmFunction = (e, t, r) => {\n          var a = readEmAsmArgs(t, r);\n          return ASM_CONSTS[e](...a);\n        },\n        _emscripten_asm_const_int = (e, t, r) => runEmAsmFunction(e, t, r);\n      _emscripten_asm_const_int.sig = \"ippp\";\n      var _emscripten_force_exit = e => {\n        __emscripten_runtime_keepalive_clear(), _exit(e);\n      };\n      _emscripten_force_exit.sig = \"vi\";\n      var getHeapMax = () => 2147483648,\n        growMemory = e => {\n          var t = wasmMemory.buffer,\n            r = (e - t.byteLength + 65535) / 65536 | 0;\n          try {\n            return wasmMemory.grow(r), updateMemoryViews(), 1;\n          } catch {}\n        },\n        _emscripten_resize_heap = e => {\n          var t = HEAPU8.length;\n          e >>>= 0;\n          var r = getHeapMax();\n          if (e > r) return !1;\n          for (var a = 1; a <= 4; a *= 2) {\n            var o = t * (1 + .2 / a);\n            o = Math.min(o, e + 100663296);\n            var s = Math.min(r, alignMemory(Math.max(e, o), 65536)),\n              l = growMemory(s);\n            if (l) return !0;\n          }\n          return !1;\n        };\n      _emscripten_resize_heap.sig = \"ip\";\n      var _emscripten_set_main_loop_timing = (e, t) => {\n        if (MainLoop.timingMode = e, MainLoop.timingValue = t, !MainLoop.func) return 1;\n        if (MainLoop.running || (MainLoop.running = !0), e == 0) MainLoop.scheduler = function () {\n          var l = Math.max(0, MainLoop.tickStartTime + t - _emscripten_get_now()) | 0;\n          setTimeout(MainLoop.runner, l);\n        }, MainLoop.method = \"timeout\";else if (e == 1) MainLoop.scheduler = function () {\n          MainLoop.requestAnimationFrame(MainLoop.runner);\n        }, MainLoop.method = \"rAF\";else if (e == 2) {\n          if (typeof MainLoop.setImmediate > \"u\") if (typeof setImmediate > \"u\") {\n            var r = [],\n              a = \"setimmediate\",\n              o = s => {\n                (s.data === a || s.data.target === a) && (s.stopPropagation(), r.shift()());\n              };\n            addEventListener(\"message\", o, !0), MainLoop.setImmediate = s => {\n              r.push(s), ENVIRONMENT_IS_WORKER ? (Module.setImmediates ?? (Module.setImmediates = []), Module.setImmediates.push(s), postMessage({\n                target: a\n              })) : postMessage(a, \"*\");\n            };\n          } else MainLoop.setImmediate = setImmediate;\n          MainLoop.scheduler = function () {\n            MainLoop.setImmediate(MainLoop.runner);\n          }, MainLoop.method = \"immediate\";\n        }\n        return 0;\n      };\n      _emscripten_set_main_loop_timing.sig = \"iii\";\n      var MainLoop = {\n          running: !1,\n          scheduler: null,\n          method: \"\",\n          currentlyRunningMainloop: 0,\n          func: null,\n          arg: 0,\n          timingMode: 0,\n          timingValue: 0,\n          currentFrameNumber: 0,\n          queue: [],\n          preMainLoop: [],\n          postMainLoop: [],\n          pause() {\n            MainLoop.scheduler = null, MainLoop.currentlyRunningMainloop++;\n          },\n          resume() {\n            MainLoop.currentlyRunningMainloop++;\n            var e = MainLoop.timingMode,\n              t = MainLoop.timingValue,\n              r = MainLoop.func;\n            MainLoop.func = null, setMainLoop(r, 0, !1, MainLoop.arg, !0), _emscripten_set_main_loop_timing(e, t), MainLoop.scheduler();\n          },\n          updateStatus() {\n            if (Module.setStatus) {\n              var e = Module.statusMessage || \"Please wait...\",\n                t = MainLoop.remainingBlockers ?? 0,\n                r = MainLoop.expectedBlockers ?? 0;\n              t ? t < r ? Module.setStatus(\"{message} ({expected - remaining}/{expected})\") : Module.setStatus(e) : Module.setStatus(\"\");\n            }\n          },\n          init() {\n            Module.preMainLoop && MainLoop.preMainLoop.push(Module.preMainLoop), Module.postMainLoop && MainLoop.postMainLoop.push(Module.postMainLoop);\n          },\n          runIter(e) {\n            if (!ABORT) {\n              for (var t of MainLoop.preMainLoop) if (t() === !1) return;\n              callUserCallback(e);\n              for (var r of MainLoop.postMainLoop) r();\n            }\n          },\n          nextRAF: 0,\n          fakeRequestAnimationFrame(e) {\n            var t = Date.now();\n            if (MainLoop.nextRAF === 0) MainLoop.nextRAF = t + 1e3 / 60;else for (; t + 2 >= MainLoop.nextRAF;) MainLoop.nextRAF += 1e3 / 60;\n            var r = Math.max(MainLoop.nextRAF - t, 0);\n            setTimeout(e, r);\n          },\n          requestAnimationFrame(e) {\n            if (typeof requestAnimationFrame == \"function\") {\n              requestAnimationFrame(e);\n              return;\n            }\n            var t = MainLoop.fakeRequestAnimationFrame;\n            t(e);\n          }\n        },\n        setMainLoop = (e, t, r, a, o) => {\n          MainLoop.func = e, MainLoop.arg = a;\n          var s = MainLoop.currentlyRunningMainloop;\n          function l() {\n            return s < MainLoop.currentlyRunningMainloop ? (maybeExit(), !1) : !0;\n          }\n          if (MainLoop.running = !1, MainLoop.runner = function () {\n            if (!ABORT) {\n              if (MainLoop.queue.length > 0) {\n                var _ = Date.now(),\n                  m = MainLoop.queue.shift();\n                if (m.func(m.arg), MainLoop.remainingBlockers) {\n                  var p = MainLoop.remainingBlockers,\n                    d = p % 1 == 0 ? p - 1 : Math.floor(p);\n                  m.counted ? MainLoop.remainingBlockers = d : (d = d + .5, MainLoop.remainingBlockers = (8 * p + d) / 9);\n                }\n                if (MainLoop.updateStatus(), !l()) return;\n                setTimeout(MainLoop.runner, 0);\n                return;\n              }\n              if (l()) {\n                if (MainLoop.currentFrameNumber = MainLoop.currentFrameNumber + 1 | 0, MainLoop.timingMode == 1 && MainLoop.timingValue > 1 && MainLoop.currentFrameNumber % MainLoop.timingValue != 0) {\n                  MainLoop.scheduler();\n                  return;\n                } else MainLoop.timingMode == 0 && (MainLoop.tickStartTime = _emscripten_get_now());\n                MainLoop.runIter(e), l() && MainLoop.scheduler();\n              }\n            }\n          }, o || (t && t > 0 ? _emscripten_set_main_loop_timing(0, 1e3 / t) : _emscripten_set_main_loop_timing(1, 1), MainLoop.scheduler()), r) throw \"unwind\";\n        },\n        _emscripten_set_main_loop = (e, t, r) => {\n          var a = getWasmTableEntry(e);\n          setMainLoop(a, t, r);\n        };\n      _emscripten_set_main_loop.sig = \"vpii\";\n      var getExecutableName = () => thisProgram || \"./this.program\",\n        getEnvStrings = () => {\n          if (!getEnvStrings.strings) {\n            var e = (typeof navigator == \"object\" && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\",\n              t = {\n                USER: \"web_user\",\n                LOGNAME: \"web_user\",\n                PATH: \"/\",\n                PWD: \"/\",\n                HOME: \"/home/web_user\",\n                LANG: e,\n                _: getExecutableName()\n              };\n            for (var r in ENV) ENV[r] === void 0 ? delete t[r] : t[r] = ENV[r];\n            var a = [];\n            for (var r in t) a.push(`${r}=${t[r]}`);\n            getEnvStrings.strings = a;\n          }\n          return getEnvStrings.strings;\n        },\n        stringToAscii = (e, t) => {\n          for (var r = 0; r < e.length; ++r) HEAP8[t++] = e.charCodeAt(r);\n          HEAP8[t] = 0;\n        },\n        _environ_get = (e, t) => {\n          var r = 0;\n          return getEnvStrings().forEach((a, o) => {\n            var s = t + r;\n            HEAPU32[e + o * 4 >> 2] = s, stringToAscii(a, s), r += a.length + 1;\n          }), 0;\n        };\n      _environ_get.sig = \"ipp\";\n      var _environ_sizes_get = (e, t) => {\n        var r = getEnvStrings();\n        HEAPU32[e >> 2] = r.length;\n        var a = 0;\n        return r.forEach(o => a += o.length + 1), HEAPU32[t >> 2] = a, 0;\n      };\n      _environ_sizes_get.sig = \"ipp\";\n      function _fd_close(e) {\n        try {\n          var t = SYSCALLS.getStreamFromFD(e);\n          return FS.close(t), 0;\n        } catch (r) {\n          if (typeof FS > \"u\" || r.name !== \"ErrnoError\") throw r;\n          return r.errno;\n        }\n      }\n      _fd_close.sig = \"ii\";\n      function _fd_fdstat_get(e, t) {\n        try {\n          var r = 0,\n            a = 0,\n            o = 0,\n            s = SYSCALLS.getStreamFromFD(e),\n            l = s.tty ? 2 : FS.isDir(s.mode) ? 3 : FS.isLink(s.mode) ? 7 : 4;\n          return HEAP8[t] = l, HEAP16[t + 2 >> 1] = o, HEAP64[t + 8 >> 3] = BigInt(r), HEAP64[t + 16 >> 3] = BigInt(a), 0;\n        } catch (n) {\n          if (typeof FS > \"u\" || n.name !== \"ErrnoError\") throw n;\n          return n.errno;\n        }\n      }\n      _fd_fdstat_get.sig = \"iip\";\n      var doReadv = (e, t, r, a) => {\n        for (var o = 0, s = 0; s < r; s++) {\n          var l = HEAPU32[t >> 2],\n            n = HEAPU32[t + 4 >> 2];\n          t += 8;\n          var _ = FS.read(e, HEAP8, l, n, a);\n          if (_ < 0) return -1;\n          if (o += _, _ < n) break;\n          typeof a < \"u\" && (a += _);\n        }\n        return o;\n      };\n      function _fd_pread(e, t, r, a, o) {\n        a = bigintToI53Checked(a);\n        try {\n          if (isNaN(a)) return 61;\n          var s = SYSCALLS.getStreamFromFD(e),\n            l = doReadv(s, t, r, a);\n          return HEAPU32[o >> 2] = l, 0;\n        } catch (n) {\n          if (typeof FS > \"u\" || n.name !== \"ErrnoError\") throw n;\n          return n.errno;\n        }\n      }\n      _fd_pread.sig = \"iippjp\";\n      var doWritev = (e, t, r, a) => {\n        for (var o = 0, s = 0; s < r; s++) {\n          var l = HEAPU32[t >> 2],\n            n = HEAPU32[t + 4 >> 2];\n          t += 8;\n          var _ = FS.write(e, HEAP8, l, n, a);\n          if (_ < 0) return -1;\n          if (o += _, _ < n) break;\n          typeof a < \"u\" && (a += _);\n        }\n        return o;\n      };\n      function _fd_pwrite(e, t, r, a, o) {\n        a = bigintToI53Checked(a);\n        try {\n          if (isNaN(a)) return 61;\n          var s = SYSCALLS.getStreamFromFD(e),\n            l = doWritev(s, t, r, a);\n          return HEAPU32[o >> 2] = l, 0;\n        } catch (n) {\n          if (typeof FS > \"u\" || n.name !== \"ErrnoError\") throw n;\n          return n.errno;\n        }\n      }\n      _fd_pwrite.sig = \"iippjp\";\n      function _fd_read(e, t, r, a) {\n        try {\n          var o = SYSCALLS.getStreamFromFD(e),\n            s = doReadv(o, t, r);\n          return HEAPU32[a >> 2] = s, 0;\n        } catch (l) {\n          if (typeof FS > \"u\" || l.name !== \"ErrnoError\") throw l;\n          return l.errno;\n        }\n      }\n      _fd_read.sig = \"iippp\";\n      function _fd_seek(e, t, r, a) {\n        t = bigintToI53Checked(t);\n        try {\n          if (isNaN(t)) return 61;\n          var o = SYSCALLS.getStreamFromFD(e);\n          return FS.llseek(o, t, r), HEAP64[a >> 3] = BigInt(o.position), o.getdents && t === 0 && r === 0 && (o.getdents = null), 0;\n        } catch (s) {\n          if (typeof FS > \"u\" || s.name !== \"ErrnoError\") throw s;\n          return s.errno;\n        }\n      }\n      _fd_seek.sig = \"iijip\";\n      function _fd_sync(e) {\n        try {\n          var t = SYSCALLS.getStreamFromFD(e);\n          return t.stream_ops?.fsync ? t.stream_ops.fsync(t) : 0;\n        } catch (r) {\n          if (typeof FS > \"u\" || r.name !== \"ErrnoError\") throw r;\n          return r.errno;\n        }\n      }\n      _fd_sync.sig = \"ii\";\n      function _fd_write(e, t, r, a) {\n        try {\n          var o = SYSCALLS.getStreamFromFD(e),\n            s = doWritev(o, t, r);\n          return HEAPU32[a >> 2] = s, 0;\n        } catch (l) {\n          if (typeof FS > \"u\" || l.name !== \"ErrnoError\") throw l;\n          return l.errno;\n        }\n      }\n      _fd_write.sig = \"iippp\";\n      var _getaddrinfo = (e, t, r, a) => {\n        var o = 0,\n          s = 0,\n          l = 0,\n          n = 0,\n          _ = 0,\n          m = 0,\n          p;\n        function d(g, c, f, u, w, h) {\n          var S, M, y, x;\n          return M = g === 10 ? 28 : 16, w = g === 10 ? inetNtop6(w) : inetNtop4(w), S = _malloc(M), x = writeSockaddr(S, g, w, h), assert(!x), y = _malloc(32), HEAP32[y + 4 >> 2] = g, HEAP32[y + 8 >> 2] = c, HEAP32[y + 12 >> 2] = f, HEAPU32[y + 24 >> 2] = u, HEAPU32[y + 20 >> 2] = S, g === 10 ? HEAP32[y + 16 >> 2] = 28 : HEAP32[y + 16 >> 2] = 16, HEAP32[y + 28 >> 2] = 0, y;\n        }\n        if (r && (l = HEAP32[r >> 2], n = HEAP32[r + 4 >> 2], _ = HEAP32[r + 8 >> 2], m = HEAP32[r + 12 >> 2]), _ && !m && (m = _ === 2 ? 17 : 6), !_ && m && (_ = m === 17 ? 2 : 1), m === 0 && (m = 6), _ === 0 && (_ = 1), !e && !t) return -2;\n        if (l & -1088 || r !== 0 && HEAP32[r >> 2] & 2 && !e) return -1;\n        if (l & 32) return -2;\n        if (_ !== 0 && _ !== 1 && _ !== 2) return -7;\n        if (n !== 0 && n !== 2 && n !== 10) return -6;\n        if (t && (t = UTF8ToString(t), s = parseInt(t, 10), isNaN(s))) return l & 1024 ? -2 : -8;\n        if (!e) return n === 0 && (n = 2), l & 1 || (n === 2 ? o = _htonl(2130706433) : o = [0, 0, 0, _htonl(1)]), p = d(n, _, m, null, o, s), HEAPU32[a >> 2] = p, 0;\n        if (e = UTF8ToString(e), o = inetPton4(e), o !== null) {\n          if (n === 0 || n === 2) n = 2;else if (n === 10 && l & 8) o = [0, 0, _htonl(65535), o], n = 10;else return -2;\n        } else if (o = inetPton6(e), o !== null) if (n === 0 || n === 10) n = 10;else return -2;\n        return o != null ? (p = d(n, _, m, e, o, s), HEAPU32[a >> 2] = p, 0) : l & 4 ? -2 : (e = DNS.lookup_name(e), o = inetPton4(e), n === 0 ? n = 2 : n === 10 && (o = [0, 0, _htonl(65535), o]), p = d(n, _, m, null, o, s), HEAPU32[a >> 2] = p, 0);\n      };\n      _getaddrinfo.sig = \"ipppp\";\n      var _getnameinfo = (e, t, r, a, o, s, l) => {\n        var n = readSockaddr(e, t);\n        if (n.errno) return -6;\n        var _ = n.port,\n          m = n.addr,\n          p = !1;\n        if (r && a) {\n          var d;\n          if (l & 1 || !(d = DNS.lookup_addr(m))) {\n            if (l & 8) return -2;\n          } else m = d;\n          var g = stringToUTF8(m, r, a);\n          g + 1 >= a && (p = !0);\n        }\n        if (o && s) {\n          _ = \"\" + _;\n          var g = stringToUTF8(_, o, s);\n          g + 1 >= s && (p = !0);\n        }\n        return p ? -12 : 0;\n      };\n      _getnameinfo.sig = \"ipipipii\";\n      var stringToNewUTF8 = e => {\n          var t = lengthBytesUTF8(e) + 1,\n            r = _malloc(t);\n          return r && stringToUTF8(e, r, t), r;\n        },\n        getCFunc = e => {\n          var t = Module[\"_\" + e];\n          return t;\n        },\n        writeArrayToMemory = (e, t) => {\n          HEAP8.set(e, t);\n        },\n        ccall = (e, t, r, a, o) => {\n          var s = {\n            string: f => {\n              var u = 0;\n              return f != null && f !== 0 && (u = stringToUTF8OnStack(f)), u;\n            },\n            array: f => {\n              var u = stackAlloc(f.length);\n              return writeArrayToMemory(f, u), u;\n            }\n          };\n          function l(f) {\n            return t === \"string\" ? UTF8ToString(f) : t === \"boolean\" ? !!f : f;\n          }\n          var n = getCFunc(e),\n            _ = [],\n            m = 0;\n          if (a) for (var p = 0; p < a.length; p++) {\n            var d = s[r[p]];\n            d ? (m === 0 && (m = stackSave()), _[p] = d(a[p])) : _[p] = a[p];\n          }\n          var g = n(..._);\n          function c(f) {\n            return m !== 0 && stackRestore(m), l(f);\n          }\n          return g = c(g), g;\n        },\n        cwrap = (e, t, r, a) => {\n          var o = !r || r.every(l => l === \"number\" || l === \"boolean\"),\n            s = t !== \"string\";\n          return s && o && !a ? getCFunc(e) : (...l) => ccall(e, t, r, l, a);\n        },\n        FS_createPath = FS.createPath,\n        FS_unlink = e => FS.unlink(e),\n        FS_createLazyFile = FS.createLazyFile,\n        FS_createDevice = FS.createDevice,\n        setTempRet0 = e => __emscripten_tempret_set(e),\n        _setTempRet0 = setTempRet0;\n      Module._setTempRet0 = _setTempRet0;\n      var getTempRet0 = e => __emscripten_tempret_get(),\n        _getTempRet0 = getTempRet0;\n      Module._getTempRet0 = _getTempRet0, registerWasmPlugin(), FS.createPreloadedFile = FS_createPreloadedFile, FS.staticInit(), Module.FS_createPath = FS.createPath, Module.FS_createDataFile = FS.createDataFile, Module.FS_createPreloadedFile = FS.createPreloadedFile, Module.FS_unlink = FS.unlink, Module.FS_createLazyFile = FS.createLazyFile, Module.FS_createDevice = FS.createDevice, MEMFS.doesNotExistError = new FS.ErrnoError(44), MEMFS.doesNotExistError.stack = \"<generic error, no stack>\", ENVIRONMENT_IS_NODE && NODEFS.staticInit(), Module.requestAnimationFrame = MainLoop.requestAnimationFrame, Module.pauseMainLoop = MainLoop.pause, Module.resumeMainLoop = MainLoop.resume, MainLoop.init();\n      var wasmImports = {\n          __assert_fail: ___assert_fail,\n          __call_sighandler: ___call_sighandler,\n          __heap_base: ___heap_base,\n          __indirect_function_table: wasmTable,\n          __memory_base: ___memory_base,\n          __stack_pointer: ___stack_pointer,\n          __syscall__newselect: ___syscall__newselect,\n          __syscall_bind: ___syscall_bind,\n          __syscall_chdir: ___syscall_chdir,\n          __syscall_chmod: ___syscall_chmod,\n          __syscall_connect: ___syscall_connect,\n          __syscall_dup: ___syscall_dup,\n          __syscall_dup3: ___syscall_dup3,\n          __syscall_faccessat: ___syscall_faccessat,\n          __syscall_fadvise64: ___syscall_fadvise64,\n          __syscall_fallocate: ___syscall_fallocate,\n          __syscall_fcntl64: ___syscall_fcntl64,\n          __syscall_fdatasync: ___syscall_fdatasync,\n          __syscall_fstat64: ___syscall_fstat64,\n          __syscall_ftruncate64: ___syscall_ftruncate64,\n          __syscall_getcwd: ___syscall_getcwd,\n          __syscall_getdents64: ___syscall_getdents64,\n          __syscall_getsockname: ___syscall_getsockname,\n          __syscall_getsockopt: ___syscall_getsockopt,\n          __syscall_ioctl: ___syscall_ioctl,\n          __syscall_lstat64: ___syscall_lstat64,\n          __syscall_mkdirat: ___syscall_mkdirat,\n          __syscall_newfstatat: ___syscall_newfstatat,\n          __syscall_openat: ___syscall_openat,\n          __syscall_pipe: ___syscall_pipe,\n          __syscall_poll: ___syscall_poll,\n          __syscall_readlinkat: ___syscall_readlinkat,\n          __syscall_recvfrom: ___syscall_recvfrom,\n          __syscall_renameat: ___syscall_renameat,\n          __syscall_rmdir: ___syscall_rmdir,\n          __syscall_sendto: ___syscall_sendto,\n          __syscall_socket: ___syscall_socket,\n          __syscall_stat64: ___syscall_stat64,\n          __syscall_symlinkat: ___syscall_symlinkat,\n          __syscall_truncate64: ___syscall_truncate64,\n          __syscall_unlinkat: ___syscall_unlinkat,\n          __table_base: ___table_base,\n          _abort_js: __abort_js,\n          _dlopen_js: __dlopen_js,\n          _dlsym_js: __dlsym_js,\n          _emscripten_memcpy_js: __emscripten_memcpy_js,\n          _emscripten_runtime_keepalive_clear: __emscripten_runtime_keepalive_clear,\n          _emscripten_system: __emscripten_system,\n          _emscripten_throw_longjmp: __emscripten_throw_longjmp,\n          _gmtime_js: __gmtime_js,\n          _localtime_js: __localtime_js,\n          _mmap_js: __mmap_js,\n          _munmap_js: __munmap_js,\n          _setitimer_js: __setitimer_js,\n          _tzset_js: __tzset_js,\n          clock_time_get: _clock_time_get,\n          emscripten_asm_const_int: _emscripten_asm_const_int,\n          emscripten_date_now: _emscripten_date_now,\n          emscripten_force_exit: _emscripten_force_exit,\n          emscripten_get_now: _emscripten_get_now,\n          emscripten_resize_heap: _emscripten_resize_heap,\n          emscripten_set_main_loop: _emscripten_set_main_loop,\n          environ_get: _environ_get,\n          environ_sizes_get: _environ_sizes_get,\n          exit: _exit,\n          fd_close: _fd_close,\n          fd_fdstat_get: _fd_fdstat_get,\n          fd_pread: _fd_pread,\n          fd_pwrite: _fd_pwrite,\n          fd_read: _fd_read,\n          fd_seek: _fd_seek,\n          fd_sync: _fd_sync,\n          fd_write: _fd_write,\n          getTempRet0: _getTempRet0,\n          getaddrinfo: _getaddrinfo,\n          getnameinfo: _getnameinfo,\n          invoke_di,\n          invoke_i,\n          invoke_id,\n          invoke_ii,\n          invoke_iii,\n          invoke_iiii,\n          invoke_iiiii,\n          invoke_iiiiii,\n          invoke_iiiiiii,\n          invoke_iiiiiiii,\n          invoke_iiiiiiiii,\n          invoke_iiiiiiiiii,\n          invoke_iiiiiiiiiiiiiiiii,\n          invoke_iiiiiji,\n          invoke_iiiij,\n          invoke_iiiijii,\n          invoke_iiij,\n          invoke_iiji,\n          invoke_ij,\n          invoke_ijiiiii,\n          invoke_ijiiiiii,\n          invoke_ji,\n          invoke_jii,\n          invoke_jiiii,\n          invoke_jiiiii,\n          invoke_jiiiiiiii,\n          invoke_v,\n          invoke_vi,\n          invoke_vid,\n          invoke_vii,\n          invoke_viii,\n          invoke_viiii,\n          invoke_viiiii,\n          invoke_viiiiii,\n          invoke_viiiiiii,\n          invoke_viiiiiiii,\n          invoke_viiiiiiiii,\n          invoke_viiiiiiiiiiii,\n          invoke_viiij,\n          invoke_viij,\n          invoke_viiji,\n          invoke_viijii,\n          invoke_viijiiii,\n          invoke_vij,\n          invoke_viji,\n          invoke_vijiji,\n          invoke_vj,\n          invoke_vji,\n          is_web_env,\n          memory: wasmMemory,\n          proc_exit: _proc_exit,\n          setTempRet0: _setTempRet0\n        },\n        wasmExports;\n      createWasm();\n      var ___wasm_call_ctors = () => (___wasm_call_ctors = wasmExports.__wasm_call_ctors)(),\n        _ScanKeywordLookup = Module._ScanKeywordLookup = (e, t) => (_ScanKeywordLookup = Module._ScanKeywordLookup = wasmExports.ScanKeywordLookup)(e, t),\n        _pg_snprintf = Module._pg_snprintf = (e, t, r, a) => (_pg_snprintf = Module._pg_snprintf = wasmExports.pg_snprintf)(e, t, r, a),\n        _strlen = Module._strlen = e => (_strlen = Module._strlen = wasmExports.strlen)(e),\n        _memset = Module._memset = (e, t, r) => (_memset = Module._memset = wasmExports.memset)(e, t, r),\n        _strchr = Module._strchr = (e, t) => (_strchr = Module._strchr = wasmExports.strchr)(e, t),\n        _PQserverVersion = Module._PQserverVersion = e => (_PQserverVersion = Module._PQserverVersion = wasmExports.PQserverVersion)(e),\n        _strstr = Module._strstr = (e, t) => (_strstr = Module._strstr = wasmExports.strstr)(e, t),\n        _pg_fprintf = Module._pg_fprintf = (e, t, r) => (_pg_fprintf = Module._pg_fprintf = wasmExports.pg_fprintf)(e, t, r),\n        _strspn = Module._strspn = (e, t) => (_strspn = Module._strspn = wasmExports.strspn)(e, t),\n        _malloc = Module._malloc = e => (_malloc = Module._malloc = wasmExports.malloc)(e),\n        _pg_strcasecmp = Module._pg_strcasecmp = (e, t) => (_pg_strcasecmp = Module._pg_strcasecmp = wasmExports.pg_strcasecmp)(e, t),\n        _strcmp = Module._strcmp = (e, t) => (_strcmp = Module._strcmp = wasmExports.strcmp)(e, t),\n        _free = Module._free = e => (_free = Module._free = wasmExports.free)(e),\n        _pg_tolower = Module._pg_tolower = e => (_pg_tolower = Module._pg_tolower = wasmExports.pg_tolower)(e),\n        _memchr = Module._memchr = (e, t, r) => (_memchr = Module._memchr = wasmExports.memchr)(e, t, r),\n        _getenv = Module._getenv = e => (_getenv = Module._getenv = wasmExports.getenv)(e),\n        _fileno = Module._fileno = e => (_fileno = Module._fileno = wasmExports.fileno)(e),\n        _isatty = Module._isatty = e => (_isatty = Module._isatty = wasmExports.isatty)(e),\n        _strdup = Module._strdup = e => (_strdup = Module._strdup = wasmExports.strdup)(e),\n        ___errno_location = Module.___errno_location = () => (___errno_location = Module.___errno_location = wasmExports.__errno_location)(),\n        _fflush = Module._fflush = e => (_fflush = Module._fflush = wasmExports.fflush)(e),\n        _pg_vsnprintf = Module._pg_vsnprintf = (e, t, r, a) => (_pg_vsnprintf = Module._pg_vsnprintf = wasmExports.pg_vsnprintf)(e, t, r, a),\n        _pg_malloc_extended = Module._pg_malloc_extended = (e, t) => (_pg_malloc_extended = Module._pg_malloc_extended = wasmExports.pg_malloc_extended)(e, t),\n        _PageInit = Module._PageInit = (e, t, r) => (_PageInit = Module._PageInit = wasmExports.PageInit)(e, t, r),\n        _pg_checksum_page = Module._pg_checksum_page = (e, t) => (_pg_checksum_page = Module._pg_checksum_page = wasmExports.pg_checksum_page)(e, t),\n        _errstart = Module._errstart = (e, t) => (_errstart = Module._errstart = wasmExports.errstart)(e, t),\n        _errcode = Module._errcode = e => (_errcode = Module._errcode = wasmExports.errcode)(e),\n        _errmsg = Module._errmsg = (e, t) => (_errmsg = Module._errmsg = wasmExports.errmsg)(e, t),\n        _errfinish = Module._errfinish = (e, t, r) => (_errfinish = Module._errfinish = wasmExports.errfinish)(e, t, r),\n        _PageAddItemExtended = Module._PageAddItemExtended = (e, t, r, a, o) => (_PageAddItemExtended = Module._PageAddItemExtended = wasmExports.PageAddItemExtended)(e, t, r, a, o),\n        _errstart_cold = Module._errstart_cold = (e, t) => (_errstart_cold = Module._errstart_cold = wasmExports.errstart_cold)(e, t),\n        _puts = Module._puts = e => (_puts = Module._puts = wasmExports.puts)(e),\n        _errmsg_internal = Module._errmsg_internal = (e, t) => (_errmsg_internal = Module._errmsg_internal = wasmExports.errmsg_internal)(e, t),\n        _memmove = Module._memmove = (e, t, r) => (_memmove = Module._memmove = wasmExports.memmove)(e, t, r),\n        _memcpy = Module._memcpy = (e, t, r) => (_memcpy = Module._memcpy = wasmExports.memcpy)(e, t, r),\n        _palloc = Module._palloc = e => (_palloc = Module._palloc = wasmExports.palloc)(e),\n        _pfree = Module._pfree = e => (_pfree = Module._pfree = wasmExports.pfree)(e),\n        _PageGetFreeSpace = Module._PageGetFreeSpace = e => (_PageGetFreeSpace = Module._PageGetFreeSpace = wasmExports.PageGetFreeSpace)(e),\n        _PageGetExactFreeSpace = Module._PageGetExactFreeSpace = e => (_PageGetExactFreeSpace = Module._PageGetExactFreeSpace = wasmExports.PageGetExactFreeSpace)(e),\n        _PageGetHeapFreeSpace = Module._PageGetHeapFreeSpace = e => (_PageGetHeapFreeSpace = Module._PageGetHeapFreeSpace = wasmExports.PageGetHeapFreeSpace)(e),\n        _PageIndexMultiDelete = Module._PageIndexMultiDelete = (e, t, r) => (_PageIndexMultiDelete = Module._PageIndexMultiDelete = wasmExports.PageIndexMultiDelete)(e, t, r),\n        _PageIndexTupleOverwrite = Module._PageIndexTupleOverwrite = (e, t, r, a) => (_PageIndexTupleOverwrite = Module._PageIndexTupleOverwrite = wasmExports.PageIndexTupleOverwrite)(e, t, r, a),\n        _ItemPointerEquals = Module._ItemPointerEquals = (e, t) => (_ItemPointerEquals = Module._ItemPointerEquals = wasmExports.ItemPointerEquals)(e, t),\n        _ItemPointerCompare = Module._ItemPointerCompare = (e, t) => (_ItemPointerCompare = Module._ItemPointerCompare = wasmExports.ItemPointerCompare)(e, t),\n        _add_size = Module._add_size = (e, t) => (_add_size = Module._add_size = wasmExports.add_size)(e, t),\n        _ShmemInitStruct = Module._ShmemInitStruct = (e, t, r) => (_ShmemInitStruct = Module._ShmemInitStruct = wasmExports.ShmemInitStruct)(e, t, r),\n        _s_init_lock_sema = Module._s_init_lock_sema = (e, t) => (_s_init_lock_sema = Module._s_init_lock_sema = wasmExports.s_init_lock_sema)(e, t),\n        _LWLockAcquire = Module._LWLockAcquire = (e, t) => (_LWLockAcquire = Module._LWLockAcquire = wasmExports.LWLockAcquire)(e, t),\n        _LWLockRelease = Module._LWLockRelease = e => (_LWLockRelease = Module._LWLockRelease = wasmExports.LWLockRelease)(e),\n        _on_shmem_exit = Module._on_shmem_exit = (e, t) => (_on_shmem_exit = Module._on_shmem_exit = wasmExports.on_shmem_exit)(e, t),\n        _tas_sema = Module._tas_sema = e => (_tas_sema = Module._tas_sema = wasmExports.tas_sema)(e),\n        _s_lock = Module._s_lock = (e, t, r, a) => (_s_lock = Module._s_lock = wasmExports.s_lock)(e, t, r, a),\n        _s_unlock_sema = Module._s_unlock_sema = e => (_s_unlock_sema = Module._s_unlock_sema = wasmExports.s_unlock_sema)(e),\n        _StartTransactionCommand = Module._StartTransactionCommand = () => (_StartTransactionCommand = Module._StartTransactionCommand = wasmExports.StartTransactionCommand)(),\n        _CommitTransactionCommand = Module._CommitTransactionCommand = () => (_CommitTransactionCommand = Module._CommitTransactionCommand = wasmExports.CommitTransactionCommand)(),\n        _WaitLatch = Module._WaitLatch = (e, t, r, a) => (_WaitLatch = Module._WaitLatch = wasmExports.WaitLatch)(e, t, r, a),\n        _ResetLatch = Module._ResetLatch = e => (_ResetLatch = Module._ResetLatch = wasmExports.ResetLatch)(e),\n        _ProcessInterrupts = Module._ProcessInterrupts = () => (_ProcessInterrupts = Module._ProcessInterrupts = wasmExports.ProcessInterrupts)(),\n        _MemoryContextAlloc = Module._MemoryContextAlloc = (e, t) => (_MemoryContextAlloc = Module._MemoryContextAlloc = wasmExports.MemoryContextAlloc)(e, t),\n        _AllocateDir = Module._AllocateDir = e => (_AllocateDir = Module._AllocateDir = wasmExports.AllocateDir)(e),\n        _ReadDir = Module._ReadDir = (e, t) => (_ReadDir = Module._ReadDir = wasmExports.ReadDir)(e, t),\n        _strncmp = Module._strncmp = (e, t, r) => (_strncmp = Module._strncmp = wasmExports.strncmp)(e, t, r),\n        _unlink = Module._unlink = e => (_unlink = Module._unlink = wasmExports.unlink)(e),\n        _errcode_for_file_access = Module._errcode_for_file_access = () => (_errcode_for_file_access = Module._errcode_for_file_access = wasmExports.errcode_for_file_access)(),\n        _FreeDir = Module._FreeDir = e => (_FreeDir = Module._FreeDir = wasmExports.FreeDir)(e),\n        _pg_prng_uint32 = Module._pg_prng_uint32 = e => (_pg_prng_uint32 = Module._pg_prng_uint32 = wasmExports.pg_prng_uint32)(e),\n        _dsm_create = Module._dsm_create = (e, t) => (_dsm_create = Module._dsm_create = wasmExports.dsm_create)(e, t),\n        _dsm_attach = Module._dsm_attach = e => (_dsm_attach = Module._dsm_attach = wasmExports.dsm_attach)(e),\n        _dsm_detach = Module._dsm_detach = e => (_dsm_detach = Module._dsm_detach = wasmExports.dsm_detach)(e),\n        _dsm_segment_address = Module._dsm_segment_address = e => (_dsm_segment_address = Module._dsm_segment_address = wasmExports.dsm_segment_address)(e),\n        _dsm_segment_handle = Module._dsm_segment_handle = e => (_dsm_segment_handle = Module._dsm_segment_handle = wasmExports.dsm_segment_handle)(e),\n        _MemoryContextAllocZero = Module._MemoryContextAllocZero = (e, t) => (_MemoryContextAllocZero = Module._MemoryContextAllocZero = wasmExports.MemoryContextAllocZero)(e, t),\n        _read = Module._read = (e, t, r) => (_read = Module._read = wasmExports.read)(e, t, r),\n        _hash_create = Module._hash_create = (e, t, r, a) => (_hash_create = Module._hash_create = wasmExports.hash_create)(e, t, r, a),\n        _hash_destroy = Module._hash_destroy = e => (_hash_destroy = Module._hash_destroy = wasmExports.hash_destroy)(e),\n        _hash_seq_init = Module._hash_seq_init = (e, t) => (_hash_seq_init = Module._hash_seq_init = wasmExports.hash_seq_init)(e, t),\n        _hash_seq_search = Module._hash_seq_search = e => (_hash_seq_search = Module._hash_seq_search = wasmExports.hash_seq_search)(e),\n        _hash_search = Module._hash_search = (e, t, r, a) => (_hash_search = Module._hash_search = wasmExports.hash_search)(e, t, r, a),\n        _initStringInfo = Module._initStringInfo = e => (_initStringInfo = Module._initStringInfo = wasmExports.initStringInfo)(e),\n        _appendStringInfo = Module._appendStringInfo = (e, t, r) => (_appendStringInfo = Module._appendStringInfo = wasmExports.appendStringInfo)(e, t, r),\n        _GetCurrentTimestamp = Module._GetCurrentTimestamp = () => (_GetCurrentTimestamp = Module._GetCurrentTimestamp = wasmExports.GetCurrentTimestamp)(),\n        _pg_usleep = Module._pg_usleep = e => (_pg_usleep = Module._pg_usleep = wasmExports.pg_usleep)(e),\n        _errdetail = Module._errdetail = (e, t) => (_errdetail = Module._errdetail = wasmExports.errdetail)(e, t),\n        _TransactionIdDidCommit = Module._TransactionIdDidCommit = e => (_TransactionIdDidCommit = Module._TransactionIdDidCommit = wasmExports.TransactionIdDidCommit)(e),\n        _TransactionIdPrecedes = Module._TransactionIdPrecedes = (e, t) => (_TransactionIdPrecedes = Module._TransactionIdPrecedes = wasmExports.TransactionIdPrecedes)(e, t),\n        _XLogBeginInsert = Module._XLogBeginInsert = () => (_XLogBeginInsert = Module._XLogBeginInsert = wasmExports.XLogBeginInsert)(),\n        _XLogRegisterData = Module._XLogRegisterData = (e, t) => (_XLogRegisterData = Module._XLogRegisterData = wasmExports.XLogRegisterData)(e, t),\n        _XLogInsert = Module._XLogInsert = (e, t) => (_XLogInsert = Module._XLogInsert = wasmExports.XLogInsert)(e, t),\n        _ConditionVariableInit = Module._ConditionVariableInit = e => (_ConditionVariableInit = Module._ConditionVariableInit = wasmExports.ConditionVariableInit)(e),\n        _ConditionVariableCancelSleep = Module._ConditionVariableCancelSleep = () => (_ConditionVariableCancelSleep = Module._ConditionVariableCancelSleep = wasmExports.ConditionVariableCancelSleep)(),\n        _ConditionVariableSleep = Module._ConditionVariableSleep = (e, t) => (_ConditionVariableSleep = Module._ConditionVariableSleep = wasmExports.ConditionVariableSleep)(e, t),\n        ___wasm_setjmp = Module.___wasm_setjmp = (e, t, r) => (___wasm_setjmp = Module.___wasm_setjmp = wasmExports.__wasm_setjmp)(e, t, r),\n        ___wasm_setjmp_test = Module.___wasm_setjmp_test = (e, t) => (___wasm_setjmp_test = Module.___wasm_setjmp_test = wasmExports.__wasm_setjmp_test)(e, t),\n        _pg_re_throw = Module._pg_re_throw = () => (_pg_re_throw = Module._pg_re_throw = wasmExports.pg_re_throw)(),\n        _emscripten_longjmp = Module._emscripten_longjmp = (e, t) => (_emscripten_longjmp = Module._emscripten_longjmp = wasmExports.emscripten_longjmp)(e, t),\n        _procsignal_sigusr1_handler = Module._procsignal_sigusr1_handler = e => (_procsignal_sigusr1_handler = Module._procsignal_sigusr1_handler = wasmExports.procsignal_sigusr1_handler)(e),\n        _close = Module._close = e => (_close = Module._close = wasmExports.close)(e),\n        _ReleaseExternalFD = Module._ReleaseExternalFD = () => (_ReleaseExternalFD = Module._ReleaseExternalFD = wasmExports.ReleaseExternalFD)(),\n        _fcntl = Module._fcntl = (e, t, r) => (_fcntl = Module._fcntl = wasmExports.fcntl)(e, t, r),\n        _pqsignal = Module._pqsignal = (e, t) => (_pqsignal = Module._pqsignal = wasmExports.pqsignal)(e, t),\n        _write = Module._write = (e, t, r) => (_write = Module._write = wasmExports.write)(e, t, r),\n        _AddWaitEventToSet = Module._AddWaitEventToSet = (e, t, r, a, o) => (_AddWaitEventToSet = Module._AddWaitEventToSet = wasmExports.AddWaitEventToSet)(e, t, r, a, o),\n        _clock_gettime = Module._clock_gettime = (e, t) => (_clock_gettime = Module._clock_gettime = wasmExports.clock_gettime)(e, t),\n        _poll = Module._poll = (e, t, r) => (_poll = Module._poll = wasmExports.poll)(e, t, r),\n        _WaitLatchOrSocket = Module._WaitLatchOrSocket = (e, t, r, a, o) => (_WaitLatchOrSocket = Module._WaitLatchOrSocket = wasmExports.WaitLatchOrSocket)(e, t, r, a, o),\n        _GetNumRegisteredWaitEvents = Module._GetNumRegisteredWaitEvents = e => (_GetNumRegisteredWaitEvents = Module._GetNumRegisteredWaitEvents = wasmExports.GetNumRegisteredWaitEvents)(e),\n        _ShmemInitHash = Module._ShmemInitHash = (e, t, r, a, o) => (_ShmemInitHash = Module._ShmemInitHash = wasmExports.ShmemInitHash)(e, t, r, a, o),\n        _InitMaterializedSRF = Module._InitMaterializedSRF = (e, t) => (_InitMaterializedSRF = Module._InitMaterializedSRF = wasmExports.InitMaterializedSRF)(e, t),\n        _cstring_to_text = Module._cstring_to_text = e => (_cstring_to_text = Module._cstring_to_text = wasmExports.cstring_to_text)(e),\n        _Int64GetDatum = Module._Int64GetDatum = e => (_Int64GetDatum = Module._Int64GetDatum = wasmExports.Int64GetDatum)(e),\n        _tuplestore_putvalues = Module._tuplestore_putvalues = (e, t, r, a) => (_tuplestore_putvalues = Module._tuplestore_putvalues = wasmExports.tuplestore_putvalues)(e, t, r, a),\n        _shm_toc_allocate = Module._shm_toc_allocate = (e, t) => (_shm_toc_allocate = Module._shm_toc_allocate = wasmExports.shm_toc_allocate)(e, t),\n        _shm_toc_insert = Module._shm_toc_insert = (e, t, r) => (_shm_toc_insert = Module._shm_toc_insert = wasmExports.shm_toc_insert)(e, t, r),\n        _shm_toc_lookup = Module._shm_toc_lookup = (e, t, r) => (_shm_toc_lookup = Module._shm_toc_lookup = wasmExports.shm_toc_lookup)(e, t, r),\n        _superuser_arg = Module._superuser_arg = e => (_superuser_arg = Module._superuser_arg = wasmExports.superuser_arg)(e),\n        _superuser = Module._superuser = () => (_superuser = Module._superuser = wasmExports.superuser)(),\n        _GetUserId = Module._GetUserId = () => (_GetUserId = Module._GetUserId = wasmExports.GetUserId)(),\n        _has_privs_of_role = Module._has_privs_of_role = (e, t) => (_has_privs_of_role = Module._has_privs_of_role = wasmExports.has_privs_of_role)(e, t),\n        _errmsg_plural = Module._errmsg_plural = (e, t, r, a) => (_errmsg_plural = Module._errmsg_plural = wasmExports.errmsg_plural)(e, t, r, a),\n        _errhint = Module._errhint = (e, t) => (_errhint = Module._errhint = wasmExports.errhint)(e, t),\n        _fstat = Module._fstat = (e, t) => (_fstat = Module._fstat = wasmExports.fstat)(e, t),\n        _ftruncate = Module._ftruncate = (e, t) => (_ftruncate = Module._ftruncate = wasmExports.ftruncate)(e, t),\n        _RequestAddinShmemSpace = Module._RequestAddinShmemSpace = e => (_RequestAddinShmemSpace = Module._RequestAddinShmemSpace = wasmExports.RequestAddinShmemSpace)(e),\n        _hash_estimate_size = Module._hash_estimate_size = (e, t) => (_hash_estimate_size = Module._hash_estimate_size = wasmExports.hash_estimate_size)(e, t),\n        _pg_sprintf = Module._pg_sprintf = (e, t, r) => (_pg_sprintf = Module._pg_sprintf = wasmExports.pg_sprintf)(e, t, r),\n        _SetConfigOption = Module._SetConfigOption = (e, t, r, a) => (_SetConfigOption = Module._SetConfigOption = wasmExports.SetConfigOption)(e, t, r, a),\n        _pg_printf = Module._pg_printf = (e, t) => (_pg_printf = Module._pg_printf = wasmExports.pg_printf)(e, t),\n        _before_shmem_exit = Module._before_shmem_exit = (e, t) => (_before_shmem_exit = Module._before_shmem_exit = wasmExports.before_shmem_exit)(e, t),\n        _cancel_before_shmem_exit = Module._cancel_before_shmem_exit = (e, t) => (_cancel_before_shmem_exit = Module._cancel_before_shmem_exit = wasmExports.cancel_before_shmem_exit)(e, t),\n        _pg_qsort = Module._pg_qsort = (e, t, r, a) => (_pg_qsort = Module._pg_qsort = wasmExports.pg_qsort)(e, t, r, a),\n        _TransactionIdIsInProgress = Module._TransactionIdIsInProgress = e => (_TransactionIdIsInProgress = Module._TransactionIdIsInProgress = wasmExports.TransactionIdIsInProgress)(e),\n        _TransactionIdIsCurrentTransactionId = Module._TransactionIdIsCurrentTransactionId = e => (_TransactionIdIsCurrentTransactionId = Module._TransactionIdIsCurrentTransactionId = wasmExports.TransactionIdIsCurrentTransactionId)(e),\n        _RecoveryInProgress = Module._RecoveryInProgress = () => (_RecoveryInProgress = Module._RecoveryInProgress = wasmExports.RecoveryInProgress)(),\n        _GetOldestNonRemovableTransactionId = Module._GetOldestNonRemovableTransactionId = e => (_GetOldestNonRemovableTransactionId = Module._GetOldestNonRemovableTransactionId = wasmExports.GetOldestNonRemovableTransactionId)(e),\n        _GetCurrentCommandId = Module._GetCurrentCommandId = e => (_GetCurrentCommandId = Module._GetCurrentCommandId = wasmExports.GetCurrentCommandId)(e),\n        _BackendXidGetPid = Module._BackendXidGetPid = e => (_BackendXidGetPid = Module._BackendXidGetPid = wasmExports.BackendXidGetPid)(e),\n        _lappend_int = Module._lappend_int = (e, t) => (_lappend_int = Module._lappend_int = wasmExports.lappend_int)(e, t),\n        _index_close = Module._index_close = (e, t) => (_index_close = Module._index_close = wasmExports.index_close)(e, t),\n        _table_close = Module._table_close = (e, t) => (_table_close = Module._table_close = wasmExports.table_close)(e, t),\n        _CommandCounterIncrement = Module._CommandCounterIncrement = () => (_CommandCounterIncrement = Module._CommandCounterIncrement = wasmExports.CommandCounterIncrement)(),\n        _GetActiveSnapshot = Module._GetActiveSnapshot = () => (_GetActiveSnapshot = Module._GetActiveSnapshot = wasmExports.GetActiveSnapshot)(),\n        _ScanKeyInit = Module._ScanKeyInit = (e, t, r, a, o) => (_ScanKeyInit = Module._ScanKeyInit = wasmExports.ScanKeyInit)(e, t, r, a, o),\n        _table_open = Module._table_open = (e, t) => (_table_open = Module._table_open = wasmExports.table_open)(e, t),\n        _systable_beginscan = Module._systable_beginscan = (e, t, r, a, o, s) => (_systable_beginscan = Module._systable_beginscan = wasmExports.systable_beginscan)(e, t, r, a, o, s),\n        _systable_getnext = Module._systable_getnext = e => (_systable_getnext = Module._systable_getnext = wasmExports.systable_getnext)(e),\n        _systable_endscan = Module._systable_endscan = e => (_systable_endscan = Module._systable_endscan = wasmExports.systable_endscan)(e),\n        _index_open = Module._index_open = (e, t) => (_index_open = Module._index_open = wasmExports.index_open)(e, t),\n        _systable_beginscan_ordered = Module._systable_beginscan_ordered = (e, t, r, a, o) => (_systable_beginscan_ordered = Module._systable_beginscan_ordered = wasmExports.systable_beginscan_ordered)(e, t, r, a, o),\n        _systable_getnext_ordered = Module._systable_getnext_ordered = (e, t) => (_systable_getnext_ordered = Module._systable_getnext_ordered = wasmExports.systable_getnext_ordered)(e, t),\n        _systable_endscan_ordered = Module._systable_endscan_ordered = e => (_systable_endscan_ordered = Module._systable_endscan_ordered = wasmExports.systable_endscan_ordered)(e),\n        _heap_form_tuple = Module._heap_form_tuple = (e, t, r) => (_heap_form_tuple = Module._heap_form_tuple = wasmExports.heap_form_tuple)(e, t, r),\n        _heap_freetuple = Module._heap_freetuple = e => (_heap_freetuple = Module._heap_freetuple = wasmExports.heap_freetuple)(e),\n        _AllocSetContextCreateInternal = Module._AllocSetContextCreateInternal = (e, t, r, a, o) => (_AllocSetContextCreateInternal = Module._AllocSetContextCreateInternal = wasmExports.AllocSetContextCreateInternal)(e, t, r, a, o),\n        _list_free_deep = Module._list_free_deep = e => (_list_free_deep = Module._list_free_deep = wasmExports.list_free_deep)(e),\n        _lappend = Module._lappend = (e, t) => (_lappend = Module._lappend = wasmExports.lappend)(e, t),\n        _LockBuffer = Module._LockBuffer = (e, t) => (_LockBuffer = Module._LockBuffer = wasmExports.LockBuffer)(e, t),\n        _GetFreeIndexPage = Module._GetFreeIndexPage = e => (_GetFreeIndexPage = Module._GetFreeIndexPage = wasmExports.GetFreeIndexPage)(e),\n        _RecordFreeIndexPage = Module._RecordFreeIndexPage = (e, t) => (_RecordFreeIndexPage = Module._RecordFreeIndexPage = wasmExports.RecordFreeIndexPage)(e, t),\n        _IndexFreeSpaceMapVacuum = Module._IndexFreeSpaceMapVacuum = e => (_IndexFreeSpaceMapVacuum = Module._IndexFreeSpaceMapVacuum = wasmExports.IndexFreeSpaceMapVacuum)(e),\n        _UnlockReleaseBuffer = Module._UnlockReleaseBuffer = e => (_UnlockReleaseBuffer = Module._UnlockReleaseBuffer = wasmExports.UnlockReleaseBuffer)(e),\n        _smgropen = Module._smgropen = (e, t) => (_smgropen = Module._smgropen = wasmExports.smgropen)(e, t),\n        _smgrsetowner = Module._smgrsetowner = (e, t) => (_smgrsetowner = Module._smgrsetowner = wasmExports.smgrsetowner)(e, t),\n        _RelationGetNumberOfBlocksInFork = Module._RelationGetNumberOfBlocksInFork = (e, t) => (_RelationGetNumberOfBlocksInFork = Module._RelationGetNumberOfBlocksInFork = wasmExports.RelationGetNumberOfBlocksInFork)(e, t),\n        _ReleaseBuffer = Module._ReleaseBuffer = e => (_ReleaseBuffer = Module._ReleaseBuffer = wasmExports.ReleaseBuffer)(e),\n        _GetRecordedFreeSpace = Module._GetRecordedFreeSpace = (e, t) => (_GetRecordedFreeSpace = Module._GetRecordedFreeSpace = wasmExports.GetRecordedFreeSpace)(e, t),\n        _smgrexists = Module._smgrexists = (e, t) => (_smgrexists = Module._smgrexists = wasmExports.smgrexists)(e, t),\n        _ReadBufferExtended = Module._ReadBufferExtended = (e, t, r, a, o) => (_ReadBufferExtended = Module._ReadBufferExtended = wasmExports.ReadBufferExtended)(e, t, r, a, o),\n        _MarkBufferDirty = Module._MarkBufferDirty = e => (_MarkBufferDirty = Module._MarkBufferDirty = wasmExports.MarkBufferDirty)(e),\n        _log_newpage_buffer = Module._log_newpage_buffer = (e, t) => (_log_newpage_buffer = Module._log_newpage_buffer = wasmExports.log_newpage_buffer)(e, t),\n        _copy_file = Module._copy_file = (e, t) => (_copy_file = Module._copy_file = wasmExports.copy_file)(e, t),\n        _fd_fsync_fname = Module._fd_fsync_fname = (e, t) => (_fd_fsync_fname = Module._fd_fsync_fname = wasmExports.fd_fsync_fname)(e, t),\n        _OpenTransientFile = Module._OpenTransientFile = (e, t) => (_OpenTransientFile = Module._OpenTransientFile = wasmExports.OpenTransientFile)(e, t),\n        _CloseTransientFile = Module._CloseTransientFile = e => (_CloseTransientFile = Module._CloseTransientFile = wasmExports.CloseTransientFile)(e),\n        _hash_bytes = Module._hash_bytes = (e, t) => (_hash_bytes = Module._hash_bytes = wasmExports.hash_bytes)(e, t),\n        _pstrdup = Module._pstrdup = e => (_pstrdup = Module._pstrdup = wasmExports.pstrdup)(e),\n        _repalloc = Module._repalloc = (e, t) => (_repalloc = Module._repalloc = wasmExports.repalloc)(e, t),\n        _wasm_OpenPipeStream = Module._wasm_OpenPipeStream = (e, t) => (_wasm_OpenPipeStream = Module._wasm_OpenPipeStream = wasmExports.wasm_OpenPipeStream)(e, t),\n        _access = Module._access = (e, t) => (_access = Module._access = wasmExports.access)(e, t),\n        _fopen = Module._fopen = (e, t) => (_fopen = Module._fopen = wasmExports.fopen)(e, t),\n        _fiprintf = Module._fiprintf = (e, t, r) => (_fiprintf = Module._fiprintf = wasmExports.fiprintf)(e, t, r),\n        _fclose = Module._fclose = e => (_fclose = Module._fclose = wasmExports.fclose)(e),\n        _fsync_fname_ext = Module._fsync_fname_ext = (e, t, r, a) => (_fsync_fname_ext = Module._fsync_fname_ext = wasmExports.fsync_fname_ext)(e, t, r, a),\n        _fd_durable_rename = Module._fd_durable_rename = (e, t, r) => (_fd_durable_rename = Module._fd_durable_rename = wasmExports.fd_durable_rename)(e, t, r),\n        _rename = Module._rename = (e, t) => (_rename = Module._rename = wasmExports.rename)(e, t),\n        _strlcpy = Module._strlcpy = (e, t, r) => (_strlcpy = Module._strlcpy = wasmExports.strlcpy)(e, t, r),\n        _dup = Module._dup = e => (_dup = Module._dup = wasmExports.dup)(e),\n        _open = Module._open = (e, t, r) => (_open = Module._open = wasmExports.open)(e, t, r),\n        _AcquireExternalFD = Module._AcquireExternalFD = () => (_AcquireExternalFD = Module._AcquireExternalFD = wasmExports.AcquireExternalFD)(),\n        _realloc = Module._realloc = (e, t) => (_realloc = Module._realloc = wasmExports.realloc)(e, t),\n        _stat = Module._stat = (e, t) => (_stat = Module._stat = wasmExports.stat)(e, t),\n        _pwrite = Module._pwrite = (e, t, r, a) => (_pwrite = Module._pwrite = wasmExports.pwrite)(e, t, r, a),\n        _lseek = Module._lseek = (e, t, r) => (_lseek = Module._lseek = wasmExports.lseek)(e, t, r),\n        _AllocateFile = Module._AllocateFile = (e, t) => (_AllocateFile = Module._AllocateFile = wasmExports.AllocateFile)(e, t),\n        _GetCurrentSubTransactionId = Module._GetCurrentSubTransactionId = () => (_GetCurrentSubTransactionId = Module._GetCurrentSubTransactionId = wasmExports.GetCurrentSubTransactionId)(),\n        _FreeFile = Module._FreeFile = e => (_FreeFile = Module._FreeFile = wasmExports.FreeFile)(e),\n        _pclose = Module._pclose = e => (_pclose = Module._pclose = wasmExports.pclose)(e),\n        _ClosePipeStream = Module._ClosePipeStream = e => (_ClosePipeStream = Module._ClosePipeStream = wasmExports.ClosePipeStream)(e),\n        _pg_prng_uint64_range = Module._pg_prng_uint64_range = (e, t, r) => (_pg_prng_uint64_range = Module._pg_prng_uint64_range = wasmExports.pg_prng_uint64_range)(e, t, r),\n        _AtEOSubXact_Files = Module._AtEOSubXact_Files = (e, t, r) => (_AtEOSubXact_Files = Module._AtEOSubXact_Files = wasmExports.AtEOSubXact_Files)(e, t, r),\n        _pre_format_elog_string = Module._pre_format_elog_string = (e, t) => (_pre_format_elog_string = Module._pre_format_elog_string = wasmExports.pre_format_elog_string)(e, t),\n        _format_elog_string = Module._format_elog_string = (e, t) => (_format_elog_string = Module._format_elog_string = wasmExports.format_elog_string)(e, t),\n        _list_free = Module._list_free = e => (_list_free = Module._list_free = wasmExports.list_free)(e),\n        _guc_malloc = Module._guc_malloc = (e, t) => (_guc_malloc = Module._guc_malloc = wasmExports.guc_malloc)(e, t),\n        _MemoryContextDelete = Module._MemoryContextDelete = e => (_MemoryContextDelete = Module._MemoryContextDelete = wasmExports.MemoryContextDelete)(e),\n        _strtoul = Module._strtoul = (e, t, r) => (_strtoul = Module._strtoul = wasmExports.strtoul)(e, t, r),\n        _hash_get_num_entries = Module._hash_get_num_entries = e => (_hash_get_num_entries = Module._hash_get_num_entries = wasmExports.hash_get_num_entries)(e),\n        _LWLockInitialize = Module._LWLockInitialize = (e, t) => (_LWLockInitialize = Module._LWLockInitialize = wasmExports.LWLockInitialize)(e, t),\n        _PrefetchBuffer = Module._PrefetchBuffer = (e, t, r, a) => (_PrefetchBuffer = Module._PrefetchBuffer = wasmExports.PrefetchBuffer)(e, t, r, a),\n        _LockBufHdr = Module._LockBufHdr = e => (_LockBufHdr = Module._LockBufHdr = wasmExports.LockBufHdr)(e),\n        _ReadBuffer = Module._ReadBuffer = (e, t) => (_ReadBuffer = Module._ReadBuffer = wasmExports.ReadBuffer)(e, t),\n        _pgstat_assoc_relation = Module._pgstat_assoc_relation = e => (_pgstat_assoc_relation = Module._pgstat_assoc_relation = wasmExports.pgstat_assoc_relation)(e),\n        _ExtendBufferedRel = Module._ExtendBufferedRel = (e, t, r, a) => (_ExtendBufferedRel = Module._ExtendBufferedRel = wasmExports.ExtendBufferedRel)(e, t, r, a),\n        _LockBufferForCleanup = Module._LockBufferForCleanup = e => (_LockBufferForCleanup = Module._LockBufferForCleanup = wasmExports.LockBufferForCleanup)(e),\n        _smgrread = Module._smgrread = (e, t, r, a) => (_smgrread = Module._smgrread = wasmExports.smgrread)(e, t, r, a),\n        _LockRelationForExtension = Module._LockRelationForExtension = (e, t) => (_LockRelationForExtension = Module._LockRelationForExtension = wasmExports.LockRelationForExtension)(e, t),\n        _UnlockRelationForExtension = Module._UnlockRelationForExtension = (e, t) => (_UnlockRelationForExtension = Module._UnlockRelationForExtension = wasmExports.UnlockRelationForExtension)(e, t),\n        _BufferGetBlockNumber = Module._BufferGetBlockNumber = e => (_BufferGetBlockNumber = Module._BufferGetBlockNumber = wasmExports.BufferGetBlockNumber)(e),\n        _bsearch = Module._bsearch = (e, t, r, a, o) => (_bsearch = Module._bsearch = wasmExports.bsearch)(e, t, r, a, o),\n        _set_errcontext_domain = Module._set_errcontext_domain = e => (_set_errcontext_domain = Module._set_errcontext_domain = wasmExports.set_errcontext_domain)(e),\n        _errcontext_msg = Module._errcontext_msg = (e, t) => (_errcontext_msg = Module._errcontext_msg = wasmExports.errcontext_msg)(e, t),\n        _GetAccessStrategy = Module._GetAccessStrategy = e => (_GetAccessStrategy = Module._GetAccessStrategy = wasmExports.GetAccessStrategy)(e),\n        _FreeAccessStrategy = Module._FreeAccessStrategy = e => (_FreeAccessStrategy = Module._FreeAccessStrategy = wasmExports.FreeAccessStrategy)(e),\n        _ConditionalLockBuffer = Module._ConditionalLockBuffer = e => (_ConditionalLockBuffer = Module._ConditionalLockBuffer = wasmExports.ConditionalLockBuffer)(e),\n        _TestForOldSnapshot_impl = Module._TestForOldSnapshot_impl = (e, t) => (_TestForOldSnapshot_impl = Module._TestForOldSnapshot_impl = wasmExports.TestForOldSnapshot_impl)(e, t),\n        _calloc = Module._calloc = (e, t) => (_calloc = Module._calloc = wasmExports.calloc)(e, t),\n        _have_free_buffer = Module._have_free_buffer = () => (_have_free_buffer = Module._have_free_buffer = wasmExports.have_free_buffer)(),\n        _palloc0 = Module._palloc0 = e => (_palloc0 = Module._palloc0 = wasmExports.palloc0)(e),\n        _resetStringInfo = Module._resetStringInfo = e => (_resetStringInfo = Module._resetStringInfo = wasmExports.resetStringInfo)(e),\n        _appendStringInfoChar = Module._appendStringInfoChar = (e, t) => (_appendStringInfoChar = Module._appendStringInfoChar = wasmExports.appendStringInfoChar)(e, t),\n        _appendBinaryStringInfo = Module._appendBinaryStringInfo = (e, t, r) => (_appendBinaryStringInfo = Module._appendBinaryStringInfo = wasmExports.appendBinaryStringInfo)(e, t, r),\n        _errdetail_internal = Module._errdetail_internal = (e, t) => (_errdetail_internal = Module._errdetail_internal = wasmExports.errdetail_internal)(e, t),\n        _strcpy = Module._strcpy = (e, t) => (_strcpy = Module._strcpy = wasmExports.strcpy)(e, t),\n        _LWLockRegisterTranche = Module._LWLockRegisterTranche = (e, t) => (_LWLockRegisterTranche = Module._LWLockRegisterTranche = wasmExports.LWLockRegisterTranche)(e, t),\n        _GetNamedLWLockTranche = Module._GetNamedLWLockTranche = e => (_GetNamedLWLockTranche = Module._GetNamedLWLockTranche = wasmExports.GetNamedLWLockTranche)(e),\n        _LWLockNewTrancheId = Module._LWLockNewTrancheId = () => (_LWLockNewTrancheId = Module._LWLockNewTrancheId = wasmExports.LWLockNewTrancheId)(),\n        _RequestNamedLWLockTranche = Module._RequestNamedLWLockTranche = (e, t) => (_RequestNamedLWLockTranche = Module._RequestNamedLWLockTranche = wasmExports.RequestNamedLWLockTranche)(e, t),\n        _pg_prng_double = Module._pg_prng_double = e => (_pg_prng_double = Module._pg_prng_double = wasmExports.pg_prng_double)(e),\n        _getpid = Module._getpid = () => (_getpid = Module._getpid = wasmExports.getpid)(),\n        _GetTransactionSnapshot = Module._GetTransactionSnapshot = () => (_GetTransactionSnapshot = Module._GetTransactionSnapshot = wasmExports.GetTransactionSnapshot)(),\n        _ConditionVariableSignal = Module._ConditionVariableSignal = e => (_ConditionVariableSignal = Module._ConditionVariableSignal = wasmExports.ConditionVariableSignal)(e),\n        _LockPage = Module._LockPage = (e, t, r) => (_LockPage = Module._LockPage = wasmExports.LockPage)(e, t, r),\n        _UnlockPage = Module._UnlockPage = (e, t, r) => (_UnlockPage = Module._UnlockPage = wasmExports.UnlockPage)(e, t, r),\n        _pgstat_progress_update_param = Module._pgstat_progress_update_param = (e, t) => (_pgstat_progress_update_param = Module._pgstat_progress_update_param = wasmExports.pgstat_progress_update_param)(e, t),\n        _list_make1_impl = Module._list_make1_impl = (e, t) => (_list_make1_impl = Module._list_make1_impl = wasmExports.list_make1_impl)(e, t),\n        _psprintf = Module._psprintf = (e, t) => (_psprintf = Module._psprintf = wasmExports.psprintf)(e, t),\n        _smgrtruncate = Module._smgrtruncate = (e, t, r, a) => (_smgrtruncate = Module._smgrtruncate = wasmExports.smgrtruncate)(e, t, r, a),\n        _log = Module._log = e => (_log = Module._log = wasmExports.log)(e),\n        _pairingheap_allocate = Module._pairingheap_allocate = (e, t) => (_pairingheap_allocate = Module._pairingheap_allocate = wasmExports.pairingheap_allocate)(e, t),\n        _pairingheap_add = Module._pairingheap_add = (e, t) => (_pairingheap_add = Module._pairingheap_add = wasmExports.pairingheap_add)(e, t),\n        _pairingheap_first = Module._pairingheap_first = e => (_pairingheap_first = Module._pairingheap_first = wasmExports.pairingheap_first)(e),\n        _pairingheap_remove_first = Module._pairingheap_remove_first = e => (_pairingheap_remove_first = Module._pairingheap_remove_first = wasmExports.pairingheap_remove_first)(e),\n        _bloom_create = Module._bloom_create = (e, t, r) => (_bloom_create = Module._bloom_create = wasmExports.bloom_create)(e, t, r),\n        _bloom_free = Module._bloom_free = e => (_bloom_free = Module._bloom_free = wasmExports.bloom_free)(e),\n        _bloom_add_element = Module._bloom_add_element = (e, t, r) => (_bloom_add_element = Module._bloom_add_element = wasmExports.bloom_add_element)(e, t, r),\n        _hash_bytes_extended = Module._hash_bytes_extended = (e, t, r) => (_hash_bytes_extended = Module._hash_bytes_extended = wasmExports.hash_bytes_extended)(e, t, r),\n        _bloom_lacks_element = Module._bloom_lacks_element = (e, t, r) => (_bloom_lacks_element = Module._bloom_lacks_element = wasmExports.bloom_lacks_element)(e, t, r),\n        _bloom_prop_bits_set = Module._bloom_prop_bits_set = e => (_bloom_prop_bits_set = Module._bloom_prop_bits_set = wasmExports.bloom_prop_bits_set)(e),\n        _pg_popcount = Module._pg_popcount = (e, t) => (_pg_popcount = Module._pg_popcount = wasmExports.pg_popcount)(e, t),\n        _memcmp = Module._memcmp = (e, t, r) => (_memcmp = Module._memcmp = wasmExports.memcmp)(e, t, r),\n        _bms_make_singleton = Module._bms_make_singleton = e => (_bms_make_singleton = Module._bms_make_singleton = wasmExports.bms_make_singleton)(e),\n        _bms_add_members = Module._bms_add_members = (e, t) => (_bms_add_members = Module._bms_add_members = wasmExports.bms_add_members)(e, t),\n        _bms_add_member = Module._bms_add_member = (e, t) => (_bms_add_member = Module._bms_add_member = wasmExports.bms_add_member)(e, t),\n        _bms_del_member = Module._bms_del_member = (e, t) => (_bms_del_member = Module._bms_del_member = wasmExports.bms_del_member)(e, t),\n        _check_stack_depth = Module._check_stack_depth = () => (_check_stack_depth = Module._check_stack_depth = wasmExports.check_stack_depth)(),\n        _parser_errposition = Module._parser_errposition = (e, t) => (_parser_errposition = Module._parser_errposition = wasmExports.parser_errposition)(e, t),\n        _makeVar = Module._makeVar = (e, t, r, a, o, s) => (_makeVar = Module._makeVar = wasmExports.makeVar)(e, t, r, a, o, s),\n        _bms_union = Module._bms_union = (e, t) => (_bms_union = Module._bms_union = wasmExports.bms_union)(e, t),\n        _varstr_levenshtein_less_equal = Module._varstr_levenshtein_less_equal = (e, t, r, a, o, s, l, n, _) => (_varstr_levenshtein_less_equal = Module._varstr_levenshtein_less_equal = wasmExports.varstr_levenshtein_less_equal)(e, t, r, a, o, s, l, n, _),\n        _SearchSysCacheExists = Module._SearchSysCacheExists = (e, t, r, a, o) => (_SearchSysCacheExists = Module._SearchSysCacheExists = wasmExports.SearchSysCacheExists)(e, t, r, a, o),\n        _MemoryContextAllocZeroAligned = Module._MemoryContextAllocZeroAligned = (e, t) => (_MemoryContextAllocZeroAligned = Module._MemoryContextAllocZeroAligned = wasmExports.MemoryContextAllocZeroAligned)(e, t),\n        _makeString = Module._makeString = e => (_makeString = Module._makeString = wasmExports.makeString)(e),\n        _addRTEPermissionInfo = Module._addRTEPermissionInfo = (e, t) => (_addRTEPermissionInfo = Module._addRTEPermissionInfo = wasmExports.addRTEPermissionInfo)(e, t),\n        _copyObjectImpl = Module._copyObjectImpl = e => (_copyObjectImpl = Module._copyObjectImpl = wasmExports.copyObjectImpl)(e),\n        _exprType = Module._exprType = e => (_exprType = Module._exprType = wasmExports.exprType)(e),\n        _lappend_oid = Module._lappend_oid = (e, t) => (_lappend_oid = Module._lappend_oid = wasmExports.lappend_oid)(e, t),\n        _exprTypmod = Module._exprTypmod = e => (_exprTypmod = Module._exprTypmod = wasmExports.exprTypmod)(e),\n        _exprLocation = Module._exprLocation = e => (_exprLocation = Module._exprLocation = wasmExports.exprLocation)(e),\n        _CreateTemplateTupleDesc = Module._CreateTemplateTupleDesc = e => (_CreateTemplateTupleDesc = Module._CreateTemplateTupleDesc = wasmExports.CreateTemplateTupleDesc)(e),\n        _TupleDescInitEntry = Module._TupleDescInitEntry = (e, t, r, a, o, s) => (_TupleDescInitEntry = Module._TupleDescInitEntry = wasmExports.TupleDescInitEntry)(e, t, r, a, o, s),\n        _TupleDescInitEntryCollation = Module._TupleDescInitEntryCollation = (e, t, r) => (_TupleDescInitEntryCollation = Module._TupleDescInitEntryCollation = wasmExports.TupleDescInitEntryCollation)(e, t, r),\n        _typenameTypeIdAndMod = Module._typenameTypeIdAndMod = (e, t, r, a) => (_typenameTypeIdAndMod = Module._typenameTypeIdAndMod = wasmExports.typenameTypeIdAndMod)(e, t, r, a),\n        _format_type_be = Module._format_type_be = e => (_format_type_be = Module._format_type_be = wasmExports.format_type_be)(e),\n        _list_concat = Module._list_concat = (e, t) => (_list_concat = Module._list_concat = wasmExports.list_concat)(e, t),\n        _list_copy = Module._list_copy = e => (_list_copy = Module._list_copy = wasmExports.list_copy)(e),\n        _relation_open = Module._relation_open = (e, t) => (_relation_open = Module._relation_open = wasmExports.relation_open)(e, t),\n        _relation_close = Module._relation_close = (e, t) => (_relation_close = Module._relation_close = wasmExports.relation_close)(e, t),\n        _makeTargetEntry = Module._makeTargetEntry = (e, t, r, a) => (_makeTargetEntry = Module._makeTargetEntry = wasmExports.makeTargetEntry)(e, t, r, a),\n        _get_attname = Module._get_attname = (e, t, r) => (_get_attname = Module._get_attname = wasmExports.get_attname)(e, t, r),\n        _SearchSysCache2 = Module._SearchSysCache2 = (e, t, r) => (_SearchSysCache2 = Module._SearchSysCache2 = wasmExports.SearchSysCache2)(e, t, r),\n        _ReleaseSysCache = Module._ReleaseSysCache = e => (_ReleaseSysCache = Module._ReleaseSysCache = wasmExports.ReleaseSysCache)(e),\n        _RangeVarGetRelidExtended = Module._RangeVarGetRelidExtended = (e, t, r, a, o) => (_RangeVarGetRelidExtended = Module._RangeVarGetRelidExtended = wasmExports.RangeVarGetRelidExtended)(e, t, r, a, o),\n        _pg_mbstrlen_with_len = Module._pg_mbstrlen_with_len = (e, t) => (_pg_mbstrlen_with_len = Module._pg_mbstrlen_with_len = wasmExports.pg_mbstrlen_with_len)(e, t),\n        _errposition = Module._errposition = e => (_errposition = Module._errposition = wasmExports.errposition)(e),\n        _numeric_in = Module._numeric_in = e => (_numeric_in = Module._numeric_in = wasmExports.numeric_in)(e),\n        _DirectFunctionCall3Coll = Module._DirectFunctionCall3Coll = (e, t, r, a, o) => (_DirectFunctionCall3Coll = Module._DirectFunctionCall3Coll = wasmExports.DirectFunctionCall3Coll)(e, t, r, a, o),\n        _bit_in = Module._bit_in = e => (_bit_in = Module._bit_in = wasmExports.bit_in)(e),\n        _NameListToString = Module._NameListToString = e => (_NameListToString = Module._NameListToString = wasmExports.NameListToString)(e),\n        _appendStringInfoString = Module._appendStringInfoString = (e, t) => (_appendStringInfoString = Module._appendStringInfoString = wasmExports.appendStringInfoString)(e, t),\n        _lookup_type_cache = Module._lookup_type_cache = (e, t) => (_lookup_type_cache = Module._lookup_type_cache = wasmExports.lookup_type_cache)(e, t),\n        _CacheRegisterSyscacheCallback = Module._CacheRegisterSyscacheCallback = (e, t, r) => (_CacheRegisterSyscacheCallback = Module._CacheRegisterSyscacheCallback = wasmExports.CacheRegisterSyscacheCallback)(e, t, r),\n        _SearchSysCache1 = Module._SearchSysCache1 = (e, t) => (_SearchSysCache1 = Module._SearchSysCache1 = wasmExports.SearchSysCache1)(e, t),\n        _list_make2_impl = Module._list_make2_impl = (e, t, r) => (_list_make2_impl = Module._list_make2_impl = wasmExports.list_make2_impl)(e, t, r),\n        _get_base_element_type = Module._get_base_element_type = e => (_get_base_element_type = Module._get_base_element_type = wasmExports.get_base_element_type)(e),\n        _downcase_truncate_identifier = Module._downcase_truncate_identifier = (e, t, r) => (_downcase_truncate_identifier = Module._downcase_truncate_identifier = wasmExports.downcase_truncate_identifier)(e, t, r),\n        _pg_database_encoding_max_length = Module._pg_database_encoding_max_length = () => (_pg_database_encoding_max_length = Module._pg_database_encoding_max_length = wasmExports.pg_database_encoding_max_length)(),\n        _truncate_identifier = Module._truncate_identifier = (e, t, r) => (_truncate_identifier = Module._truncate_identifier = wasmExports.truncate_identifier)(e, t, r),\n        _scanner_isspace = Module._scanner_isspace = e => (_scanner_isspace = Module._scanner_isspace = wasmExports.scanner_isspace)(e),\n        _get_typcollation = Module._get_typcollation = e => (_get_typcollation = Module._get_typcollation = wasmExports.get_typcollation)(e),\n        _list_delete_cell = Module._list_delete_cell = (e, t) => (_list_delete_cell = Module._list_delete_cell = wasmExports.list_delete_cell)(e, t),\n        _makeTypeNameFromNameList = Module._makeTypeNameFromNameList = e => (_makeTypeNameFromNameList = Module._makeTypeNameFromNameList = wasmExports.makeTypeNameFromNameList)(e),\n        _SysCacheGetAttrNotNull = Module._SysCacheGetAttrNotNull = (e, t, r) => (_SysCacheGetAttrNotNull = Module._SysCacheGetAttrNotNull = wasmExports.SysCacheGetAttrNotNull)(e, t, r),\n        _text_to_cstring = Module._text_to_cstring = e => (_text_to_cstring = Module._text_to_cstring = wasmExports.text_to_cstring)(e),\n        _stringToNode = Module._stringToNode = e => (_stringToNode = Module._stringToNode = wasmExports.stringToNode)(e),\n        _bms_is_member = Module._bms_is_member = (e, t) => (_bms_is_member = Module._bms_is_member = wasmExports.bms_is_member)(e, t),\n        _bms_free = Module._bms_free = e => (_bms_free = Module._bms_free = wasmExports.bms_free)(e),\n        _core_yylex = Module._core_yylex = (e, t, r) => (_core_yylex = Module._core_yylex = wasmExports.core_yylex)(e, t, r),\n        _getc = Module._getc = e => (_getc = Module._getc = wasmExports.getc)(e),\n        _ferror = Module._ferror = e => (_ferror = Module._ferror = wasmExports.ferror)(e),\n        _fread = Module._fread = (e, t, r, a) => (_fread = Module._fread = wasmExports.fread)(e, t, r, a),\n        _clearerr = Module._clearerr = e => (_clearerr = Module._clearerr = wasmExports.clearerr)(e),\n        _scanner_init = Module._scanner_init = (e, t, r, a) => (_scanner_init = Module._scanner_init = wasmExports.scanner_init)(e, t, r, a),\n        _scanner_finish = Module._scanner_finish = e => (_scanner_finish = Module._scanner_finish = wasmExports.scanner_finish)(e),\n        _get_namespace_name = Module._get_namespace_name = e => (_get_namespace_name = Module._get_namespace_name = wasmExports.get_namespace_name)(e),\n        _lookup_rowtype_tupdesc = Module._lookup_rowtype_tupdesc = (e, t) => (_lookup_rowtype_tupdesc = Module._lookup_rowtype_tupdesc = wasmExports.lookup_rowtype_tupdesc)(e, t),\n        _DecrTupleDescRefCount = Module._DecrTupleDescRefCount = e => (_DecrTupleDescRefCount = Module._DecrTupleDescRefCount = wasmExports.DecrTupleDescRefCount)(e),\n        _relation_openrv = Module._relation_openrv = (e, t) => (_relation_openrv = Module._relation_openrv = wasmExports.relation_openrv)(e, t),\n        _errdetail_relkind_not_supported = Module._errdetail_relkind_not_supported = e => (_errdetail_relkind_not_supported = Module._errdetail_relkind_not_supported = wasmExports.errdetail_relkind_not_supported)(e),\n        _object_aclcheck = Module._object_aclcheck = (e, t, r, a) => (_object_aclcheck = Module._object_aclcheck = wasmExports.object_aclcheck)(e, t, r, a),\n        _aclcheck_error = Module._aclcheck_error = (e, t, r) => (_aclcheck_error = Module._aclcheck_error = wasmExports.aclcheck_error)(e, t, r),\n        _pg_class_aclcheck = Module._pg_class_aclcheck = (e, t, r) => (_pg_class_aclcheck = Module._pg_class_aclcheck = wasmExports.pg_class_aclcheck)(e, t, r),\n        _get_relkind_objtype = Module._get_relkind_objtype = e => (_get_relkind_objtype = Module._get_relkind_objtype = wasmExports.get_relkind_objtype)(e),\n        _list_make3_impl = Module._list_make3_impl = (e, t, r, a) => (_list_make3_impl = Module._list_make3_impl = wasmExports.list_make3_impl)(e, t, r, a),\n        _quote_qualified_identifier = Module._quote_qualified_identifier = (e, t) => (_quote_qualified_identifier = Module._quote_qualified_identifier = wasmExports.quote_qualified_identifier)(e, t),\n        _table_openrv = Module._table_openrv = (e, t) => (_table_openrv = Module._table_openrv = wasmExports.table_openrv)(e, t),\n        _equal = Module._equal = (e, t) => (_equal = Module._equal = wasmExports.equal)(e, t),\n        _RelationGetIndexList = Module._RelationGetIndexList = e => (_RelationGetIndexList = Module._RelationGetIndexList = wasmExports.RelationGetIndexList)(e),\n        _pg_detoast_datum = Module._pg_detoast_datum = e => (_pg_detoast_datum = Module._pg_detoast_datum = wasmExports.pg_detoast_datum)(e),\n        _SysCacheGetAttr = Module._SysCacheGetAttr = (e, t, r, a) => (_SysCacheGetAttr = Module._SysCacheGetAttr = wasmExports.SysCacheGetAttr)(e, t, r, a),\n        _deconstruct_array_builtin = Module._deconstruct_array_builtin = (e, t, r, a, o) => (_deconstruct_array_builtin = Module._deconstruct_array_builtin = wasmExports.deconstruct_array_builtin)(e, t, r, a, o),\n        _untransformRelOptions = Module._untransformRelOptions = e => (_untransformRelOptions = Module._untransformRelOptions = wasmExports.untransformRelOptions)(e),\n        _transformExpr = Module._transformExpr = (e, t, r) => (_transformExpr = Module._transformExpr = wasmExports.transformExpr)(e, t, r),\n        _get_rel_namespace = Module._get_rel_namespace = e => (_get_rel_namespace = Module._get_rel_namespace = wasmExports.get_rel_namespace)(e),\n        _get_rel_name = Module._get_rel_name = e => (_get_rel_name = Module._get_rel_name = wasmExports.get_rel_name)(e),\n        _makeRangeVar = Module._makeRangeVar = (e, t, r) => (_makeRangeVar = Module._makeRangeVar = wasmExports.makeRangeVar)(e, t, r),\n        _makeDefElem = Module._makeDefElem = (e, t, r) => (_makeDefElem = Module._makeDefElem = wasmExports.makeDefElem)(e, t, r),\n        _makeRangeVarFromNameList = Module._makeRangeVarFromNameList = e => (_makeRangeVarFromNameList = Module._makeRangeVarFromNameList = wasmExports.makeRangeVarFromNameList)(e),\n        _coerce_to_target_type = Module._coerce_to_target_type = (e, t, r, a, o, s, l, n) => (_coerce_to_target_type = Module._coerce_to_target_type = wasmExports.coerce_to_target_type)(e, t, r, a, o, s, l, n),\n        _LookupTypeName = Module._LookupTypeName = (e, t, r, a) => (_LookupTypeName = Module._LookupTypeName = wasmExports.LookupTypeName)(e, t, r, a),\n        _GetSysCacheOid = Module._GetSysCacheOid = (e, t, r, a, o, s) => (_GetSysCacheOid = Module._GetSysCacheOid = wasmExports.GetSysCacheOid)(e, t, r, a, o, s),\n        _construct_array_builtin = Module._construct_array_builtin = (e, t, r) => (_construct_array_builtin = Module._construct_array_builtin = wasmExports.construct_array_builtin)(e, t, r),\n        _get_collation_oid = Module._get_collation_oid = (e, t) => (_get_collation_oid = Module._get_collation_oid = wasmExports.get_collation_oid)(e, t),\n        _typeStringToTypeName = Module._typeStringToTypeName = (e, t) => (_typeStringToTypeName = Module._typeStringToTypeName = wasmExports.typeStringToTypeName)(e, t),\n        _raw_parser = Module._raw_parser = (e, t) => (_raw_parser = Module._raw_parser = wasmExports.raw_parser)(e, t),\n        _errsave_start = Module._errsave_start = (e, t) => (_errsave_start = Module._errsave_start = wasmExports.errsave_start)(e, t),\n        _errsave_finish = Module._errsave_finish = (e, t, r, a) => (_errsave_finish = Module._errsave_finish = wasmExports.errsave_finish)(e, t, r, a),\n        _defGetBoolean = Module._defGetBoolean = e => (_defGetBoolean = Module._defGetBoolean = wasmExports.defGetBoolean)(e),\n        _list_delete_last = Module._list_delete_last = e => (_list_delete_last = Module._list_delete_last = wasmExports.list_delete_last)(e),\n        _format_type_with_typemod = Module._format_type_with_typemod = (e, t) => (_format_type_with_typemod = Module._format_type_with_typemod = wasmExports.format_type_with_typemod)(e, t),\n        _list_member = Module._list_member = (e, t) => (_list_member = Module._list_member = wasmExports.list_member)(e, t),\n        _list_member_int = Module._list_member_int = (e, t) => (_list_member_int = Module._list_member_int = wasmExports.list_member_int)(e, t),\n        _list_sort = Module._list_sort = (e, t) => (_list_sort = Module._list_sort = wasmExports.list_sort)(e, t),\n        _get_element_type = Module._get_element_type = e => (_get_element_type = Module._get_element_type = wasmExports.get_element_type)(e),\n        _makeBoolean = Module._makeBoolean = e => (_makeBoolean = Module._makeBoolean = wasmExports.makeBoolean)(e),\n        _makeInteger = Module._makeInteger = e => (_makeInteger = Module._makeInteger = wasmExports.makeInteger)(e),\n        _makeTypeName = Module._makeTypeName = e => (_makeTypeName = Module._makeTypeName = wasmExports.makeTypeName)(e),\n        _list_make4_impl = Module._list_make4_impl = (e, t, r, a, o) => (_list_make4_impl = Module._list_make4_impl = wasmExports.list_make4_impl)(e, t, r, a, o),\n        _isxdigit = Module._isxdigit = e => (_isxdigit = Module._isxdigit = wasmExports.isxdigit)(e),\n        _strip_implicit_coercions = Module._strip_implicit_coercions = e => (_strip_implicit_coercions = Module._strip_implicit_coercions = wasmExports.strip_implicit_coercions)(e),\n        _SearchSysCacheList = Module._SearchSysCacheList = (e, t, r, a, o) => (_SearchSysCacheList = Module._SearchSysCacheList = wasmExports.SearchSysCacheList)(e, t, r, a, o),\n        _ReleaseCatCacheList = Module._ReleaseCatCacheList = e => (_ReleaseCatCacheList = Module._ReleaseCatCacheList = wasmExports.ReleaseCatCacheList)(e),\n        _get_sortgroupref_tle = Module._get_sortgroupref_tle = (e, t) => (_get_sortgroupref_tle = Module._get_sortgroupref_tle = wasmExports.get_sortgroupref_tle)(e, t),\n        _type_is_rowtype = Module._type_is_rowtype = e => (_type_is_rowtype = Module._type_is_rowtype = wasmExports.type_is_rowtype)(e),\n        _bms_next_member = Module._bms_next_member = (e, t) => (_bms_next_member = Module._bms_next_member = wasmExports.bms_next_member)(e, t),\n        _MemoryContextReset = Module._MemoryContextReset = e => (_MemoryContextReset = Module._MemoryContextReset = wasmExports.MemoryContextReset)(e),\n        _abort = Module._abort = () => (_abort = Module._abort = wasmExports.abort)(),\n        _heap_getnext = Module._heap_getnext = (e, t) => (_heap_getnext = Module._heap_getnext = wasmExports.heap_getnext)(e, t),\n        _OidOutputFunctionCall = Module._OidOutputFunctionCall = (e, t) => (_OidOutputFunctionCall = Module._OidOutputFunctionCall = wasmExports.OidOutputFunctionCall)(e, t),\n        _atoi = Module._atoi = e => (_atoi = Module._atoi = wasmExports.atoi)(e),\n        _GetConfigOption = Module._GetConfigOption = (e, t, r) => (_GetConfigOption = Module._GetConfigOption = wasmExports.GetConfigOption)(e, t, r),\n        _pg_strong_random = Module._pg_strong_random = (e, t) => (_pg_strong_random = Module._pg_strong_random = wasmExports.pg_strong_random)(e, t),\n        _pg_prng_seed_check = Module._pg_prng_seed_check = e => (_pg_prng_seed_check = Module._pg_prng_seed_check = wasmExports.pg_prng_seed_check)(e),\n        _pg_prng_seed = Module._pg_prng_seed = (e, t) => (_pg_prng_seed = Module._pg_prng_seed = wasmExports.pg_prng_seed)(e, t),\n        _fputc = Module._fputc = (e, t) => (_fputc = Module._fputc = wasmExports.fputc)(e, t),\n        _time = Module._time = e => (_time = Module._time = wasmExports.time)(e),\n        _TimestampDifferenceMilliseconds = Module._TimestampDifferenceMilliseconds = (e, t) => (_TimestampDifferenceMilliseconds = Module._TimestampDifferenceMilliseconds = wasmExports.TimestampDifferenceMilliseconds)(e, t),\n        _ProcessConfigFile = Module._ProcessConfigFile = e => (_ProcessConfigFile = Module._ProcessConfigFile = wasmExports.ProcessConfigFile)(e),\n        _send = Module._send = (e, t, r, a) => (_send = Module._send = wasmExports.send)(e, t, r, a),\n        _parse_bool = Module._parse_bool = (e, t) => (_parse_bool = Module._parse_bool = wasmExports.parse_bool)(e, t),\n        _enlargeStringInfo = Module._enlargeStringInfo = (e, t) => (_enlargeStringInfo = Module._enlargeStringInfo = wasmExports.enlargeStringInfo)(e, t),\n        _BackgroundWorkerInitializeConnectionByOid = Module._BackgroundWorkerInitializeConnectionByOid = (e, t, r) => (_BackgroundWorkerInitializeConnectionByOid = Module._BackgroundWorkerInitializeConnectionByOid = wasmExports.BackgroundWorkerInitializeConnectionByOid)(e, t, r),\n        _BackgroundWorkerUnblockSignals = Module._BackgroundWorkerUnblockSignals = () => (_BackgroundWorkerUnblockSignals = Module._BackgroundWorkerUnblockSignals = wasmExports.BackgroundWorkerUnblockSignals)(),\n        _pg_getnameinfo_all = Module._pg_getnameinfo_all = (e, t, r, a, o, s, l) => (_pg_getnameinfo_all = Module._pg_getnameinfo_all = wasmExports.pg_getnameinfo_all)(e, t, r, a, o, s, l),\n        _gai_strerror = Module._gai_strerror = e => (_gai_strerror = Module._gai_strerror = wasmExports.gai_strerror)(e),\n        _SignalHandlerForConfigReload = Module._SignalHandlerForConfigReload = e => (_SignalHandlerForConfigReload = Module._SignalHandlerForConfigReload = wasmExports.SignalHandlerForConfigReload)(e),\n        _fwrite = Module._fwrite = (e, t, r, a) => (_fwrite = Module._fwrite = wasmExports.fwrite)(e, t, r, a),\n        _SignalHandlerForShutdownRequest = Module._SignalHandlerForShutdownRequest = e => (_SignalHandlerForShutdownRequest = Module._SignalHandlerForShutdownRequest = wasmExports.SignalHandlerForShutdownRequest)(e),\n        _EmitErrorReport = Module._EmitErrorReport = () => (_EmitErrorReport = Module._EmitErrorReport = wasmExports.EmitErrorReport)(),\n        _FlushErrorState = Module._FlushErrorState = () => (_FlushErrorState = Module._FlushErrorState = wasmExports.FlushErrorState)(),\n        _die = Module._die = e => (_die = Module._die = wasmExports.die)(e),\n        _MultiXactIdPrecedes = Module._MultiXactIdPrecedes = (e, t) => (_MultiXactIdPrecedes = Module._MultiXactIdPrecedes = wasmExports.MultiXactIdPrecedes)(e, t),\n        _CreateTupleDescCopy = Module._CreateTupleDescCopy = e => (_CreateTupleDescCopy = Module._CreateTupleDescCopy = wasmExports.CreateTupleDescCopy)(e),\n        _pgstat_report_activity = Module._pgstat_report_activity = (e, t) => (_pgstat_report_activity = Module._pgstat_report_activity = wasmExports.pgstat_report_activity)(e, t),\n        _DirectFunctionCall2Coll = Module._DirectFunctionCall2Coll = (e, t, r, a) => (_DirectFunctionCall2Coll = Module._DirectFunctionCall2Coll = wasmExports.DirectFunctionCall2Coll)(e, t, r, a),\n        _RegisterBackgroundWorker = Module._RegisterBackgroundWorker = e => (_RegisterBackgroundWorker = Module._RegisterBackgroundWorker = wasmExports.RegisterBackgroundWorker)(e),\n        _RegisterDynamicBackgroundWorker = Module._RegisterDynamicBackgroundWorker = (e, t) => (_RegisterDynamicBackgroundWorker = Module._RegisterDynamicBackgroundWorker = wasmExports.RegisterDynamicBackgroundWorker)(e, t),\n        _WaitForBackgroundWorkerStartup = Module._WaitForBackgroundWorkerStartup = (e, t) => (_WaitForBackgroundWorkerStartup = Module._WaitForBackgroundWorkerStartup = wasmExports.WaitForBackgroundWorkerStartup)(e, t),\n        _WaitForBackgroundWorkerShutdown = Module._WaitForBackgroundWorkerShutdown = e => (_WaitForBackgroundWorkerShutdown = Module._WaitForBackgroundWorkerShutdown = wasmExports.WaitForBackgroundWorkerShutdown)(e),\n        _GetXLogReplayRecPtr = Module._GetXLogReplayRecPtr = e => (_GetXLogReplayRecPtr = Module._GetXLogReplayRecPtr = wasmExports.GetXLogReplayRecPtr)(e),\n        _gettimeofday = Module._gettimeofday = (e, t) => (_gettimeofday = Module._gettimeofday = wasmExports.gettimeofday)(e, t),\n        _sscanf = Module._sscanf = (e, t, r) => (_sscanf = Module._sscanf = wasmExports.sscanf)(e, t, r),\n        _get_call_result_type = Module._get_call_result_type = (e, t, r) => (_get_call_result_type = Module._get_call_result_type = wasmExports.get_call_result_type)(e, t, r),\n        _HeapTupleHeaderGetDatum = Module._HeapTupleHeaderGetDatum = e => (_HeapTupleHeaderGetDatum = Module._HeapTupleHeaderGetDatum = wasmExports.HeapTupleHeaderGetDatum)(e),\n        _wal_segment_close = Module._wal_segment_close = e => (_wal_segment_close = Module._wal_segment_close = wasmExports.wal_segment_close)(e),\n        _wal_segment_open = Module._wal_segment_open = (e, t, r) => (_wal_segment_open = Module._wal_segment_open = wasmExports.wal_segment_open)(e, t, r),\n        _GetFlushRecPtr = Module._GetFlushRecPtr = e => (_GetFlushRecPtr = Module._GetFlushRecPtr = wasmExports.GetFlushRecPtr)(e),\n        _XLogReadRecord = Module._XLogReadRecord = (e, t) => (_XLogReadRecord = Module._XLogReadRecord = wasmExports.XLogReadRecord)(e, t),\n        _RmgrNotFound = Module._RmgrNotFound = e => (_RmgrNotFound = Module._RmgrNotFound = wasmExports.RmgrNotFound)(e),\n        _CacheRegisterRelcacheCallback = Module._CacheRegisterRelcacheCallback = (e, t) => (_CacheRegisterRelcacheCallback = Module._CacheRegisterRelcacheCallback = wasmExports.CacheRegisterRelcacheCallback)(e, t),\n        _free_attrmap = Module._free_attrmap = e => (_free_attrmap = Module._free_attrmap = wasmExports.free_attrmap)(e),\n        _BuildIndexInfo = Module._BuildIndexInfo = e => (_BuildIndexInfo = Module._BuildIndexInfo = wasmExports.BuildIndexInfo)(e),\n        _hash_seq_term = Module._hash_seq_term = e => (_hash_seq_term = Module._hash_seq_term = wasmExports.hash_seq_term)(e),\n        _PushActiveSnapshot = Module._PushActiveSnapshot = e => (_PushActiveSnapshot = Module._PushActiveSnapshot = wasmExports.PushActiveSnapshot)(e),\n        _PopActiveSnapshot = Module._PopActiveSnapshot = () => (_PopActiveSnapshot = Module._PopActiveSnapshot = wasmExports.PopActiveSnapshot)(),\n        _MakePerTupleExprContext = Module._MakePerTupleExprContext = e => (_MakePerTupleExprContext = Module._MakePerTupleExprContext = wasmExports.MakePerTupleExprContext)(e),\n        _ExecInitExpr = Module._ExecInitExpr = (e, t) => (_ExecInitExpr = Module._ExecInitExpr = wasmExports.ExecInitExpr)(e, t),\n        _FreeExecutorState = Module._FreeExecutorState = e => (_FreeExecutorState = Module._FreeExecutorState = wasmExports.FreeExecutorState)(e),\n        _list_member_oid = Module._list_member_oid = (e, t) => (_list_member_oid = Module._list_member_oid = wasmExports.list_member_oid)(e, t),\n        _MemoryContextStrdup = Module._MemoryContextStrdup = (e, t) => (_MemoryContextStrdup = Module._MemoryContextStrdup = wasmExports.MemoryContextStrdup)(e, t),\n        _pq_getmsgint = Module._pq_getmsgint = (e, t) => (_pq_getmsgint = Module._pq_getmsgint = wasmExports.pq_getmsgint)(e, t),\n        _CreateExecutorState = Module._CreateExecutorState = () => (_CreateExecutorState = Module._CreateExecutorState = wasmExports.CreateExecutorState)(),\n        _ExecInitRangeTable = Module._ExecInitRangeTable = (e, t, r) => (_ExecInitRangeTable = Module._ExecInitRangeTable = wasmExports.ExecInitRangeTable)(e, t, r),\n        _getTypeInputInfo = Module._getTypeInputInfo = (e, t, r) => (_getTypeInputInfo = Module._getTypeInputInfo = wasmExports.getTypeInputInfo)(e, t, r),\n        _ExecStoreVirtualTuple = Module._ExecStoreVirtualTuple = e => (_ExecStoreVirtualTuple = Module._ExecStoreVirtualTuple = wasmExports.ExecStoreVirtualTuple)(e),\n        _execute_attr_map_slot = Module._execute_attr_map_slot = (e, t, r) => (_execute_attr_map_slot = Module._execute_attr_map_slot = wasmExports.execute_attr_map_slot)(e, t, r),\n        _slot_getsomeattrs_int = Module._slot_getsomeattrs_int = (e, t) => (_slot_getsomeattrs_int = Module._slot_getsomeattrs_int = wasmExports.slot_getsomeattrs_int)(e, t),\n        _GetUserNameFromId = Module._GetUserNameFromId = (e, t) => (_GetUserNameFromId = Module._GetUserNameFromId = wasmExports.GetUserNameFromId)(e, t),\n        _makeStringInfo = Module._makeStringInfo = () => (_makeStringInfo = Module._makeStringInfo = wasmExports.makeStringInfo)(),\n        _list_member_xid = Module._list_member_xid = (e, t) => (_list_member_xid = Module._list_member_xid = wasmExports.list_member_xid)(e, t),\n        _lappend_xid = Module._lappend_xid = (e, t) => (_lappend_xid = Module._lappend_xid = wasmExports.lappend_xid)(e, t),\n        _tuplestore_end = Module._tuplestore_end = e => (_tuplestore_end = Module._tuplestore_end = wasmExports.tuplestore_end)(e),\n        _quote_literal_cstr = Module._quote_literal_cstr = e => (_quote_literal_cstr = Module._quote_literal_cstr = wasmExports.quote_literal_cstr)(e),\n        _MakeSingleTupleTableSlot = Module._MakeSingleTupleTableSlot = (e, t) => (_MakeSingleTupleTableSlot = Module._MakeSingleTupleTableSlot = wasmExports.MakeSingleTupleTableSlot)(e, t),\n        _ExecDropSingleTupleTableSlot = Module._ExecDropSingleTupleTableSlot = e => (_ExecDropSingleTupleTableSlot = Module._ExecDropSingleTupleTableSlot = wasmExports.ExecDropSingleTupleTableSlot)(e),\n        _tuplestore_tuple_count = Module._tuplestore_tuple_count = e => (_tuplestore_tuple_count = Module._tuplestore_tuple_count = wasmExports.tuplestore_tuple_count)(e),\n        _quote_identifier = Module._quote_identifier = e => (_quote_identifier = Module._quote_identifier = wasmExports.quote_identifier)(e),\n        _BeginCopyFrom = Module._BeginCopyFrom = (e, t, r, a, o, s, l, n) => (_BeginCopyFrom = Module._BeginCopyFrom = wasmExports.BeginCopyFrom)(e, t, r, a, o, s, l, n),\n        _array_contains_nulls = Module._array_contains_nulls = e => (_array_contains_nulls = Module._array_contains_nulls = wasmExports.array_contains_nulls)(e),\n        _format_procedure = Module._format_procedure = e => (_format_procedure = Module._format_procedure = wasmExports.format_procedure)(e),\n        _pg_detoast_datum_packed = Module._pg_detoast_datum_packed = e => (_pg_detoast_datum_packed = Module._pg_detoast_datum_packed = wasmExports.pg_detoast_datum_packed)(e),\n        _cstring_to_text_with_len = Module._cstring_to_text_with_len = (e, t) => (_cstring_to_text_with_len = Module._cstring_to_text_with_len = wasmExports.cstring_to_text_with_len)(e, t),\n        _GenerationContextCreate = Module._GenerationContextCreate = (e, t, r, a, o) => (_GenerationContextCreate = Module._GenerationContextCreate = wasmExports.GenerationContextCreate)(e, t, r, a, o),\n        _BeginInternalSubTransaction = Module._BeginInternalSubTransaction = e => (_BeginInternalSubTransaction = Module._BeginInternalSubTransaction = wasmExports.BeginInternalSubTransaction)(e),\n        _RollbackAndReleaseCurrentSubTransaction = Module._RollbackAndReleaseCurrentSubTransaction = () => (_RollbackAndReleaseCurrentSubTransaction = Module._RollbackAndReleaseCurrentSubTransaction = wasmExports.RollbackAndReleaseCurrentSubTransaction)(),\n        _CopyErrorData = Module._CopyErrorData = () => (_CopyErrorData = Module._CopyErrorData = wasmExports.CopyErrorData)(),\n        _FreeErrorData = Module._FreeErrorData = e => (_FreeErrorData = Module._FreeErrorData = wasmExports.FreeErrorData)(e),\n        _RelidByRelfilenumber = Module._RelidByRelfilenumber = (e, t) => (_RelidByRelfilenumber = Module._RelidByRelfilenumber = wasmExports.RelidByRelfilenumber)(e, t),\n        _RelationIdGetRelation = Module._RelationIdGetRelation = e => (_RelationIdGetRelation = Module._RelationIdGetRelation = wasmExports.RelationIdGetRelation)(e),\n        _heap_deform_tuple = Module._heap_deform_tuple = (e, t, r, a) => (_heap_deform_tuple = Module._heap_deform_tuple = wasmExports.heap_deform_tuple)(e, t, r, a),\n        _RelationClose = Module._RelationClose = e => (_RelationClose = Module._RelationClose = wasmExports.RelationClose)(e),\n        _nocachegetattr = Module._nocachegetattr = (e, t, r) => (_nocachegetattr = Module._nocachegetattr = wasmExports.nocachegetattr)(e, t, r),\n        _XLogReaderAllocate = Module._XLogReaderAllocate = (e, t, r, a) => (_XLogReaderAllocate = Module._XLogReaderAllocate = wasmExports.XLogReaderAllocate)(e, t, r, a),\n        _XLogReaderFree = Module._XLogReaderFree = e => (_XLogReaderFree = Module._XLogReaderFree = wasmExports.XLogReaderFree)(e),\n        _OutputPluginPrepareWrite = Module._OutputPluginPrepareWrite = (e, t) => (_OutputPluginPrepareWrite = Module._OutputPluginPrepareWrite = wasmExports.OutputPluginPrepareWrite)(e, t),\n        _OutputPluginWrite = Module._OutputPluginWrite = (e, t) => (_OutputPluginWrite = Module._OutputPluginWrite = wasmExports.OutputPluginWrite)(e, t),\n        _OutputPluginUpdateProgress = Module._OutputPluginUpdateProgress = (e, t) => (_OutputPluginUpdateProgress = Module._OutputPluginUpdateProgress = wasmExports.OutputPluginUpdateProgress)(e, t),\n        _replorigin_by_oid = Module._replorigin_by_oid = (e, t, r) => (_replorigin_by_oid = Module._replorigin_by_oid = wasmExports.replorigin_by_oid)(e, t, r),\n        _logicalrep_write_begin = Module._logicalrep_write_begin = (e, t) => (_logicalrep_write_begin = Module._logicalrep_write_begin = wasmExports.logicalrep_write_begin)(e, t),\n        _logicalrep_write_commit = Module._logicalrep_write_commit = (e, t, r) => (_logicalrep_write_commit = Module._logicalrep_write_commit = wasmExports.logicalrep_write_commit)(e, t, r),\n        _logicalrep_write_begin_prepare = Module._logicalrep_write_begin_prepare = (e, t) => (_logicalrep_write_begin_prepare = Module._logicalrep_write_begin_prepare = wasmExports.logicalrep_write_begin_prepare)(e, t),\n        _logicalrep_write_prepare = Module._logicalrep_write_prepare = (e, t, r) => (_logicalrep_write_prepare = Module._logicalrep_write_prepare = wasmExports.logicalrep_write_prepare)(e, t, r),\n        _logicalrep_write_commit_prepared = Module._logicalrep_write_commit_prepared = (e, t, r) => (_logicalrep_write_commit_prepared = Module._logicalrep_write_commit_prepared = wasmExports.logicalrep_write_commit_prepared)(e, t, r),\n        _logicalrep_write_rollback_prepared = Module._logicalrep_write_rollback_prepared = (e, t, r, a) => (_logicalrep_write_rollback_prepared = Module._logicalrep_write_rollback_prepared = wasmExports.logicalrep_write_rollback_prepared)(e, t, r, a),\n        _logicalrep_write_stream_prepare = Module._logicalrep_write_stream_prepare = (e, t, r) => (_logicalrep_write_stream_prepare = Module._logicalrep_write_stream_prepare = wasmExports.logicalrep_write_stream_prepare)(e, t, r),\n        _logicalrep_write_origin = Module._logicalrep_write_origin = (e, t, r) => (_logicalrep_write_origin = Module._logicalrep_write_origin = wasmExports.logicalrep_write_origin)(e, t, r),\n        _logicalrep_write_insert = Module._logicalrep_write_insert = (e, t, r, a, o, s) => (_logicalrep_write_insert = Module._logicalrep_write_insert = wasmExports.logicalrep_write_insert)(e, t, r, a, o, s),\n        _logicalrep_write_update = Module._logicalrep_write_update = (e, t, r, a, o, s, l) => (_logicalrep_write_update = Module._logicalrep_write_update = wasmExports.logicalrep_write_update)(e, t, r, a, o, s, l),\n        _logicalrep_write_delete = Module._logicalrep_write_delete = (e, t, r, a, o, s) => (_logicalrep_write_delete = Module._logicalrep_write_delete = wasmExports.logicalrep_write_delete)(e, t, r, a, o, s),\n        _logicalrep_write_truncate = Module._logicalrep_write_truncate = (e, t, r, a, o, s) => (_logicalrep_write_truncate = Module._logicalrep_write_truncate = wasmExports.logicalrep_write_truncate)(e, t, r, a, o, s),\n        _logicalrep_write_message = Module._logicalrep_write_message = (e, t, r, a, o, s, l) => (_logicalrep_write_message = Module._logicalrep_write_message = wasmExports.logicalrep_write_message)(e, t, r, a, o, s, l),\n        _logicalrep_write_rel = Module._logicalrep_write_rel = (e, t, r, a) => (_logicalrep_write_rel = Module._logicalrep_write_rel = wasmExports.logicalrep_write_rel)(e, t, r, a),\n        _logicalrep_write_typ = Module._logicalrep_write_typ = (e, t, r) => (_logicalrep_write_typ = Module._logicalrep_write_typ = wasmExports.logicalrep_write_typ)(e, t, r),\n        _logicalrep_write_stream_start = Module._logicalrep_write_stream_start = (e, t, r) => (_logicalrep_write_stream_start = Module._logicalrep_write_stream_start = wasmExports.logicalrep_write_stream_start)(e, t, r),\n        _logicalrep_write_stream_stop = Module._logicalrep_write_stream_stop = e => (_logicalrep_write_stream_stop = Module._logicalrep_write_stream_stop = wasmExports.logicalrep_write_stream_stop)(e),\n        _logicalrep_write_stream_commit = Module._logicalrep_write_stream_commit = (e, t, r) => (_logicalrep_write_stream_commit = Module._logicalrep_write_stream_commit = wasmExports.logicalrep_write_stream_commit)(e, t, r),\n        _logicalrep_write_stream_abort = Module._logicalrep_write_stream_abort = (e, t, r, a, o, s) => (_logicalrep_write_stream_abort = Module._logicalrep_write_stream_abort = wasmExports.logicalrep_write_stream_abort)(e, t, r, a, o, s),\n        _ProcessWalRcvInterrupts = Module._ProcessWalRcvInterrupts = () => (_ProcessWalRcvInterrupts = Module._ProcessWalRcvInterrupts = wasmExports.ProcessWalRcvInterrupts)(),\n        _timestamptz_to_str = Module._timestamptz_to_str = e => (_timestamptz_to_str = Module._timestamptz_to_str = wasmExports.timestamptz_to_str)(e),\n        _GetDatabaseEncodingName = Module._GetDatabaseEncodingName = () => (_GetDatabaseEncodingName = Module._GetDatabaseEncodingName = wasmExports.GetDatabaseEncodingName)(),\n        _PQconnectStartParams = Module._PQconnectStartParams = (e, t, r) => (_PQconnectStartParams = Module._PQconnectStartParams = wasmExports.PQconnectStartParams)(e, t, r),\n        _PQstatus = Module._PQstatus = e => (_PQstatus = Module._PQstatus = wasmExports.PQstatus)(e),\n        _PQsocket = Module._PQsocket = e => (_PQsocket = Module._PQsocket = wasmExports.PQsocket)(e),\n        _PQconnectPoll = Module._PQconnectPoll = e => (_PQconnectPoll = Module._PQconnectPoll = wasmExports.PQconnectPoll)(e),\n        _PQconnectionUsedPassword = Module._PQconnectionUsedPassword = e => (_PQconnectionUsedPassword = Module._PQconnectionUsedPassword = wasmExports.PQconnectionUsedPassword)(e),\n        _PQfinish = Module._PQfinish = e => (_PQfinish = Module._PQfinish = wasmExports.PQfinish)(e),\n        _PQresultStatus = Module._PQresultStatus = e => (_PQresultStatus = Module._PQresultStatus = wasmExports.PQresultStatus)(e),\n        _PQclear = Module._PQclear = e => (_PQclear = Module._PQclear = wasmExports.PQclear)(e),\n        _PQerrorMessage = Module._PQerrorMessage = e => (_PQerrorMessage = Module._PQerrorMessage = wasmExports.PQerrorMessage)(e),\n        _pchomp = Module._pchomp = e => (_pchomp = Module._pchomp = wasmExports.pchomp)(e),\n        _PQnfields = Module._PQnfields = e => (_PQnfields = Module._PQnfields = wasmExports.PQnfields)(e),\n        _PQntuples = Module._PQntuples = e => (_PQntuples = Module._PQntuples = wasmExports.PQntuples)(e),\n        _PQgetvalue = Module._PQgetvalue = (e, t, r) => (_PQgetvalue = Module._PQgetvalue = wasmExports.PQgetvalue)(e, t, r),\n        _pg_strtoint32 = Module._pg_strtoint32 = e => (_pg_strtoint32 = Module._pg_strtoint32 = wasmExports.pg_strtoint32)(e),\n        _PQconsumeInput = Module._PQconsumeInput = e => (_PQconsumeInput = Module._PQconsumeInput = wasmExports.PQconsumeInput)(e),\n        _pg_lsn_in = Module._pg_lsn_in = e => (_pg_lsn_in = Module._pg_lsn_in = wasmExports.pg_lsn_in)(e),\n        _DirectFunctionCall1Coll = Module._DirectFunctionCall1Coll = (e, t, r) => (_DirectFunctionCall1Coll = Module._DirectFunctionCall1Coll = wasmExports.DirectFunctionCall1Coll)(e, t, r),\n        _PQgetisnull = Module._PQgetisnull = (e, t, r) => (_PQgetisnull = Module._PQgetisnull = wasmExports.PQgetisnull)(e, t, r),\n        _tuplestore_begin_heap = Module._tuplestore_begin_heap = (e, t, r) => (_tuplestore_begin_heap = Module._tuplestore_begin_heap = wasmExports.tuplestore_begin_heap)(e, t, r),\n        _TupleDescGetAttInMetadata = Module._TupleDescGetAttInMetadata = e => (_TupleDescGetAttInMetadata = Module._TupleDescGetAttInMetadata = wasmExports.TupleDescGetAttInMetadata)(e),\n        _BuildTupleFromCStrings = Module._BuildTupleFromCStrings = (e, t) => (_BuildTupleFromCStrings = Module._BuildTupleFromCStrings = wasmExports.BuildTupleFromCStrings)(e, t),\n        _tuplestore_puttuple = Module._tuplestore_puttuple = (e, t) => (_tuplestore_puttuple = Module._tuplestore_puttuple = wasmExports.tuplestore_puttuple)(e, t),\n        _PQresultErrorField = Module._PQresultErrorField = (e, t) => (_PQresultErrorField = Module._PQresultErrorField = wasmExports.PQresultErrorField)(e, t),\n        _PQsendQuery = Module._PQsendQuery = (e, t) => (_PQsendQuery = Module._PQsendQuery = wasmExports.PQsendQuery)(e, t),\n        _PQisBusy = Module._PQisBusy = e => (_PQisBusy = Module._PQisBusy = wasmExports.PQisBusy)(e),\n        _PQgetResult = Module._PQgetResult = e => (_PQgetResult = Module._PQgetResult = wasmExports.PQgetResult)(e),\n        _ResourceOwnerDelete = Module._ResourceOwnerDelete = e => (_ResourceOwnerDelete = Module._ResourceOwnerDelete = wasmExports.ResourceOwnerDelete)(e),\n        _CreateDestReceiver = Module._CreateDestReceiver = e => (_CreateDestReceiver = Module._CreateDestReceiver = wasmExports.CreateDestReceiver)(e),\n        _defGetString = Module._defGetString = e => (_defGetString = Module._defGetString = wasmExports.defGetString)(e),\n        _pg_md5_encrypt = Module._pg_md5_encrypt = (e, t, r, a, o) => (_pg_md5_encrypt = Module._pg_md5_encrypt = wasmExports.pg_md5_encrypt)(e, t, r, a, o),\n        _plain_crypt_verify = Module._plain_crypt_verify = (e, t, r, a) => (_plain_crypt_verify = Module._plain_crypt_verify = wasmExports.plain_crypt_verify)(e, t, r, a),\n        _pg_b64_enc_len = Module._pg_b64_enc_len = e => (_pg_b64_enc_len = Module._pg_b64_enc_len = wasmExports.pg_b64_enc_len)(e),\n        _pg_b64_encode = Module._pg_b64_encode = (e, t, r, a) => (_pg_b64_encode = Module._pg_b64_encode = wasmExports.pg_b64_encode)(e, t, r, a),\n        _pg_b64_dec_len = Module._pg_b64_dec_len = e => (_pg_b64_dec_len = Module._pg_b64_dec_len = wasmExports.pg_b64_dec_len)(e),\n        _pg_b64_decode = Module._pg_b64_decode = (e, t, r, a) => (_pg_b64_decode = Module._pg_b64_decode = wasmExports.pg_b64_decode)(e, t, r, a),\n        _pg_hmac_create = Module._pg_hmac_create = e => (_pg_hmac_create = Module._pg_hmac_create = wasmExports.pg_hmac_create)(e),\n        _pg_hmac_init = Module._pg_hmac_init = (e, t, r) => (_pg_hmac_init = Module._pg_hmac_init = wasmExports.pg_hmac_init)(e, t, r),\n        _pg_hmac_update = Module._pg_hmac_update = (e, t, r) => (_pg_hmac_update = Module._pg_hmac_update = wasmExports.pg_hmac_update)(e, t, r),\n        _pg_hmac_final = Module._pg_hmac_final = (e, t, r) => (_pg_hmac_final = Module._pg_hmac_final = wasmExports.pg_hmac_final)(e, t, r),\n        _pg_hmac_error = Module._pg_hmac_error = e => (_pg_hmac_error = Module._pg_hmac_error = wasmExports.pg_hmac_error)(e),\n        _pg_hmac_free = Module._pg_hmac_free = e => (_pg_hmac_free = Module._pg_hmac_free = wasmExports.pg_hmac_free)(e),\n        _scram_H = Module._scram_H = (e, t, r, a, o) => (_scram_H = Module._scram_H = wasmExports.scram_H)(e, t, r, a, o),\n        _pg_saslprep = Module._pg_saslprep = (e, t) => (_pg_saslprep = Module._pg_saslprep = wasmExports.pg_saslprep)(e, t),\n        _scram_build_secret = Module._scram_build_secret = (e, t, r, a, o, s, l) => (_scram_build_secret = Module._scram_build_secret = wasmExports.scram_build_secret)(e, t, r, a, o, s, l),\n        _scram_SaltedPassword = Module._scram_SaltedPassword = (e, t, r, a, o, s, l, n) => (_scram_SaltedPassword = Module._scram_SaltedPassword = wasmExports.scram_SaltedPassword)(e, t, r, a, o, s, l, n),\n        _scram_ServerKey = Module._scram_ServerKey = (e, t, r, a, o) => (_scram_ServerKey = Module._scram_ServerKey = wasmExports.scram_ServerKey)(e, t, r, a, o),\n        _strtol = Module._strtol = (e, t, r) => (_strtol = Module._strtol = wasmExports.strtol)(e, t, r),\n        _replace_percent_placeholders = Module._replace_percent_placeholders = (e, t, r, a) => (_replace_percent_placeholders = Module._replace_percent_placeholders = wasmExports.replace_percent_placeholders)(e, t, r, a),\n        _fgets = Module._fgets = (e, t, r) => (_fgets = Module._fgets = wasmExports.fgets)(e, t, r),\n        _explicit_bzero = Module._explicit_bzero = (e, t) => (_explicit_bzero = Module._explicit_bzero = wasmExports.explicit_bzero)(e, t),\n        _wait_result_to_str = Module._wait_result_to_str = e => (_wait_result_to_str = Module._wait_result_to_str = wasmExports.wait_result_to_str)(e),\n        _pg_strip_crlf = Module._pg_strip_crlf = e => (_pg_strip_crlf = Module._pg_strip_crlf = wasmExports.pg_strip_crlf)(e),\n        _geteuid = Module._geteuid = () => (_geteuid = Module._geteuid = wasmExports.geteuid)(),\n        _getpeereid = Module._getpeereid = (e, t, r) => (_getpeereid = Module._getpeereid = wasmExports.getpeereid)(e, t, r),\n        _pg_getaddrinfo_all = Module._pg_getaddrinfo_all = (e, t, r, a) => (_pg_getaddrinfo_all = Module._pg_getaddrinfo_all = wasmExports.pg_getaddrinfo_all)(e, t, r, a),\n        _socket = Module._socket = (e, t, r) => (_socket = Module._socket = wasmExports.socket)(e, t, r),\n        _connect = Module._connect = (e, t, r) => (_connect = Module._connect = wasmExports.connect)(e, t, r),\n        _recv = Module._recv = (e, t, r, a) => (_recv = Module._recv = wasmExports.recv)(e, t, r, a),\n        _pg_freeaddrinfo_all = Module._pg_freeaddrinfo_all = (e, t) => (_pg_freeaddrinfo_all = Module._pg_freeaddrinfo_all = wasmExports.pg_freeaddrinfo_all)(e, t),\n        _pq_sendtext = Module._pq_sendtext = (e, t, r) => (_pq_sendtext = Module._pq_sendtext = wasmExports.pq_sendtext)(e, t, r),\n        _pq_sendfloat4 = Module._pq_sendfloat4 = (e, t) => (_pq_sendfloat4 = Module._pq_sendfloat4 = wasmExports.pq_sendfloat4)(e, t),\n        _pq_sendfloat8 = Module._pq_sendfloat8 = (e, t) => (_pq_sendfloat8 = Module._pq_sendfloat8 = wasmExports.pq_sendfloat8)(e, t),\n        _pq_begintypsend = Module._pq_begintypsend = e => (_pq_begintypsend = Module._pq_begintypsend = wasmExports.pq_begintypsend)(e),\n        _pq_endtypsend = Module._pq_endtypsend = e => (_pq_endtypsend = Module._pq_endtypsend = wasmExports.pq_endtypsend)(e),\n        _pq_getmsgfloat4 = Module._pq_getmsgfloat4 = e => (_pq_getmsgfloat4 = Module._pq_getmsgfloat4 = wasmExports.pq_getmsgfloat4)(e),\n        _pq_getmsgfloat8 = Module._pq_getmsgfloat8 = e => (_pq_getmsgfloat8 = Module._pq_getmsgfloat8 = wasmExports.pq_getmsgfloat8)(e),\n        _pq_getmsgtext = Module._pq_getmsgtext = (e, t, r) => (_pq_getmsgtext = Module._pq_getmsgtext = wasmExports.pq_getmsgtext)(e, t, r),\n        _feof = Module._feof = e => (_feof = Module._feof = wasmExports.feof)(e),\n        _pg_mb2wchar_with_len = Module._pg_mb2wchar_with_len = (e, t, r) => (_pg_mb2wchar_with_len = Module._pg_mb2wchar_with_len = wasmExports.pg_mb2wchar_with_len)(e, t, r),\n        _pg_regcomp = Module._pg_regcomp = (e, t, r, a, o) => (_pg_regcomp = Module._pg_regcomp = wasmExports.pg_regcomp)(e, t, r, a, o),\n        _pg_regerror = Module._pg_regerror = (e, t, r, a) => (_pg_regerror = Module._pg_regerror = wasmExports.pg_regerror)(e, t, r, a),\n        _get_role_oid = Module._get_role_oid = (e, t) => (_get_role_oid = Module._get_role_oid = wasmExports.get_role_oid)(e, t),\n        _strcat = Module._strcat = (e, t) => (_strcat = Module._strcat = wasmExports.strcat)(e, t),\n        _sigemptyset = Module._sigemptyset = e => (_sigemptyset = Module._sigemptyset = wasmExports.sigemptyset)(e),\n        _be_lo_unlink = Module._be_lo_unlink = e => (_be_lo_unlink = Module._be_lo_unlink = wasmExports.be_lo_unlink)(e),\n        _object_ownercheck = Module._object_ownercheck = (e, t, r) => (_object_ownercheck = Module._object_ownercheck = wasmExports.object_ownercheck)(e, t, r),\n        _text_to_cstring_buffer = Module._text_to_cstring_buffer = (e, t, r) => (_text_to_cstring_buffer = Module._text_to_cstring_buffer = wasmExports.text_to_cstring_buffer)(e, t, r),\n        _setsockopt = Module._setsockopt = (e, t, r, a, o) => (_setsockopt = Module._setsockopt = wasmExports.setsockopt)(e, t, r, a, o),\n        _getsockname = Module._getsockname = (e, t, r) => (_getsockname = Module._getsockname = wasmExports.getsockname)(e, t, r),\n        _pq_recvbuf_fill = Module._pq_recvbuf_fill = (e, t) => (_pq_recvbuf_fill = Module._pq_recvbuf_fill = wasmExports.pq_recvbuf_fill)(e, t),\n        _getsockopt = Module._getsockopt = (e, t, r, a, o) => (_getsockopt = Module._getsockopt = wasmExports.getsockopt)(e, t, r, a, o),\n        _getmissingattr = Module._getmissingattr = (e, t, r) => (_getmissingattr = Module._getmissingattr = wasmExports.getmissingattr)(e, t, r),\n        _get_rel_relkind = Module._get_rel_relkind = e => (_get_rel_relkind = Module._get_rel_relkind = wasmExports.get_rel_relkind)(e),\n        _MemoryContextSetIdentifier = Module._MemoryContextSetIdentifier = (e, t) => (_MemoryContextSetIdentifier = Module._MemoryContextSetIdentifier = wasmExports.MemoryContextSetIdentifier)(e, t),\n        _MemoryContextSetParent = Module._MemoryContextSetParent = (e, t) => (_MemoryContextSetParent = Module._MemoryContextSetParent = wasmExports.MemoryContextSetParent)(e, t),\n        _find_base_rel = Module._find_base_rel = (e, t) => (_find_base_rel = Module._find_base_rel = wasmExports.find_base_rel)(e, t),\n        _bms_equal = Module._bms_equal = (e, t) => (_bms_equal = Module._bms_equal = wasmExports.bms_equal)(e, t),\n        _bms_num_members = Module._bms_num_members = e => (_bms_num_members = Module._bms_num_members = wasmExports.bms_num_members)(e),\n        _fmgr_info_copy = Module._fmgr_info_copy = (e, t, r) => (_fmgr_info_copy = Module._fmgr_info_copy = wasmExports.fmgr_info_copy)(e, t, r),\n        _fmgr_info_cxt = Module._fmgr_info_cxt = (e, t, r) => (_fmgr_info_cxt = Module._fmgr_info_cxt = wasmExports.fmgr_info_cxt)(e, t, r),\n        _get_typlenbyvalalign = Module._get_typlenbyvalalign = (e, t, r, a) => (_get_typlenbyvalalign = Module._get_typlenbyvalalign = wasmExports.get_typlenbyvalalign)(e, t, r, a),\n        _deconstruct_array = Module._deconstruct_array = (e, t, r, a, o, s, l, n) => (_deconstruct_array = Module._deconstruct_array = wasmExports.deconstruct_array)(e, t, r, a, o, s, l, n),\n        _datumCopy = Module._datumCopy = (e, t, r) => (_datumCopy = Module._datumCopy = wasmExports.datumCopy)(e, t, r),\n        _qsort_arg = Module._qsort_arg = (e, t, r, a, o) => (_qsort_arg = Module._qsort_arg = wasmExports.qsort_arg)(e, t, r, a, o),\n        _FunctionCall2Coll = Module._FunctionCall2Coll = (e, t, r, a) => (_FunctionCall2Coll = Module._FunctionCall2Coll = wasmExports.FunctionCall2Coll)(e, t, r, a),\n        _datumIsEqual = Module._datumIsEqual = (e, t, r, a) => (_datumIsEqual = Module._datumIsEqual = wasmExports.datumIsEqual)(e, t, r, a),\n        _bms_overlap = Module._bms_overlap = (e, t) => (_bms_overlap = Module._bms_overlap = wasmExports.bms_overlap)(e, t),\n        _ExecPrepareExpr = Module._ExecPrepareExpr = (e, t) => (_ExecPrepareExpr = Module._ExecPrepareExpr = wasmExports.ExecPrepareExpr)(e, t),\n        _RegisterSnapshot = Module._RegisterSnapshot = e => (_RegisterSnapshot = Module._RegisterSnapshot = wasmExports.RegisterSnapshot)(e),\n        _UnregisterSnapshot = Module._UnregisterSnapshot = e => (_UnregisterSnapshot = Module._UnregisterSnapshot = wasmExports.UnregisterSnapshot)(e),\n        _get_fn_expr_argtype = Module._get_fn_expr_argtype = (e, t) => (_get_fn_expr_argtype = Module._get_fn_expr_argtype = wasmExports.get_fn_expr_argtype)(e, t),\n        _get_opfamily_member = Module._get_opfamily_member = (e, t, r, a) => (_get_opfamily_member = Module._get_opfamily_member = wasmExports.get_opfamily_member)(e, t, r, a),\n        _init_MultiFuncCall = Module._init_MultiFuncCall = e => (_init_MultiFuncCall = Module._init_MultiFuncCall = wasmExports.init_MultiFuncCall)(e),\n        _per_MultiFuncCall = Module._per_MultiFuncCall = e => (_per_MultiFuncCall = Module._per_MultiFuncCall = wasmExports.per_MultiFuncCall)(e),\n        _end_MultiFuncCall = Module._end_MultiFuncCall = (e, t) => (_end_MultiFuncCall = Module._end_MultiFuncCall = wasmExports.end_MultiFuncCall)(e, t),\n        _textToQualifiedNameList = Module._textToQualifiedNameList = e => (_textToQualifiedNameList = Module._textToQualifiedNameList = wasmExports.textToQualifiedNameList)(e),\n        _FunctionCall1Coll = Module._FunctionCall1Coll = (e, t, r) => (_FunctionCall1Coll = Module._FunctionCall1Coll = wasmExports.FunctionCall1Coll)(e, t, r),\n        _DirectFunctionCall4Coll = Module._DirectFunctionCall4Coll = (e, t, r, a, o, s) => (_DirectFunctionCall4Coll = Module._DirectFunctionCall4Coll = wasmExports.DirectFunctionCall4Coll)(e, t, r, a, o, s),\n        _pg_mblen = Module._pg_mblen = e => (_pg_mblen = Module._pg_mblen = wasmExports.pg_mblen)(e),\n        _tsearch_readline_begin = Module._tsearch_readline_begin = (e, t) => (_tsearch_readline_begin = Module._tsearch_readline_begin = wasmExports.tsearch_readline_begin)(e, t),\n        _tsearch_readline = Module._tsearch_readline = e => (_tsearch_readline = Module._tsearch_readline = wasmExports.tsearch_readline)(e),\n        _t_isspace = Module._t_isspace = e => (_t_isspace = Module._t_isspace = wasmExports.t_isspace)(e),\n        _lowerstr = Module._lowerstr = e => (_lowerstr = Module._lowerstr = wasmExports.lowerstr)(e),\n        _tsearch_readline_end = Module._tsearch_readline_end = e => (_tsearch_readline_end = Module._tsearch_readline_end = wasmExports.tsearch_readline_end)(e),\n        _t_isdigit = Module._t_isdigit = e => (_t_isdigit = Module._t_isdigit = wasmExports.t_isdigit)(e),\n        _pnstrdup = Module._pnstrdup = (e, t) => (_pnstrdup = Module._pnstrdup = wasmExports.pnstrdup)(e, t),\n        _get_tsearch_config_filename = Module._get_tsearch_config_filename = (e, t) => (_get_tsearch_config_filename = Module._get_tsearch_config_filename = wasmExports.get_tsearch_config_filename)(e, t),\n        _lookup_ts_dictionary_cache = Module._lookup_ts_dictionary_cache = e => (_lookup_ts_dictionary_cache = Module._lookup_ts_dictionary_cache = wasmExports.lookup_ts_dictionary_cache)(e),\n        _FunctionCall4Coll = Module._FunctionCall4Coll = (e, t, r, a, o, s) => (_FunctionCall4Coll = Module._FunctionCall4Coll = wasmExports.FunctionCall4Coll)(e, t, r, a, o, s),\n        _t_isalnum = Module._t_isalnum = e => (_t_isalnum = Module._t_isalnum = wasmExports.t_isalnum)(e),\n        _isalnum = Module._isalnum = e => (_isalnum = Module._isalnum = wasmExports.isalnum)(e),\n        _pg_any_to_server = Module._pg_any_to_server = (e, t, r) => (_pg_any_to_server = Module._pg_any_to_server = wasmExports.pg_any_to_server)(e, t, r),\n        _lowerstr_with_len = Module._lowerstr_with_len = (e, t) => (_lowerstr_with_len = Module._lowerstr_with_len = wasmExports.lowerstr_with_len)(e, t),\n        _tolower = Module._tolower = e => (_tolower = Module._tolower = wasmExports.tolower)(e),\n        _readstoplist = Module._readstoplist = (e, t, r) => (_readstoplist = Module._readstoplist = wasmExports.readstoplist)(e, t, r),\n        _searchstoplist = Module._searchstoplist = (e, t) => (_searchstoplist = Module._searchstoplist = wasmExports.searchstoplist)(e, t),\n        _GetDatabaseEncoding = Module._GetDatabaseEncoding = () => (_GetDatabaseEncoding = Module._GetDatabaseEncoding = wasmExports.GetDatabaseEncoding)(),\n        _vacuum_delay_point = Module._vacuum_delay_point = () => (_vacuum_delay_point = Module._vacuum_delay_point = wasmExports.vacuum_delay_point)(),\n        _get_restriction_variable = Module._get_restriction_variable = (e, t, r, a, o, s) => (_get_restriction_variable = Module._get_restriction_variable = wasmExports.get_restriction_variable)(e, t, r, a, o, s),\n        _get_attstatsslot = Module._get_attstatsslot = (e, t, r, a, o) => (_get_attstatsslot = Module._get_attstatsslot = wasmExports.get_attstatsslot)(e, t, r, a, o),\n        _free_attstatsslot = Module._free_attstatsslot = e => (_free_attstatsslot = Module._free_attstatsslot = wasmExports.free_attstatsslot)(e),\n        _Float8GetDatum = Module._Float8GetDatum = e => (_Float8GetDatum = Module._Float8GetDatum = wasmExports.Float8GetDatum)(e),\n        _ExecReScan = Module._ExecReScan = e => (_ExecReScan = Module._ExecReScan = wasmExports.ExecReScan)(e),\n        _ExecAsyncResponse = Module._ExecAsyncResponse = e => (_ExecAsyncResponse = Module._ExecAsyncResponse = wasmExports.ExecAsyncResponse)(e),\n        _ExecAsyncRequestDone = Module._ExecAsyncRequestDone = (e, t) => (_ExecAsyncRequestDone = Module._ExecAsyncRequestDone = wasmExports.ExecAsyncRequestDone)(e, t),\n        _ExecAsyncRequestPending = Module._ExecAsyncRequestPending = e => (_ExecAsyncRequestPending = Module._ExecAsyncRequestPending = wasmExports.ExecAsyncRequestPending)(e),\n        _tuplesort_end = Module._tuplesort_end = e => (_tuplesort_end = Module._tuplesort_end = wasmExports.tuplesort_end)(e),\n        _ExecInitExprList = Module._ExecInitExprList = (e, t) => (_ExecInitExprList = Module._ExecInitExprList = wasmExports.ExecInitExprList)(e, t),\n        _fmgr_info = Module._fmgr_info = (e, t) => (_fmgr_info = Module._fmgr_info = wasmExports.fmgr_info)(e, t),\n        _get_typlenbyval = Module._get_typlenbyval = (e, t, r) => (_get_typlenbyval = Module._get_typlenbyval = wasmExports.get_typlenbyval)(e, t, r),\n        _ExecForceStoreHeapTuple = Module._ExecForceStoreHeapTuple = (e, t, r) => (_ExecForceStoreHeapTuple = Module._ExecForceStoreHeapTuple = wasmExports.ExecForceStoreHeapTuple)(e, t, r),\n        _tuplesort_performsort = Module._tuplesort_performsort = e => (_tuplesort_performsort = Module._tuplesort_performsort = wasmExports.tuplesort_performsort)(e),\n        _tuplesort_begin_heap = Module._tuplesort_begin_heap = (e, t, r, a, o, s, l, n, _) => (_tuplesort_begin_heap = Module._tuplesort_begin_heap = wasmExports.tuplesort_begin_heap)(e, t, r, a, o, s, l, n, _),\n        _MemoryContextMemAllocated = Module._MemoryContextMemAllocated = (e, t) => (_MemoryContextMemAllocated = Module._MemoryContextMemAllocated = wasmExports.MemoryContextMemAllocated)(e, t),\n        _tuplesort_gettupleslot = Module._tuplesort_gettupleslot = (e, t, r, a, o) => (_tuplesort_gettupleslot = Module._tuplesort_gettupleslot = wasmExports.tuplesort_gettupleslot)(e, t, r, a, o),\n        _tuplesort_puttupleslot = Module._tuplesort_puttupleslot = (e, t) => (_tuplesort_puttupleslot = Module._tuplesort_puttupleslot = wasmExports.tuplesort_puttupleslot)(e, t),\n        _ExecStoreAllNullTuple = Module._ExecStoreAllNullTuple = e => (_ExecStoreAllNullTuple = Module._ExecStoreAllNullTuple = wasmExports.ExecStoreAllNullTuple)(e),\n        _MakeExpandedObjectReadOnlyInternal = Module._MakeExpandedObjectReadOnlyInternal = e => (_MakeExpandedObjectReadOnlyInternal = Module._MakeExpandedObjectReadOnlyInternal = wasmExports.MakeExpandedObjectReadOnlyInternal)(e),\n        _BlessTupleDesc = Module._BlessTupleDesc = e => (_BlessTupleDesc = Module._BlessTupleDesc = wasmExports.BlessTupleDesc)(e),\n        _pg_detoast_datum_copy = Module._pg_detoast_datum_copy = e => (_pg_detoast_datum_copy = Module._pg_detoast_datum_copy = wasmExports.pg_detoast_datum_copy)(e),\n        _construct_md_array = Module._construct_md_array = (e, t, r, a, o, s, l, n, _) => (_construct_md_array = Module._construct_md_array = wasmExports.construct_md_array)(e, t, r, a, o, s, l, n, _),\n        _ArrayGetNItems = Module._ArrayGetNItems = (e, t) => (_ArrayGetNItems = Module._ArrayGetNItems = wasmExports.ArrayGetNItems)(e, t),\n        _construct_empty_array = Module._construct_empty_array = e => (_construct_empty_array = Module._construct_empty_array = wasmExports.construct_empty_array)(e),\n        _DatumGetEOHP = Module._DatumGetEOHP = e => (_DatumGetEOHP = Module._DatumGetEOHP = wasmExports.DatumGetEOHP)(e),\n        _expanded_record_fetch_tupdesc = Module._expanded_record_fetch_tupdesc = e => (_expanded_record_fetch_tupdesc = Module._expanded_record_fetch_tupdesc = wasmExports.expanded_record_fetch_tupdesc)(e),\n        _expanded_record_fetch_field = Module._expanded_record_fetch_field = (e, t, r) => (_expanded_record_fetch_field = Module._expanded_record_fetch_field = wasmExports.expanded_record_fetch_field)(e, t, r),\n        _execute_attr_map_tuple = Module._execute_attr_map_tuple = (e, t) => (_execute_attr_map_tuple = Module._execute_attr_map_tuple = wasmExports.execute_attr_map_tuple)(e, t),\n        _MemoryContextAllocExtended = Module._MemoryContextAllocExtended = (e, t, r) => (_MemoryContextAllocExtended = Module._MemoryContextAllocExtended = wasmExports.MemoryContextAllocExtended)(e, t, r),\n        _lookup_rowtype_tupdesc_domain = Module._lookup_rowtype_tupdesc_domain = (e, t, r) => (_lookup_rowtype_tupdesc_domain = Module._lookup_rowtype_tupdesc_domain = wasmExports.lookup_rowtype_tupdesc_domain)(e, t, r),\n        _MemoryContextGetParent = Module._MemoryContextGetParent = e => (_MemoryContextGetParent = Module._MemoryContextGetParent = wasmExports.MemoryContextGetParent)(e),\n        _DeleteExpandedObject = Module._DeleteExpandedObject = e => (_DeleteExpandedObject = Module._DeleteExpandedObject = wasmExports.DeleteExpandedObject)(e),\n        _InstrAlloc = Module._InstrAlloc = (e, t, r) => (_InstrAlloc = Module._InstrAlloc = wasmExports.InstrAlloc)(e, t, r),\n        _ExprEvalPushStep = Module._ExprEvalPushStep = (e, t) => (_ExprEvalPushStep = Module._ExprEvalPushStep = wasmExports.ExprEvalPushStep)(e, t),\n        _getTypeOutputInfo = Module._getTypeOutputInfo = (e, t, r) => (_getTypeOutputInfo = Module._getTypeOutputInfo = wasmExports.getTypeOutputInfo)(e, t, r),\n        _ExecInitExprWithParams = Module._ExecInitExprWithParams = (e, t) => (_ExecInitExprWithParams = Module._ExecInitExprWithParams = wasmExports.ExecInitExprWithParams)(e, t),\n        _ExecOpenScanRelation = Module._ExecOpenScanRelation = (e, t, r) => (_ExecOpenScanRelation = Module._ExecOpenScanRelation = wasmExports.ExecOpenScanRelation)(e, t, r),\n        _FreeExprContext = Module._FreeExprContext = (e, t) => (_FreeExprContext = Module._FreeExprContext = wasmExports.FreeExprContext)(e, t),\n        _CreateExprContext = Module._CreateExprContext = e => (_CreateExprContext = Module._CreateExprContext = wasmExports.CreateExprContext)(e),\n        _ExecGetReturningSlot = Module._ExecGetReturningSlot = (e, t) => (_ExecGetReturningSlot = Module._ExecGetReturningSlot = wasmExports.ExecGetReturningSlot)(e, t),\n        _build_attrmap_by_name_if_req = Module._build_attrmap_by_name_if_req = (e, t, r) => (_build_attrmap_by_name_if_req = Module._build_attrmap_by_name_if_req = wasmExports.build_attrmap_by_name_if_req)(e, t, r),\n        _ExecGetResultRelCheckAsUser = Module._ExecGetResultRelCheckAsUser = (e, t) => (_ExecGetResultRelCheckAsUser = Module._ExecGetResultRelCheckAsUser = wasmExports.ExecGetResultRelCheckAsUser)(e, t),\n        _InstrEndLoop = Module._InstrEndLoop = e => (_InstrEndLoop = Module._InstrEndLoop = wasmExports.InstrEndLoop)(e),\n        _ExecStoreHeapTuple = Module._ExecStoreHeapTuple = (e, t, r) => (_ExecStoreHeapTuple = Module._ExecStoreHeapTuple = wasmExports.ExecStoreHeapTuple)(e, t, r),\n        _get_partition_ancestors = Module._get_partition_ancestors = e => (_get_partition_ancestors = Module._get_partition_ancestors = wasmExports.get_partition_ancestors)(e),\n        _pull_varattnos = Module._pull_varattnos = (e, t, r) => (_pull_varattnos = Module._pull_varattnos = wasmExports.pull_varattnos)(e, t, r),\n        _ExecFindJunkAttributeInTlist = Module._ExecFindJunkAttributeInTlist = (e, t) => (_ExecFindJunkAttributeInTlist = Module._ExecFindJunkAttributeInTlist = wasmExports.ExecFindJunkAttributeInTlist)(e, t),\n        _visibilitymap_get_status = Module._visibilitymap_get_status = (e, t, r) => (_visibilitymap_get_status = Module._visibilitymap_get_status = wasmExports.visibilitymap_get_status)(e, t, r),\n        _index_deform_tuple = Module._index_deform_tuple = (e, t, r, a) => (_index_deform_tuple = Module._index_deform_tuple = wasmExports.index_deform_tuple)(e, t, r, a),\n        _LaunchParallelWorkers = Module._LaunchParallelWorkers = e => (_LaunchParallelWorkers = Module._LaunchParallelWorkers = wasmExports.LaunchParallelWorkers)(e),\n        _standard_ExecutorStart = Module._standard_ExecutorStart = (e, t) => (_standard_ExecutorStart = Module._standard_ExecutorStart = wasmExports.standard_ExecutorStart)(e, t),\n        _GetCommandTagName = Module._GetCommandTagName = e => (_GetCommandTagName = Module._GetCommandTagName = wasmExports.GetCommandTagName)(e),\n        _standard_ExecutorRun = Module._standard_ExecutorRun = (e, t, r, a) => (_standard_ExecutorRun = Module._standard_ExecutorRun = wasmExports.standard_ExecutorRun)(e, t, r, a),\n        _EnterParallelMode = Module._EnterParallelMode = () => (_EnterParallelMode = Module._EnterParallelMode = wasmExports.EnterParallelMode)(),\n        _ExitParallelMode = Module._ExitParallelMode = () => (_ExitParallelMode = Module._ExitParallelMode = wasmExports.ExitParallelMode)(),\n        _standard_ExecutorFinish = Module._standard_ExecutorFinish = e => (_standard_ExecutorFinish = Module._standard_ExecutorFinish = wasmExports.standard_ExecutorFinish)(e),\n        _standard_ExecutorEnd = Module._standard_ExecutorEnd = e => (_standard_ExecutorEnd = Module._standard_ExecutorEnd = wasmExports.standard_ExecutorEnd)(e),\n        _MakeTupleTableSlot = Module._MakeTupleTableSlot = (e, t) => (_MakeTupleTableSlot = Module._MakeTupleTableSlot = wasmExports.MakeTupleTableSlot)(e, t),\n        _CreateParallelContext = Module._CreateParallelContext = (e, t, r) => (_CreateParallelContext = Module._CreateParallelContext = wasmExports.CreateParallelContext)(e, t, r),\n        _InitializeParallelDSM = Module._InitializeParallelDSM = e => (_InitializeParallelDSM = Module._InitializeParallelDSM = wasmExports.InitializeParallelDSM)(e),\n        _WaitForParallelWorkersToFinish = Module._WaitForParallelWorkersToFinish = e => (_WaitForParallelWorkersToFinish = Module._WaitForParallelWorkersToFinish = wasmExports.WaitForParallelWorkersToFinish)(e),\n        _DestroyParallelContext = Module._DestroyParallelContext = e => (_DestroyParallelContext = Module._DestroyParallelContext = wasmExports.DestroyParallelContext)(e),\n        _SPI_connect = Module._SPI_connect = () => (_SPI_connect = Module._SPI_connect = wasmExports.SPI_connect)(),\n        _SPI_connect_ext = Module._SPI_connect_ext = e => (_SPI_connect_ext = Module._SPI_connect_ext = wasmExports.SPI_connect_ext)(e),\n        _SPI_finish = Module._SPI_finish = () => (_SPI_finish = Module._SPI_finish = wasmExports.SPI_finish)(),\n        _SPI_commit = Module._SPI_commit = () => (_SPI_commit = Module._SPI_commit = wasmExports.SPI_commit)(),\n        _ReThrowError = Module._ReThrowError = e => (_ReThrowError = Module._ReThrowError = wasmExports.ReThrowError)(e),\n        _SPI_commit_and_chain = Module._SPI_commit_and_chain = () => (_SPI_commit_and_chain = Module._SPI_commit_and_chain = wasmExports.SPI_commit_and_chain)(),\n        _SPI_rollback = Module._SPI_rollback = () => (_SPI_rollback = Module._SPI_rollback = wasmExports.SPI_rollback)(),\n        _SPI_rollback_and_chain = Module._SPI_rollback_and_chain = () => (_SPI_rollback_and_chain = Module._SPI_rollback_and_chain = wasmExports.SPI_rollback_and_chain)(),\n        _SPI_execute = Module._SPI_execute = (e, t, r) => (_SPI_execute = Module._SPI_execute = wasmExports.SPI_execute)(e, t, r),\n        _EnsurePortalSnapshotExists = Module._EnsurePortalSnapshotExists = () => (_EnsurePortalSnapshotExists = Module._EnsurePortalSnapshotExists = wasmExports.EnsurePortalSnapshotExists)(),\n        _SPI_freetuptable = Module._SPI_freetuptable = e => (_SPI_freetuptable = Module._SPI_freetuptable = wasmExports.SPI_freetuptable)(e),\n        _ReleaseCachedPlan = Module._ReleaseCachedPlan = (e, t) => (_ReleaseCachedPlan = Module._ReleaseCachedPlan = wasmExports.ReleaseCachedPlan)(e, t),\n        _SPI_exec = Module._SPI_exec = (e, t) => (_SPI_exec = Module._SPI_exec = wasmExports.SPI_exec)(e, t),\n        _SPI_execute_extended = Module._SPI_execute_extended = (e, t) => (_SPI_execute_extended = Module._SPI_execute_extended = wasmExports.SPI_execute_extended)(e, t),\n        _makeParamList = Module._makeParamList = e => (_makeParamList = Module._makeParamList = wasmExports.makeParamList)(e),\n        _SPI_execp = Module._SPI_execp = (e, t, r, a) => (_SPI_execp = Module._SPI_execp = wasmExports.SPI_execp)(e, t, r, a),\n        _SPI_execute_plan_extended = Module._SPI_execute_plan_extended = (e, t) => (_SPI_execute_plan_extended = Module._SPI_execute_plan_extended = wasmExports.SPI_execute_plan_extended)(e, t),\n        _SPI_execute_plan_with_paramlist = Module._SPI_execute_plan_with_paramlist = (e, t, r, a) => (_SPI_execute_plan_with_paramlist = Module._SPI_execute_plan_with_paramlist = wasmExports.SPI_execute_plan_with_paramlist)(e, t, r, a),\n        _SPI_prepare = Module._SPI_prepare = (e, t, r) => (_SPI_prepare = Module._SPI_prepare = wasmExports.SPI_prepare)(e, t, r),\n        _SPI_prepare_extended = Module._SPI_prepare_extended = (e, t) => (_SPI_prepare_extended = Module._SPI_prepare_extended = wasmExports.SPI_prepare_extended)(e, t),\n        _SPI_keepplan = Module._SPI_keepplan = e => (_SPI_keepplan = Module._SPI_keepplan = wasmExports.SPI_keepplan)(e),\n        _SPI_freeplan = Module._SPI_freeplan = e => (_SPI_freeplan = Module._SPI_freeplan = wasmExports.SPI_freeplan)(e),\n        _SPI_copytuple = Module._SPI_copytuple = e => (_SPI_copytuple = Module._SPI_copytuple = wasmExports.SPI_copytuple)(e),\n        _SPI_returntuple = Module._SPI_returntuple = (e, t) => (_SPI_returntuple = Module._SPI_returntuple = wasmExports.SPI_returntuple)(e, t),\n        _SPI_fnumber = Module._SPI_fnumber = (e, t) => (_SPI_fnumber = Module._SPI_fnumber = wasmExports.SPI_fnumber)(e, t),\n        _SPI_fname = Module._SPI_fname = (e, t) => (_SPI_fname = Module._SPI_fname = wasmExports.SPI_fname)(e, t),\n        _SPI_getvalue = Module._SPI_getvalue = (e, t, r) => (_SPI_getvalue = Module._SPI_getvalue = wasmExports.SPI_getvalue)(e, t, r),\n        _SPI_getbinval = Module._SPI_getbinval = (e, t, r, a) => (_SPI_getbinval = Module._SPI_getbinval = wasmExports.SPI_getbinval)(e, t, r, a),\n        _SPI_gettype = Module._SPI_gettype = (e, t) => (_SPI_gettype = Module._SPI_gettype = wasmExports.SPI_gettype)(e, t),\n        _SPI_gettypeid = Module._SPI_gettypeid = (e, t) => (_SPI_gettypeid = Module._SPI_gettypeid = wasmExports.SPI_gettypeid)(e, t),\n        _SPI_getrelname = Module._SPI_getrelname = e => (_SPI_getrelname = Module._SPI_getrelname = wasmExports.SPI_getrelname)(e),\n        _SPI_palloc = Module._SPI_palloc = e => (_SPI_palloc = Module._SPI_palloc = wasmExports.SPI_palloc)(e),\n        _SPI_datumTransfer = Module._SPI_datumTransfer = (e, t, r) => (_SPI_datumTransfer = Module._SPI_datumTransfer = wasmExports.SPI_datumTransfer)(e, t, r),\n        _datumTransfer = Module._datumTransfer = (e, t, r) => (_datumTransfer = Module._datumTransfer = wasmExports.datumTransfer)(e, t, r),\n        _SPI_cursor_open_with_paramlist = Module._SPI_cursor_open_with_paramlist = (e, t, r, a) => (_SPI_cursor_open_with_paramlist = Module._SPI_cursor_open_with_paramlist = wasmExports.SPI_cursor_open_with_paramlist)(e, t, r, a),\n        _SPI_cursor_parse_open = Module._SPI_cursor_parse_open = (e, t, r) => (_SPI_cursor_parse_open = Module._SPI_cursor_parse_open = wasmExports.SPI_cursor_parse_open)(e, t, r),\n        _SPI_cursor_find = Module._SPI_cursor_find = e => (_SPI_cursor_find = Module._SPI_cursor_find = wasmExports.SPI_cursor_find)(e),\n        _SPI_cursor_fetch = Module._SPI_cursor_fetch = (e, t, r) => (_SPI_cursor_fetch = Module._SPI_cursor_fetch = wasmExports.SPI_cursor_fetch)(e, t, r),\n        _SPI_scroll_cursor_fetch = Module._SPI_scroll_cursor_fetch = (e, t, r) => (_SPI_scroll_cursor_fetch = Module._SPI_scroll_cursor_fetch = wasmExports.SPI_scroll_cursor_fetch)(e, t, r),\n        _SPI_scroll_cursor_move = Module._SPI_scroll_cursor_move = (e, t, r) => (_SPI_scroll_cursor_move = Module._SPI_scroll_cursor_move = wasmExports.SPI_scroll_cursor_move)(e, t, r),\n        _SPI_cursor_close = Module._SPI_cursor_close = e => (_SPI_cursor_close = Module._SPI_cursor_close = wasmExports.SPI_cursor_close)(e),\n        _SPI_result_code_string = Module._SPI_result_code_string = e => (_SPI_result_code_string = Module._SPI_result_code_string = wasmExports.SPI_result_code_string)(e),\n        _SPI_plan_get_plan_sources = Module._SPI_plan_get_plan_sources = e => (_SPI_plan_get_plan_sources = Module._SPI_plan_get_plan_sources = wasmExports.SPI_plan_get_plan_sources)(e),\n        _SPI_plan_get_cached_plan = Module._SPI_plan_get_cached_plan = e => (_SPI_plan_get_cached_plan = Module._SPI_plan_get_cached_plan = wasmExports.SPI_plan_get_cached_plan)(e),\n        _geterrposition = Module._geterrposition = () => (_geterrposition = Module._geterrposition = wasmExports.geterrposition)(),\n        _internalerrposition = Module._internalerrposition = e => (_internalerrposition = Module._internalerrposition = wasmExports.internalerrposition)(e),\n        _internalerrquery = Module._internalerrquery = e => (_internalerrquery = Module._internalerrquery = wasmExports.internalerrquery)(e),\n        _SPI_register_trigger_data = Module._SPI_register_trigger_data = e => (_SPI_register_trigger_data = Module._SPI_register_trigger_data = wasmExports.SPI_register_trigger_data)(e),\n        _EOH_get_flat_size = Module._EOH_get_flat_size = e => (_EOH_get_flat_size = Module._EOH_get_flat_size = wasmExports.EOH_get_flat_size)(e),\n        _EOH_flatten_into = Module._EOH_flatten_into = (e, t, r) => (_EOH_flatten_into = Module._EOH_flatten_into = wasmExports.EOH_flatten_into)(e, t, r),\n        _ExecFetchSlotHeapTuple = Module._ExecFetchSlotHeapTuple = (e, t, r) => (_ExecFetchSlotHeapTuple = Module._ExecFetchSlotHeapTuple = wasmExports.ExecFetchSlotHeapTuple)(e, t, r),\n        _InputFunctionCall = Module._InputFunctionCall = (e, t, r, a) => (_InputFunctionCall = Module._InputFunctionCall = wasmExports.InputFunctionCall)(e, t, r, a),\n        _convert_tuples_by_position = Module._convert_tuples_by_position = (e, t, r) => (_convert_tuples_by_position = Module._convert_tuples_by_position = wasmExports.convert_tuples_by_position)(e, t, r),\n        _SetTuplestoreDestReceiverParams = Module._SetTuplestoreDestReceiverParams = (e, t, r, a, o, s) => (_SetTuplestoreDestReceiverParams = Module._SetTuplestoreDestReceiverParams = wasmExports.SetTuplestoreDestReceiverParams)(e, t, r, a, o, s),\n        _detoast_external_attr = Module._detoast_external_attr = e => (_detoast_external_attr = Module._detoast_external_attr = wasmExports.detoast_external_attr)(e),\n        _bms_nonempty_difference = Module._bms_nonempty_difference = (e, t) => (_bms_nonempty_difference = Module._bms_nonempty_difference = wasmExports.bms_nonempty_difference)(e, t),\n        _table_parallelscan_estimate = Module._table_parallelscan_estimate = (e, t) => (_table_parallelscan_estimate = Module._table_parallelscan_estimate = wasmExports.table_parallelscan_estimate)(e, t),\n        _table_parallelscan_initialize = Module._table_parallelscan_initialize = (e, t, r) => (_table_parallelscan_initialize = Module._table_parallelscan_initialize = wasmExports.table_parallelscan_initialize)(e, t, r),\n        _table_beginscan_parallel = Module._table_beginscan_parallel = (e, t) => (_table_beginscan_parallel = Module._table_beginscan_parallel = wasmExports.table_beginscan_parallel)(e, t),\n        _BufferUsageAccumDiff = Module._BufferUsageAccumDiff = (e, t, r) => (_BufferUsageAccumDiff = Module._BufferUsageAccumDiff = wasmExports.BufferUsageAccumDiff)(e, t, r),\n        _WalUsageAccumDiff = Module._WalUsageAccumDiff = (e, t, r) => (_WalUsageAccumDiff = Module._WalUsageAccumDiff = wasmExports.WalUsageAccumDiff)(e, t, r),\n        _InstrUpdateTupleCount = Module._InstrUpdateTupleCount = (e, t) => (_InstrUpdateTupleCount = Module._InstrUpdateTupleCount = wasmExports.InstrUpdateTupleCount)(e, t),\n        _tuplesort_reset = Module._tuplesort_reset = e => (_tuplesort_reset = Module._tuplesort_reset = wasmExports.tuplesort_reset)(e),\n        _get_call_expr_argtype = Module._get_call_expr_argtype = (e, t) => (_get_call_expr_argtype = Module._get_call_expr_argtype = wasmExports.get_call_expr_argtype)(e, t),\n        _get_typtype = Module._get_typtype = e => (_get_typtype = Module._get_typtype = wasmExports.get_typtype)(e),\n        _pull_var_clause = Module._pull_var_clause = (e, t) => (_pull_var_clause = Module._pull_var_clause = wasmExports.pull_var_clause)(e, t),\n        _bms_is_subset = Module._bms_is_subset = (e, t) => (_bms_is_subset = Module._bms_is_subset = wasmExports.bms_is_subset)(e, t),\n        _bms_membership = Module._bms_membership = e => (_bms_membership = Module._bms_membership = wasmExports.bms_membership)(e),\n        _make_restrictinfo = Module._make_restrictinfo = (e, t, r, a, o, s, l, n, _, m) => (_make_restrictinfo = Module._make_restrictinfo = wasmExports.make_restrictinfo)(e, t, r, a, o, s, l, n, _, m),\n        _GetSysCacheHashValue = Module._GetSysCacheHashValue = (e, t, r, a, o) => (_GetSysCacheHashValue = Module._GetSysCacheHashValue = wasmExports.GetSysCacheHashValue)(e, t, r, a, o),\n        _tlist_member = Module._tlist_member = (e, t) => (_tlist_member = Module._tlist_member = wasmExports.tlist_member)(e, t),\n        _add_path = Module._add_path = (e, t) => (_add_path = Module._add_path = wasmExports.add_path)(e, t),\n        _contain_mutable_functions = Module._contain_mutable_functions = e => (_contain_mutable_functions = Module._contain_mutable_functions = wasmExports.contain_mutable_functions)(e),\n        _make_orclause = Module._make_orclause = e => (_make_orclause = Module._make_orclause = wasmExports.make_orclause)(e),\n        _extract_actual_clauses = Module._extract_actual_clauses = (e, t) => (_extract_actual_clauses = Module._extract_actual_clauses = wasmExports.extract_actual_clauses)(e, t),\n        _cost_sort = Module._cost_sort = (e, t, r, a, o, s, l, n, _) => (_cost_sort = Module._cost_sort = wasmExports.cost_sort)(e, t, r, a, o, s, l, n, _),\n        _pathkeys_contained_in = Module._pathkeys_contained_in = (e, t) => (_pathkeys_contained_in = Module._pathkeys_contained_in = wasmExports.pathkeys_contained_in)(e, t),\n        _change_plan_targetlist = Module._change_plan_targetlist = (e, t, r) => (_change_plan_targetlist = Module._change_plan_targetlist = wasmExports.change_plan_targetlist)(e, t, r),\n        _make_foreignscan = Module._make_foreignscan = (e, t, r, a, o, s, l, n) => (_make_foreignscan = Module._make_foreignscan = wasmExports.make_foreignscan)(e, t, r, a, o, s, l, n),\n        _list_member_ptr = Module._list_member_ptr = (e, t) => (_list_member_ptr = Module._list_member_ptr = wasmExports.list_member_ptr)(e, t),\n        _clamp_row_est = Module._clamp_row_est = e => (_clamp_row_est = Module._clamp_row_est = wasmExports.clamp_row_est)(e),\n        _standard_planner = Module._standard_planner = (e, t, r, a) => (_standard_planner = Module._standard_planner = wasmExports.standard_planner)(e, t, r, a),\n        _estimate_expression_value = Module._estimate_expression_value = (e, t) => (_estimate_expression_value = Module._estimate_expression_value = wasmExports.estimate_expression_value)(e, t),\n        _add_new_columns_to_pathtarget = Module._add_new_columns_to_pathtarget = (e, t) => (_add_new_columns_to_pathtarget = Module._add_new_columns_to_pathtarget = wasmExports.add_new_columns_to_pathtarget)(e, t),\n        _get_sortgroupref_clause_noerr = Module._get_sortgroupref_clause_noerr = (e, t) => (_get_sortgroupref_clause_noerr = Module._get_sortgroupref_clause_noerr = wasmExports.get_sortgroupref_clause_noerr)(e, t),\n        _get_agg_clause_costs = Module._get_agg_clause_costs = (e, t, r) => (_get_agg_clause_costs = Module._get_agg_clause_costs = wasmExports.get_agg_clause_costs)(e, t, r),\n        _grouping_is_sortable = Module._grouping_is_sortable = e => (_grouping_is_sortable = Module._grouping_is_sortable = wasmExports.grouping_is_sortable)(e),\n        _create_sort_path = Module._create_sort_path = (e, t, r, a, o) => (_create_sort_path = Module._create_sort_path = wasmExports.create_sort_path)(e, t, r, a, o),\n        _copy_pathtarget = Module._copy_pathtarget = e => (_copy_pathtarget = Module._copy_pathtarget = wasmExports.copy_pathtarget)(e),\n        _get_sortgrouplist_exprs = Module._get_sortgrouplist_exprs = (e, t) => (_get_sortgrouplist_exprs = Module._get_sortgrouplist_exprs = wasmExports.get_sortgrouplist_exprs)(e, t),\n        _estimate_num_groups = Module._estimate_num_groups = (e, t, r, a, o) => (_estimate_num_groups = Module._estimate_num_groups = wasmExports.estimate_num_groups)(e, t, r, a, o),\n        _cost_qual_eval = Module._cost_qual_eval = (e, t, r) => (_cost_qual_eval = Module._cost_qual_eval = wasmExports.cost_qual_eval)(e, t, r),\n        _plan_create_index_workers = Module._plan_create_index_workers = (e, t) => (_plan_create_index_workers = Module._plan_create_index_workers = wasmExports.plan_create_index_workers)(e, t),\n        _create_projection_path = Module._create_projection_path = (e, t, r, a) => (_create_projection_path = Module._create_projection_path = wasmExports.create_projection_path)(e, t, r, a),\n        _get_plan_rowmark = Module._get_plan_rowmark = (e, t) => (_get_plan_rowmark = Module._get_plan_rowmark = wasmExports.get_plan_rowmark)(e, t),\n        _find_join_rel = Module._find_join_rel = (e, t) => (_find_join_rel = Module._find_join_rel = wasmExports.find_join_rel)(e, t),\n        _make_canonical_pathkey = Module._make_canonical_pathkey = (e, t, r, a, o) => (_make_canonical_pathkey = Module._make_canonical_pathkey = wasmExports.make_canonical_pathkey)(e, t, r, a, o),\n        _eclass_useful_for_merging = Module._eclass_useful_for_merging = (e, t, r) => (_eclass_useful_for_merging = Module._eclass_useful_for_merging = wasmExports.eclass_useful_for_merging)(e, t, r),\n        _update_mergeclause_eclasses = Module._update_mergeclause_eclasses = (e, t) => (_update_mergeclause_eclasses = Module._update_mergeclause_eclasses = wasmExports.update_mergeclause_eclasses)(e, t),\n        _clauselist_selectivity = Module._clauselist_selectivity = (e, t, r, a, o) => (_clauselist_selectivity = Module._clauselist_selectivity = wasmExports.clauselist_selectivity)(e, t, r, a, o),\n        _join_clause_is_movable_to = Module._join_clause_is_movable_to = (e, t) => (_join_clause_is_movable_to = Module._join_clause_is_movable_to = wasmExports.join_clause_is_movable_to)(e, t),\n        _generate_implied_equalities_for_column = Module._generate_implied_equalities_for_column = (e, t, r, a, o) => (_generate_implied_equalities_for_column = Module._generate_implied_equalities_for_column = wasmExports.generate_implied_equalities_for_column)(e, t, r, a, o),\n        _get_tablespace_page_costs = Module._get_tablespace_page_costs = (e, t, r) => (_get_tablespace_page_costs = Module._get_tablespace_page_costs = wasmExports.get_tablespace_page_costs)(e, t, r),\n        _set_baserel_size_estimates = Module._set_baserel_size_estimates = (e, t) => (_set_baserel_size_estimates = Module._set_baserel_size_estimates = wasmExports.set_baserel_size_estimates)(e, t),\n        _add_to_flat_tlist = Module._add_to_flat_tlist = (e, t) => (_add_to_flat_tlist = Module._add_to_flat_tlist = wasmExports.add_to_flat_tlist)(e, t),\n        _get_baserel_parampathinfo = Module._get_baserel_parampathinfo = (e, t, r) => (_get_baserel_parampathinfo = Module._get_baserel_parampathinfo = wasmExports.get_baserel_parampathinfo)(e, t, r),\n        _create_foreignscan_path = Module._create_foreignscan_path = (e, t, r, a, o, s, l, n, _, m) => (_create_foreignscan_path = Module._create_foreignscan_path = wasmExports.create_foreignscan_path)(e, t, r, a, o, s, l, n, _, m),\n        _create_foreign_join_path = Module._create_foreign_join_path = (e, t, r, a, o, s, l, n, _, m) => (_create_foreign_join_path = Module._create_foreign_join_path = wasmExports.create_foreign_join_path)(e, t, r, a, o, s, l, n, _, m),\n        _create_foreign_upper_path = Module._create_foreign_upper_path = (e, t, r, a, o, s, l, n, _) => (_create_foreign_upper_path = Module._create_foreign_upper_path = wasmExports.create_foreign_upper_path)(e, t, r, a, o, s, l, n, _),\n        _adjust_limit_rows_costs = Module._adjust_limit_rows_costs = (e, t, r, a, o) => (_adjust_limit_rows_costs = Module._adjust_limit_rows_costs = wasmExports.adjust_limit_rows_costs)(e, t, r, a, o),\n        _SearchSysCacheAttName = Module._SearchSysCacheAttName = (e, t) => (_SearchSysCacheAttName = Module._SearchSysCacheAttName = wasmExports.SearchSysCacheAttName)(e, t),\n        _get_translated_update_targetlist = Module._get_translated_update_targetlist = (e, t, r, a) => (_get_translated_update_targetlist = Module._get_translated_update_targetlist = wasmExports.get_translated_update_targetlist)(e, t, r, a),\n        _add_row_identity_var = Module._add_row_identity_var = (e, t, r, a) => (_add_row_identity_var = Module._add_row_identity_var = wasmExports.add_row_identity_var)(e, t, r, a),\n        _get_rel_all_updated_cols = Module._get_rel_all_updated_cols = (e, t) => (_get_rel_all_updated_cols = Module._get_rel_all_updated_cols = wasmExports.get_rel_all_updated_cols)(e, t),\n        _list_append_unique_ptr = Module._list_append_unique_ptr = (e, t) => (_list_append_unique_ptr = Module._list_append_unique_ptr = wasmExports.list_append_unique_ptr)(e, t),\n        _palloc_extended = Module._palloc_extended = (e, t) => (_palloc_extended = Module._palloc_extended = wasmExports.palloc_extended)(e, t),\n        _pg_reg_getinitialstate = Module._pg_reg_getinitialstate = e => (_pg_reg_getinitialstate = Module._pg_reg_getinitialstate = wasmExports.pg_reg_getinitialstate)(e),\n        _pg_reg_getfinalstate = Module._pg_reg_getfinalstate = e => (_pg_reg_getfinalstate = Module._pg_reg_getfinalstate = wasmExports.pg_reg_getfinalstate)(e),\n        _pg_reg_getnumoutarcs = Module._pg_reg_getnumoutarcs = (e, t) => (_pg_reg_getnumoutarcs = Module._pg_reg_getnumoutarcs = wasmExports.pg_reg_getnumoutarcs)(e, t),\n        _pg_reg_getoutarcs = Module._pg_reg_getoutarcs = (e, t, r, a) => (_pg_reg_getoutarcs = Module._pg_reg_getoutarcs = wasmExports.pg_reg_getoutarcs)(e, t, r, a),\n        _pg_reg_getnumcolors = Module._pg_reg_getnumcolors = e => (_pg_reg_getnumcolors = Module._pg_reg_getnumcolors = wasmExports.pg_reg_getnumcolors)(e),\n        _pg_reg_colorisbegin = Module._pg_reg_colorisbegin = (e, t) => (_pg_reg_colorisbegin = Module._pg_reg_colorisbegin = wasmExports.pg_reg_colorisbegin)(e, t),\n        _pg_reg_colorisend = Module._pg_reg_colorisend = (e, t) => (_pg_reg_colorisend = Module._pg_reg_colorisend = wasmExports.pg_reg_colorisend)(e, t),\n        _pg_reg_getnumcharacters = Module._pg_reg_getnumcharacters = (e, t) => (_pg_reg_getnumcharacters = Module._pg_reg_getnumcharacters = wasmExports.pg_reg_getnumcharacters)(e, t),\n        _pg_reg_getcharacters = Module._pg_reg_getcharacters = (e, t, r, a) => (_pg_reg_getcharacters = Module._pg_reg_getcharacters = wasmExports.pg_reg_getcharacters)(e, t, r, a),\n        _toupper = Module._toupper = e => (_toupper = Module._toupper = wasmExports.toupper)(e),\n        _pg_initdb = Module._pg_initdb = () => (_pg_initdb = Module._pg_initdb = wasmExports.pg_initdb)(),\n        _pg_initdb_main = Module._pg_initdb_main = () => (_pg_initdb_main = Module._pg_initdb_main = wasmExports.pg_initdb_main)(),\n        ___cxa_throw = Module.___cxa_throw = (e, t, r) => (___cxa_throw = Module.___cxa_throw = wasmExports.__cxa_throw)(e, t, r),\n        _main_repl = Module._main_repl = () => (_main_repl = Module._main_repl = wasmExports.main_repl)(),\n        _main = Module._main = (e, t) => (_main = Module._main = wasmExports.__main_argc_argv)(e, t),\n        _setenv = Module._setenv = (e, t, r) => (_setenv = Module._setenv = wasmExports.setenv)(e, t, r),\n        _pg_repl_raf = Module._pg_repl_raf = () => (_pg_repl_raf = Module._pg_repl_raf = wasmExports.pg_repl_raf)(),\n        _GetForeignDataWrapper = Module._GetForeignDataWrapper = e => (_GetForeignDataWrapper = Module._GetForeignDataWrapper = wasmExports.GetForeignDataWrapper)(e),\n        _GetForeignServer = Module._GetForeignServer = e => (_GetForeignServer = Module._GetForeignServer = wasmExports.GetForeignServer)(e),\n        _GetForeignServerExtended = Module._GetForeignServerExtended = (e, t) => (_GetForeignServerExtended = Module._GetForeignServerExtended = wasmExports.GetForeignServerExtended)(e, t),\n        _GetForeignServerByName = Module._GetForeignServerByName = (e, t) => (_GetForeignServerByName = Module._GetForeignServerByName = wasmExports.GetForeignServerByName)(e, t),\n        _GetUserMapping = Module._GetUserMapping = (e, t) => (_GetUserMapping = Module._GetUserMapping = wasmExports.GetUserMapping)(e, t),\n        _GetForeignTable = Module._GetForeignTable = e => (_GetForeignTable = Module._GetForeignTable = wasmExports.GetForeignTable)(e),\n        _GetForeignColumnOptions = Module._GetForeignColumnOptions = (e, t) => (_GetForeignColumnOptions = Module._GetForeignColumnOptions = wasmExports.GetForeignColumnOptions)(e, t),\n        _initClosestMatch = Module._initClosestMatch = (e, t, r) => (_initClosestMatch = Module._initClosestMatch = wasmExports.initClosestMatch)(e, t, r),\n        _updateClosestMatch = Module._updateClosestMatch = (e, t) => (_updateClosestMatch = Module._updateClosestMatch = wasmExports.updateClosestMatch)(e, t),\n        _getClosestMatch = Module._getClosestMatch = e => (_getClosestMatch = Module._getClosestMatch = wasmExports.getClosestMatch)(e),\n        _GetExistingLocalJoinPath = Module._GetExistingLocalJoinPath = e => (_GetExistingLocalJoinPath = Module._GetExistingLocalJoinPath = wasmExports.GetExistingLocalJoinPath)(e),\n        _BaseBackupAddTarget = Module._BaseBackupAddTarget = (e, t, r) => (_BaseBackupAddTarget = Module._BaseBackupAddTarget = wasmExports.BaseBackupAddTarget)(e, t, r),\n        _bbsink_forward_begin_backup = Module._bbsink_forward_begin_backup = e => (_bbsink_forward_begin_backup = Module._bbsink_forward_begin_backup = wasmExports.bbsink_forward_begin_backup)(e),\n        _bbsink_forward_archive_contents = Module._bbsink_forward_archive_contents = (e, t) => (_bbsink_forward_archive_contents = Module._bbsink_forward_archive_contents = wasmExports.bbsink_forward_archive_contents)(e, t),\n        _bbsink_forward_end_archive = Module._bbsink_forward_end_archive = e => (_bbsink_forward_end_archive = Module._bbsink_forward_end_archive = wasmExports.bbsink_forward_end_archive)(e),\n        _bbsink_forward_begin_archive = Module._bbsink_forward_begin_archive = (e, t) => (_bbsink_forward_begin_archive = Module._bbsink_forward_begin_archive = wasmExports.bbsink_forward_begin_archive)(e, t),\n        _bbsink_forward_begin_manifest = Module._bbsink_forward_begin_manifest = e => (_bbsink_forward_begin_manifest = Module._bbsink_forward_begin_manifest = wasmExports.bbsink_forward_begin_manifest)(e),\n        _bbsink_forward_manifest_contents = Module._bbsink_forward_manifest_contents = (e, t) => (_bbsink_forward_manifest_contents = Module._bbsink_forward_manifest_contents = wasmExports.bbsink_forward_manifest_contents)(e, t),\n        _bbsink_forward_end_manifest = Module._bbsink_forward_end_manifest = e => (_bbsink_forward_end_manifest = Module._bbsink_forward_end_manifest = wasmExports.bbsink_forward_end_manifest)(e),\n        _bbsink_forward_end_backup = Module._bbsink_forward_end_backup = (e, t, r) => (_bbsink_forward_end_backup = Module._bbsink_forward_end_backup = wasmExports.bbsink_forward_end_backup)(e, t, r),\n        _bbsink_forward_cleanup = Module._bbsink_forward_cleanup = e => (_bbsink_forward_cleanup = Module._bbsink_forward_cleanup = wasmExports.bbsink_forward_cleanup)(e),\n        _ResourceOwnerCreate = Module._ResourceOwnerCreate = (e, t) => (_ResourceOwnerCreate = Module._ResourceOwnerCreate = wasmExports.ResourceOwnerCreate)(e, t),\n        _escape_json = Module._escape_json = (e, t) => (_escape_json = Module._escape_json = wasmExports.escape_json)(e, t),\n        _exprIsLengthCoercion = Module._exprIsLengthCoercion = (e, t) => (_exprIsLengthCoercion = Module._exprIsLengthCoercion = wasmExports.exprIsLengthCoercion)(e, t),\n        _tbm_add_tuples = Module._tbm_add_tuples = (e, t, r, a) => (_tbm_add_tuples = Module._tbm_add_tuples = wasmExports.tbm_add_tuples)(e, t, r, a),\n        _appendStringInfoStringQuoted = Module._appendStringInfoStringQuoted = (e, t, r) => (_appendStringInfoStringQuoted = Module._appendStringInfoStringQuoted = wasmExports.appendStringInfoStringQuoted)(e, t, r),\n        _list_make5_impl = Module._list_make5_impl = (e, t, r, a, o, s) => (_list_make5_impl = Module._list_make5_impl = wasmExports.list_make5_impl)(e, t, r, a, o, s),\n        _list_delete = Module._list_delete = (e, t) => (_list_delete = Module._list_delete = wasmExports.list_delete)(e, t),\n        _CleanQuerytext = Module._CleanQuerytext = (e, t, r) => (_CleanQuerytext = Module._CleanQuerytext = wasmExports.CleanQuerytext)(e, t, r),\n        _EnableQueryId = Module._EnableQueryId = () => (_EnableQueryId = Module._EnableQueryId = wasmExports.EnableQueryId)(),\n        _get_rel_type_id = Module._get_rel_type_id = e => (_get_rel_type_id = Module._get_rel_type_id = wasmExports.get_rel_type_id)(e),\n        _set_config_option = Module._set_config_option = (e, t, r, a, o, s, l, n) => (_set_config_option = Module._set_config_option = wasmExports.set_config_option)(e, t, r, a, o, s, l, n),\n        _NewGUCNestLevel = Module._NewGUCNestLevel = () => (_NewGUCNestLevel = Module._NewGUCNestLevel = wasmExports.NewGUCNestLevel)(),\n        _AtEOXact_GUC = Module._AtEOXact_GUC = (e, t) => (_AtEOXact_GUC = Module._AtEOXact_GUC = wasmExports.AtEOXact_GUC)(e, t),\n        _parse_int = Module._parse_int = (e, t, r, a) => (_parse_int = Module._parse_int = wasmExports.parse_int)(e, t, r, a),\n        _strtod = Module._strtod = (e, t) => (_strtod = Module._strtod = wasmExports.strtod)(e, t),\n        _parse_real = Module._parse_real = (e, t, r, a) => (_parse_real = Module._parse_real = wasmExports.parse_real)(e, t, r, a),\n        _DefineCustomBoolVariable = Module._DefineCustomBoolVariable = (e, t, r, a, o, s, l, n, _, m) => (_DefineCustomBoolVariable = Module._DefineCustomBoolVariable = wasmExports.DefineCustomBoolVariable)(e, t, r, a, o, s, l, n, _, m),\n        _DefineCustomIntVariable = Module._DefineCustomIntVariable = (e, t, r, a, o, s, l, n, _, m, p, d) => (_DefineCustomIntVariable = Module._DefineCustomIntVariable = wasmExports.DefineCustomIntVariable)(e, t, r, a, o, s, l, n, _, m, p, d),\n        _DefineCustomRealVariable = Module._DefineCustomRealVariable = (e, t, r, a, o, s, l, n, _, m, p, d) => (_DefineCustomRealVariable = Module._DefineCustomRealVariable = wasmExports.DefineCustomRealVariable)(e, t, r, a, o, s, l, n, _, m, p, d),\n        _DefineCustomStringVariable = Module._DefineCustomStringVariable = (e, t, r, a, o, s, l, n, _, m) => (_DefineCustomStringVariable = Module._DefineCustomStringVariable = wasmExports.DefineCustomStringVariable)(e, t, r, a, o, s, l, n, _, m),\n        _DefineCustomEnumVariable = Module._DefineCustomEnumVariable = (e, t, r, a, o, s, l, n, _, m, p) => (_DefineCustomEnumVariable = Module._DefineCustomEnumVariable = wasmExports.DefineCustomEnumVariable)(e, t, r, a, o, s, l, n, _, m, p),\n        _MarkGUCPrefixReserved = Module._MarkGUCPrefixReserved = e => (_MarkGUCPrefixReserved = Module._MarkGUCPrefixReserved = wasmExports.MarkGUCPrefixReserved)(e),\n        _strcspn = Module._strcspn = (e, t) => (_strcspn = Module._strcspn = wasmExports.strcspn)(e, t),\n        _BlockSampler_Init = Module._BlockSampler_Init = (e, t, r, a) => (_BlockSampler_Init = Module._BlockSampler_Init = wasmExports.BlockSampler_Init)(e, t, r, a),\n        _sampler_random_init_state = Module._sampler_random_init_state = (e, t) => (_sampler_random_init_state = Module._sampler_random_init_state = wasmExports.sampler_random_init_state)(e, t),\n        _BlockSampler_HasMore = Module._BlockSampler_HasMore = e => (_BlockSampler_HasMore = Module._BlockSampler_HasMore = wasmExports.BlockSampler_HasMore)(e),\n        _BlockSampler_Next = Module._BlockSampler_Next = e => (_BlockSampler_Next = Module._BlockSampler_Next = wasmExports.BlockSampler_Next)(e),\n        _sampler_random_fract = Module._sampler_random_fract = e => (_sampler_random_fract = Module._sampler_random_fract = wasmExports.sampler_random_fract)(e),\n        _reservoir_init_selection_state = Module._reservoir_init_selection_state = (e, t) => (_reservoir_init_selection_state = Module._reservoir_init_selection_state = wasmExports.reservoir_init_selection_state)(e, t),\n        _reservoir_get_next_S = Module._reservoir_get_next_S = (e, t, r) => (_reservoir_get_next_S = Module._reservoir_get_next_S = wasmExports.reservoir_get_next_S)(e, t, r),\n        _canonicalize_path = Module._canonicalize_path = e => (_canonicalize_path = Module._canonicalize_path = wasmExports.canonicalize_path)(e),\n        __bt_mkscankey = Module.__bt_mkscankey = (e, t) => (__bt_mkscankey = Module.__bt_mkscankey = wasmExports._bt_mkscankey)(e, t),\n        _nocache_index_getattr = Module._nocache_index_getattr = (e, t, r) => (_nocache_index_getattr = Module._nocache_index_getattr = wasmExports.nocache_index_getattr)(e, t, r),\n        _tuplesort_estimate_shared = Module._tuplesort_estimate_shared = e => (_tuplesort_estimate_shared = Module._tuplesort_estimate_shared = wasmExports.tuplesort_estimate_shared)(e),\n        _tuplesort_initialize_shared = Module._tuplesort_initialize_shared = (e, t, r) => (_tuplesort_initialize_shared = Module._tuplesort_initialize_shared = wasmExports.tuplesort_initialize_shared)(e, t, r),\n        _tuplesort_attach_shared = Module._tuplesort_attach_shared = (e, t) => (_tuplesort_attach_shared = Module._tuplesort_attach_shared = wasmExports.tuplesort_attach_shared)(e, t),\n        _GetCurrentTransactionNestLevel = Module._GetCurrentTransactionNestLevel = () => (_GetCurrentTransactionNestLevel = Module._GetCurrentTransactionNestLevel = wasmExports.GetCurrentTransactionNestLevel)(),\n        _in_error_recursion_trouble = Module._in_error_recursion_trouble = () => (_in_error_recursion_trouble = Module._in_error_recursion_trouble = wasmExports.in_error_recursion_trouble)(),\n        _strrchr = Module._strrchr = (e, t) => (_strrchr = Module._strrchr = wasmExports.strrchr)(e, t),\n        _errhidestmt = Module._errhidestmt = e => (_errhidestmt = Module._errhidestmt = wasmExports.errhidestmt)(e),\n        _err_generic_string = Module._err_generic_string = (e, t) => (_err_generic_string = Module._err_generic_string = wasmExports.err_generic_string)(e, t),\n        _getinternalerrposition = Module._getinternalerrposition = () => (_getinternalerrposition = Module._getinternalerrposition = wasmExports.getinternalerrposition)(),\n        _GetErrorContextStack = Module._GetErrorContextStack = () => (_GetErrorContextStack = Module._GetErrorContextStack = wasmExports.GetErrorContextStack)(),\n        _SplitIdentifierString = Module._SplitIdentifierString = (e, t, r) => (_SplitIdentifierString = Module._SplitIdentifierString = wasmExports.SplitIdentifierString)(e, t, r),\n        _appendStringInfoSpaces = Module._appendStringInfoSpaces = (e, t) => (_appendStringInfoSpaces = Module._appendStringInfoSpaces = wasmExports.appendStringInfoSpaces)(e, t),\n        _unpack_sql_state = Module._unpack_sql_state = e => (_unpack_sql_state = Module._unpack_sql_state = wasmExports.unpack_sql_state)(e),\n        _CreateTupleDescCopyConstr = Module._CreateTupleDescCopyConstr = e => (_CreateTupleDescCopyConstr = Module._CreateTupleDescCopyConstr = wasmExports.CreateTupleDescCopyConstr)(e),\n        _CachedPlanAllowsSimpleValidityCheck = Module._CachedPlanAllowsSimpleValidityCheck = (e, t, r) => (_CachedPlanAllowsSimpleValidityCheck = Module._CachedPlanAllowsSimpleValidityCheck = wasmExports.CachedPlanAllowsSimpleValidityCheck)(e, t, r),\n        _CachedPlanIsSimplyValid = Module._CachedPlanIsSimplyValid = (e, t, r) => (_CachedPlanIsSimplyValid = Module._CachedPlanIsSimplyValid = wasmExports.CachedPlanIsSimplyValid)(e, t, r),\n        _GetCachedExpression = Module._GetCachedExpression = e => (_GetCachedExpression = Module._GetCachedExpression = wasmExports.GetCachedExpression)(e),\n        _FreeCachedExpression = Module._FreeCachedExpression = e => (_FreeCachedExpression = Module._FreeCachedExpression = wasmExports.FreeCachedExpression)(e),\n        _MemoryContextDeleteChildren = Module._MemoryContextDeleteChildren = e => (_MemoryContextDeleteChildren = Module._MemoryContextDeleteChildren = wasmExports.MemoryContextDeleteChildren)(e),\n        _is_publishable_relation = Module._is_publishable_relation = e => (_is_publishable_relation = Module._is_publishable_relation = wasmExports.is_publishable_relation)(e),\n        _GetRelationPublications = Module._GetRelationPublications = e => (_GetRelationPublications = Module._GetRelationPublications = wasmExports.GetRelationPublications)(e),\n        _GetSchemaPublications = Module._GetSchemaPublications = e => (_GetSchemaPublications = Module._GetSchemaPublications = wasmExports.GetSchemaPublications)(e),\n        _index_getprocid = Module._index_getprocid = (e, t, r) => (_index_getprocid = Module._index_getprocid = wasmExports.index_getprocid)(e, t, r),\n        _get_rel_relispartition = Module._get_rel_relispartition = e => (_get_rel_relispartition = Module._get_rel_relispartition = wasmExports.get_rel_relispartition)(e),\n        _get_func_namespace = Module._get_func_namespace = e => (_get_func_namespace = Module._get_func_namespace = wasmExports.get_func_namespace)(e),\n        _get_typsubscript = Module._get_typsubscript = (e, t) => (_get_typsubscript = Module._get_typsubscript = wasmExports.get_typsubscript)(e, t),\n        _get_namespace_name_or_temp = Module._get_namespace_name_or_temp = e => (_get_namespace_name_or_temp = Module._get_namespace_name_or_temp = wasmExports.get_namespace_name_or_temp)(e),\n        _texteq = Module._texteq = e => (_texteq = Module._texteq = wasmExports.texteq)(e),\n        _GetUserIdAndSecContext = Module._GetUserIdAndSecContext = (e, t) => (_GetUserIdAndSecContext = Module._GetUserIdAndSecContext = wasmExports.GetUserIdAndSecContext)(e, t),\n        _SetUserIdAndSecContext = Module._SetUserIdAndSecContext = (e, t) => (_SetUserIdAndSecContext = Module._SetUserIdAndSecContext = wasmExports.SetUserIdAndSecContext)(e, t),\n        _DirectFunctionCall5Coll = Module._DirectFunctionCall5Coll = (e, t, r, a, o, s, l) => (_DirectFunctionCall5Coll = Module._DirectFunctionCall5Coll = wasmExports.DirectFunctionCall5Coll)(e, t, r, a, o, s, l),\n        _CallerFInfoFunctionCall2 = Module._CallerFInfoFunctionCall2 = (e, t, r, a, o) => (_CallerFInfoFunctionCall2 = Module._CallerFInfoFunctionCall2 = wasmExports.CallerFInfoFunctionCall2)(e, t, r, a, o),\n        _FunctionCall0Coll = Module._FunctionCall0Coll = (e, t) => (_FunctionCall0Coll = Module._FunctionCall0Coll = wasmExports.FunctionCall0Coll)(e, t),\n        _OutputFunctionCall = Module._OutputFunctionCall = (e, t) => (_OutputFunctionCall = Module._OutputFunctionCall = wasmExports.OutputFunctionCall)(e, t),\n        _get_fn_expr_rettype = Module._get_fn_expr_rettype = e => (_get_fn_expr_rettype = Module._get_fn_expr_rettype = wasmExports.get_fn_expr_rettype)(e),\n        _has_fn_opclass_options = Module._has_fn_opclass_options = e => (_has_fn_opclass_options = Module._has_fn_opclass_options = wasmExports.has_fn_opclass_options)(e),\n        _get_fn_opclass_options = Module._get_fn_opclass_options = e => (_get_fn_opclass_options = Module._get_fn_opclass_options = wasmExports.get_fn_opclass_options)(e),\n        _CheckFunctionValidatorAccess = Module._CheckFunctionValidatorAccess = (e, t) => (_CheckFunctionValidatorAccess = Module._CheckFunctionValidatorAccess = wasmExports.CheckFunctionValidatorAccess)(e, t),\n        _resolve_polymorphic_argtypes = Module._resolve_polymorphic_argtypes = (e, t, r, a) => (_resolve_polymorphic_argtypes = Module._resolve_polymorphic_argtypes = wasmExports.resolve_polymorphic_argtypes)(e, t, r, a),\n        _get_func_arg_info = Module._get_func_arg_info = (e, t, r, a) => (_get_func_arg_info = Module._get_func_arg_info = wasmExports.get_func_arg_info)(e, t, r, a),\n        _dlsym = Module._dlsym = (e, t) => (_dlsym = Module._dlsym = wasmExports.dlsym)(e, t),\n        _dlopen = Module._dlopen = (e, t) => (_dlopen = Module._dlopen = wasmExports.dlopen)(e, t),\n        _dlerror = Module._dlerror = () => (_dlerror = Module._dlerror = wasmExports.dlerror)(),\n        _dlclose = Module._dlclose = e => (_dlclose = Module._dlclose = wasmExports.dlclose)(e),\n        _find_rendezvous_variable = Module._find_rendezvous_variable = e => (_find_rendezvous_variable = Module._find_rendezvous_variable = wasmExports.find_rendezvous_variable)(e),\n        _fscanf = Module._fscanf = (e, t, r) => (_fscanf = Module._fscanf = wasmExports.fscanf)(e, t, r),\n        _strlcat = Module._strlcat = (e, t, r) => (_strlcat = Module._strlcat = wasmExports.strlcat)(e, t, r),\n        _pg_bindtextdomain = Module._pg_bindtextdomain = e => (_pg_bindtextdomain = Module._pg_bindtextdomain = wasmExports.pg_bindtextdomain)(e),\n        _pg_do_encoding_conversion = Module._pg_do_encoding_conversion = (e, t, r, a) => (_pg_do_encoding_conversion = Module._pg_do_encoding_conversion = wasmExports.pg_do_encoding_conversion)(e, t, r, a),\n        _report_invalid_encoding = Module._report_invalid_encoding = (e, t, r) => (_report_invalid_encoding = Module._report_invalid_encoding = wasmExports.report_invalid_encoding)(e, t, r),\n        _pg_encoding_to_char_private = Module._pg_encoding_to_char_private = e => (_pg_encoding_to_char_private = Module._pg_encoding_to_char_private = wasmExports.pg_encoding_to_char_private)(e),\n        _MemoryContextAllocHuge = Module._MemoryContextAllocHuge = (e, t) => (_MemoryContextAllocHuge = Module._MemoryContextAllocHuge = wasmExports.MemoryContextAllocHuge)(e, t),\n        _namein = Module._namein = e => (_namein = Module._namein = wasmExports.namein)(e),\n        _pg_char_to_encoding_private = Module._pg_char_to_encoding_private = e => (_pg_char_to_encoding_private = Module._pg_char_to_encoding_private = wasmExports.pg_char_to_encoding_private)(e),\n        _pg_encoding_max_length = Module._pg_encoding_max_length = e => (_pg_encoding_max_length = Module._pg_encoding_max_length = wasmExports.pg_encoding_max_length)(e),\n        _pg_server_to_any = Module._pg_server_to_any = (e, t, r) => (_pg_server_to_any = Module._pg_server_to_any = wasmExports.pg_server_to_any)(e, t, r),\n        _pg_utf_mblen = Module._pg_utf_mblen = e => (_pg_utf_mblen = Module._pg_utf_mblen = wasmExports.pg_utf_mblen)(e),\n        _pg_wchar2mb_with_len = Module._pg_wchar2mb_with_len = (e, t, r) => (_pg_wchar2mb_with_len = Module._pg_wchar2mb_with_len = wasmExports.pg_wchar2mb_with_len)(e, t, r),\n        _pg_encoding_mblen = Module._pg_encoding_mblen = (e, t) => (_pg_encoding_mblen = Module._pg_encoding_mblen = wasmExports.pg_encoding_mblen)(e, t),\n        _check_encoding_conversion_args = Module._check_encoding_conversion_args = (e, t, r, a, o) => (_check_encoding_conversion_args = Module._check_encoding_conversion_args = wasmExports.check_encoding_conversion_args)(e, t, r, a, o),\n        _report_untranslatable_char = Module._report_untranslatable_char = (e, t, r, a) => (_report_untranslatable_char = Module._report_untranslatable_char = wasmExports.report_untranslatable_char)(e, t, r, a),\n        _local2local = Module._local2local = (e, t, r, a, o, s, l) => (_local2local = Module._local2local = wasmExports.local2local)(e, t, r, a, o, s, l),\n        _latin2mic = Module._latin2mic = (e, t, r, a, o, s) => (_latin2mic = Module._latin2mic = wasmExports.latin2mic)(e, t, r, a, o, s),\n        _mic2latin = Module._mic2latin = (e, t, r, a, o, s) => (_mic2latin = Module._mic2latin = wasmExports.mic2latin)(e, t, r, a, o, s),\n        _latin2mic_with_table = Module._latin2mic_with_table = (e, t, r, a, o, s, l) => (_latin2mic_with_table = Module._latin2mic_with_table = wasmExports.latin2mic_with_table)(e, t, r, a, o, s, l),\n        _mic2latin_with_table = Module._mic2latin_with_table = (e, t, r, a, o, s, l) => (_mic2latin_with_table = Module._mic2latin_with_table = wasmExports.mic2latin_with_table)(e, t, r, a, o, s, l),\n        _pg_encoding_verifymbchar = Module._pg_encoding_verifymbchar = (e, t, r) => (_pg_encoding_verifymbchar = Module._pg_encoding_verifymbchar = wasmExports.pg_encoding_verifymbchar)(e, t, r),\n        _float_overflow_error = Module._float_overflow_error = () => (_float_overflow_error = Module._float_overflow_error = wasmExports.float_overflow_error)(),\n        _float_underflow_error = Module._float_underflow_error = () => (_float_underflow_error = Module._float_underflow_error = wasmExports.float_underflow_error)(),\n        _float4in_internal = Module._float4in_internal = (e, t, r, a, o) => (_float4in_internal = Module._float4in_internal = wasmExports.float4in_internal)(e, t, r, a, o),\n        _strtof = Module._strtof = (e, t) => (_strtof = Module._strtof = wasmExports.strtof)(e, t),\n        _float_to_shortest_decimal_buf = Module._float_to_shortest_decimal_buf = (e, t) => (_float_to_shortest_decimal_buf = Module._float_to_shortest_decimal_buf = wasmExports.float_to_shortest_decimal_buf)(e, t),\n        _float8in_internal = Module._float8in_internal = (e, t, r, a, o) => (_float8in_internal = Module._float8in_internal = wasmExports.float8in_internal)(e, t, r, a, o),\n        _float8out_internal = Module._float8out_internal = e => (_float8out_internal = Module._float8out_internal = wasmExports.float8out_internal)(e),\n        _btfloat4cmp = Module._btfloat4cmp = e => (_btfloat4cmp = Module._btfloat4cmp = wasmExports.btfloat4cmp)(e),\n        _btfloat8cmp = Module._btfloat8cmp = e => (_btfloat8cmp = Module._btfloat8cmp = wasmExports.btfloat8cmp)(e),\n        _pow = Module._pow = (e, t) => (_pow = Module._pow = wasmExports.pow)(e, t),\n        _log10 = Module._log10 = e => (_log10 = Module._log10 = wasmExports.log10)(e),\n        _acos = Module._acos = e => (_acos = Module._acos = wasmExports.acos)(e),\n        _asin = Module._asin = e => (_asin = Module._asin = wasmExports.asin)(e),\n        _cos = Module._cos = e => (_cos = Module._cos = wasmExports.cos)(e),\n        _sin = Module._sin = e => (_sin = Module._sin = wasmExports.sin)(e),\n        _fmod = Module._fmod = (e, t) => (_fmod = Module._fmod = wasmExports.fmod)(e, t),\n        _construct_array = Module._construct_array = (e, t, r, a, o, s) => (_construct_array = Module._construct_array = wasmExports.construct_array)(e, t, r, a, o, s),\n        _try_relation_open = Module._try_relation_open = (e, t) => (_try_relation_open = Module._try_relation_open = wasmExports.try_relation_open)(e, t),\n        _forkname_to_number = Module._forkname_to_number = e => (_forkname_to_number = Module._forkname_to_number = wasmExports.forkname_to_number)(e),\n        _numeric_lt = Module._numeric_lt = e => (_numeric_lt = Module._numeric_lt = wasmExports.numeric_lt)(e),\n        _int64_to_numeric = Module._int64_to_numeric = e => (_int64_to_numeric = Module._int64_to_numeric = wasmExports.int64_to_numeric)(e),\n        _numeric_sub = Module._numeric_sub = e => (_numeric_sub = Module._numeric_sub = wasmExports.numeric_sub)(e),\n        _numeric_ge = Module._numeric_ge = e => (_numeric_ge = Module._numeric_ge = wasmExports.numeric_ge)(e),\n        _inet_in = Module._inet_in = e => (_inet_in = Module._inet_in = wasmExports.inet_in)(e),\n        _format_operator = Module._format_operator = e => (_format_operator = Module._format_operator = wasmExports.format_operator)(e),\n        _RelationIsVisible = Module._RelationIsVisible = e => (_RelationIsVisible = Module._RelationIsVisible = wasmExports.RelationIsVisible)(e),\n        _pg_get_indexdef_columns_extended = Module._pg_get_indexdef_columns_extended = (e, t) => (_pg_get_indexdef_columns_extended = Module._pg_get_indexdef_columns_extended = wasmExports.pg_get_indexdef_columns_extended)(e, t),\n        _accumArrayResult = Module._accumArrayResult = (e, t, r, a, o) => (_accumArrayResult = Module._accumArrayResult = wasmExports.accumArrayResult)(e, t, r, a, o),\n        _makeArrayResult = Module._makeArrayResult = (e, t) => (_makeArrayResult = Module._makeArrayResult = wasmExports.makeArrayResult)(e, t),\n        _init_local_reloptions = Module._init_local_reloptions = (e, t) => (_init_local_reloptions = Module._init_local_reloptions = wasmExports.init_local_reloptions)(e, t),\n        _add_local_int_reloption = Module._add_local_int_reloption = (e, t, r, a, o, s, l) => (_add_local_int_reloption = Module._add_local_int_reloption = wasmExports.add_local_int_reloption)(e, t, r, a, o, s, l),\n        _pg_inet_net_ntop = Module._pg_inet_net_ntop = (e, t, r, a, o) => (_pg_inet_net_ntop = Module._pg_inet_net_ntop = wasmExports.pg_inet_net_ntop)(e, t, r, a, o),\n        _network_cmp = Module._network_cmp = e => (_network_cmp = Module._network_cmp = wasmExports.network_cmp)(e),\n        _convert_network_to_scalar = Module._convert_network_to_scalar = (e, t, r) => (_convert_network_to_scalar = Module._convert_network_to_scalar = wasmExports.convert_network_to_scalar)(e, t, r),\n        _JsonbValueToJsonb = Module._JsonbValueToJsonb = e => (_JsonbValueToJsonb = Module._JsonbValueToJsonb = wasmExports.JsonbValueToJsonb)(e),\n        _pushJsonbValue = Module._pushJsonbValue = (e, t, r) => (_pushJsonbValue = Module._pushJsonbValue = wasmExports.pushJsonbValue)(e, t, r),\n        _numeric_cmp = Module._numeric_cmp = e => (_numeric_cmp = Module._numeric_cmp = wasmExports.numeric_cmp)(e),\n        _timetz_cmp = Module._timetz_cmp = e => (_timetz_cmp = Module._timetz_cmp = wasmExports.timetz_cmp)(e),\n        _date_cmp = Module._date_cmp = e => (_date_cmp = Module._date_cmp = wasmExports.date_cmp)(e),\n        _time_cmp = Module._time_cmp = e => (_time_cmp = Module._time_cmp = wasmExports.time_cmp)(e),\n        _timestamp_cmp = Module._timestamp_cmp = e => (_timestamp_cmp = Module._timestamp_cmp = wasmExports.timestamp_cmp)(e),\n        _domain_check = Module._domain_check = (e, t, r, a, o) => (_domain_check = Module._domain_check = wasmExports.domain_check)(e, t, r, a, o),\n        _initArrayResult = Module._initArrayResult = (e, t, r) => (_initArrayResult = Module._initArrayResult = wasmExports.initArrayResult)(e, t, r),\n        _path_is_prefix_of_path = Module._path_is_prefix_of_path = (e, t) => (_path_is_prefix_of_path = Module._path_is_prefix_of_path = wasmExports.path_is_prefix_of_path)(e, t),\n        _path_is_relative_and_below_cwd = Module._path_is_relative_and_below_cwd = e => (_path_is_relative_and_below_cwd = Module._path_is_relative_and_below_cwd = wasmExports.path_is_relative_and_below_cwd)(e),\n        _ArrayGetIntegerTypmods = Module._ArrayGetIntegerTypmods = (e, t) => (_ArrayGetIntegerTypmods = Module._ArrayGetIntegerTypmods = wasmExports.ArrayGetIntegerTypmods)(e, t),\n        _bpchareq = Module._bpchareq = e => (_bpchareq = Module._bpchareq = wasmExports.bpchareq)(e),\n        _varstr_cmp = Module._varstr_cmp = (e, t, r, a, o) => (_varstr_cmp = Module._varstr_cmp = wasmExports.varstr_cmp)(e, t, r, a, o),\n        _bpcharlt = Module._bpcharlt = e => (_bpcharlt = Module._bpcharlt = wasmExports.bpcharlt)(e),\n        _bpcharle = Module._bpcharle = e => (_bpcharle = Module._bpcharle = wasmExports.bpcharle)(e),\n        _bpchargt = Module._bpchargt = e => (_bpchargt = Module._bpchargt = wasmExports.bpchargt)(e),\n        _bpcharge = Module._bpcharge = e => (_bpcharge = Module._bpcharge = wasmExports.bpcharge)(e),\n        _bpcharcmp = Module._bpcharcmp = e => (_bpcharcmp = Module._bpcharcmp = wasmExports.bpcharcmp)(e),\n        _current_query = Module._current_query = e => (_current_query = Module._current_query = wasmExports.current_query)(e),\n        _str_tolower = Module._str_tolower = (e, t, r) => (_str_tolower = Module._str_tolower = wasmExports.str_tolower)(e, t, r),\n        _TransferExpandedObject = Module._TransferExpandedObject = (e, t) => (_TransferExpandedObject = Module._TransferExpandedObject = wasmExports.TransferExpandedObject)(e, t),\n        _macaddr_cmp = Module._macaddr_cmp = e => (_macaddr_cmp = Module._macaddr_cmp = wasmExports.macaddr_cmp)(e),\n        _macaddr_lt = Module._macaddr_lt = e => (_macaddr_lt = Module._macaddr_lt = wasmExports.macaddr_lt)(e),\n        _macaddr_le = Module._macaddr_le = e => (_macaddr_le = Module._macaddr_le = wasmExports.macaddr_le)(e),\n        _macaddr_eq = Module._macaddr_eq = e => (_macaddr_eq = Module._macaddr_eq = wasmExports.macaddr_eq)(e),\n        _macaddr_ge = Module._macaddr_ge = e => (_macaddr_ge = Module._macaddr_ge = wasmExports.macaddr_ge)(e),\n        _macaddr_gt = Module._macaddr_gt = e => (_macaddr_gt = Module._macaddr_gt = wasmExports.macaddr_gt)(e),\n        _quote_ident = Module._quote_ident = e => (_quote_ident = Module._quote_ident = wasmExports.quote_ident)(e),\n        _timestamp_in = Module._timestamp_in = e => (_timestamp_in = Module._timestamp_in = wasmExports.timestamp_in)(e),\n        _ParseDateTime = Module._ParseDateTime = (e, t, r, a, o, s, l) => (_ParseDateTime = Module._ParseDateTime = wasmExports.ParseDateTime)(e, t, r, a, o, s, l),\n        _DecodeDateTime = Module._DecodeDateTime = (e, t, r, a, o, s, l, n) => (_DecodeDateTime = Module._DecodeDateTime = wasmExports.DecodeDateTime)(e, t, r, a, o, s, l, n),\n        ___multi3 = Module.___multi3 = (e, t, r, a, o) => (___multi3 = Module.___multi3 = wasmExports.__multi3)(e, t, r, a, o),\n        _timestamptz_in = Module._timestamptz_in = e => (_timestamptz_in = Module._timestamptz_in = wasmExports.timestamptz_in)(e),\n        _timestamp_eq = Module._timestamp_eq = e => (_timestamp_eq = Module._timestamp_eq = wasmExports.timestamp_eq)(e),\n        _timestamp_lt = Module._timestamp_lt = e => (_timestamp_lt = Module._timestamp_lt = wasmExports.timestamp_lt)(e),\n        _timestamp_gt = Module._timestamp_gt = e => (_timestamp_gt = Module._timestamp_gt = wasmExports.timestamp_gt)(e),\n        _timestamp_le = Module._timestamp_le = e => (_timestamp_le = Module._timestamp_le = wasmExports.timestamp_le)(e),\n        _timestamp_ge = Module._timestamp_ge = e => (_timestamp_ge = Module._timestamp_ge = wasmExports.timestamp_ge)(e),\n        _interval_eq = Module._interval_eq = e => (_interval_eq = Module._interval_eq = wasmExports.interval_eq)(e),\n        _interval_lt = Module._interval_lt = e => (_interval_lt = Module._interval_lt = wasmExports.interval_lt)(e),\n        _interval_gt = Module._interval_gt = e => (_interval_gt = Module._interval_gt = wasmExports.interval_gt)(e),\n        _interval_le = Module._interval_le = e => (_interval_le = Module._interval_le = wasmExports.interval_le)(e),\n        _interval_ge = Module._interval_ge = e => (_interval_ge = Module._interval_ge = wasmExports.interval_ge)(e),\n        _interval_cmp = Module._interval_cmp = e => (_interval_cmp = Module._interval_cmp = wasmExports.interval_cmp)(e),\n        _timestamp_mi = Module._timestamp_mi = e => (_timestamp_mi = Module._timestamp_mi = wasmExports.timestamp_mi)(e),\n        _interval_um = Module._interval_um = e => (_interval_um = Module._interval_um = wasmExports.interval_um)(e),\n        _interval_mi = Module._interval_mi = e => (_interval_mi = Module._interval_mi = wasmExports.interval_mi)(e),\n        _IsValidJsonNumber = Module._IsValidJsonNumber = (e, t) => (_IsValidJsonNumber = Module._IsValidJsonNumber = wasmExports.IsValidJsonNumber)(e, t),\n        _btnamecmp = Module._btnamecmp = e => (_btnamecmp = Module._btnamecmp = wasmExports.btnamecmp)(e),\n        _strncpy = Module._strncpy = (e, t, r) => (_strncpy = Module._strncpy = wasmExports.strncpy)(e, t, r),\n        _expand_array = Module._expand_array = (e, t, r) => (_expand_array = Module._expand_array = wasmExports.expand_array)(e, t, r),\n        _pg_get_encoding_from_locale = Module._pg_get_encoding_from_locale = (e, t) => (_pg_get_encoding_from_locale = Module._pg_get_encoding_from_locale = wasmExports.pg_get_encoding_from_locale)(e, t),\n        _localtime = Module._localtime = e => (_localtime = Module._localtime = wasmExports.localtime)(e),\n        _strftime = Module._strftime = (e, t, r, a) => (_strftime = Module._strftime = wasmExports.strftime)(e, t, r, a),\n        _numeric_is_nan = Module._numeric_is_nan = e => (_numeric_is_nan = Module._numeric_is_nan = wasmExports.numeric_is_nan)(e),\n        _numeric_eq = Module._numeric_eq = e => (_numeric_eq = Module._numeric_eq = wasmExports.numeric_eq)(e),\n        _numeric_gt = Module._numeric_gt = e => (_numeric_gt = Module._numeric_gt = wasmExports.numeric_gt)(e),\n        _numeric_le = Module._numeric_le = e => (_numeric_le = Module._numeric_le = wasmExports.numeric_le)(e),\n        _numeric_div = Module._numeric_div = e => (_numeric_div = Module._numeric_div = wasmExports.numeric_div)(e),\n        _numeric_float8_no_overflow = Module._numeric_float8_no_overflow = e => (_numeric_float8_no_overflow = Module._numeric_float8_no_overflow = wasmExports.numeric_float8_no_overflow)(e),\n        _numeric_float4 = Module._numeric_float4 = e => (_numeric_float4 = Module._numeric_float4 = wasmExports.numeric_float4)(e),\n        _date_eq = Module._date_eq = e => (_date_eq = Module._date_eq = wasmExports.date_eq)(e),\n        _date_lt = Module._date_lt = e => (_date_lt = Module._date_lt = wasmExports.date_lt)(e),\n        _date_le = Module._date_le = e => (_date_le = Module._date_le = wasmExports.date_le)(e),\n        _date_gt = Module._date_gt = e => (_date_gt = Module._date_gt = wasmExports.date_gt)(e),\n        _date_ge = Module._date_ge = e => (_date_ge = Module._date_ge = wasmExports.date_ge)(e),\n        _date_mi = Module._date_mi = e => (_date_mi = Module._date_mi = wasmExports.date_mi)(e),\n        _time_eq = Module._time_eq = e => (_time_eq = Module._time_eq = wasmExports.time_eq)(e),\n        _time_lt = Module._time_lt = e => (_time_lt = Module._time_lt = wasmExports.time_lt)(e),\n        _time_le = Module._time_le = e => (_time_le = Module._time_le = wasmExports.time_le)(e),\n        _time_gt = Module._time_gt = e => (_time_gt = Module._time_gt = wasmExports.time_gt)(e),\n        _time_ge = Module._time_ge = e => (_time_ge = Module._time_ge = wasmExports.time_ge)(e),\n        _time_mi_time = Module._time_mi_time = e => (_time_mi_time = Module._time_mi_time = wasmExports.time_mi_time)(e),\n        _get_extension_oid = Module._get_extension_oid = (e, t) => (_get_extension_oid = Module._get_extension_oid = wasmExports.get_extension_oid)(e, t),\n        _pg_ltoa = Module._pg_ltoa = (e, t) => (_pg_ltoa = Module._pg_ltoa = wasmExports.pg_ltoa)(e, t),\n        _varbit_in = Module._varbit_in = e => (_varbit_in = Module._varbit_in = wasmExports.varbit_in)(e),\n        _biteq = Module._biteq = e => (_biteq = Module._biteq = wasmExports.biteq)(e),\n        _bitlt = Module._bitlt = e => (_bitlt = Module._bitlt = wasmExports.bitlt)(e),\n        _bitle = Module._bitle = e => (_bitle = Module._bitle = wasmExports.bitle)(e),\n        _bitgt = Module._bitgt = e => (_bitgt = Module._bitgt = wasmExports.bitgt)(e),\n        _bitge = Module._bitge = e => (_bitge = Module._bitge = wasmExports.bitge)(e),\n        _bitcmp = Module._bitcmp = e => (_bitcmp = Module._bitcmp = wasmExports.bitcmp)(e),\n        _tidin = Module._tidin = e => (_tidin = Module._tidin = wasmExports.tidin)(e),\n        _tidout = Module._tidout = e => (_tidout = Module._tidout = wasmExports.tidout)(e),\n        _cash_cmp = Module._cash_cmp = e => (_cash_cmp = Module._cash_cmp = wasmExports.cash_cmp)(e),\n        _arraycontsel = Module._arraycontsel = e => (_arraycontsel = Module._arraycontsel = wasmExports.arraycontsel)(e),\n        _arraycontjoinsel = Module._arraycontjoinsel = e => (_arraycontjoinsel = Module._arraycontjoinsel = wasmExports.arraycontjoinsel)(e),\n        _text_lt = Module._text_lt = e => (_text_lt = Module._text_lt = wasmExports.text_lt)(e),\n        _text_le = Module._text_le = e => (_text_le = Module._text_le = wasmExports.text_le)(e),\n        _text_gt = Module._text_gt = e => (_text_gt = Module._text_gt = wasmExports.text_gt)(e),\n        _text_ge = Module._text_ge = e => (_text_ge = Module._text_ge = wasmExports.text_ge)(e),\n        _bttextcmp = Module._bttextcmp = e => (_bttextcmp = Module._bttextcmp = wasmExports.bttextcmp)(e),\n        _byteaeq = Module._byteaeq = e => (_byteaeq = Module._byteaeq = wasmExports.byteaeq)(e),\n        _bytealt = Module._bytealt = e => (_bytealt = Module._bytealt = wasmExports.bytealt)(e),\n        _byteale = Module._byteale = e => (_byteale = Module._byteale = wasmExports.byteale)(e),\n        _byteagt = Module._byteagt = e => (_byteagt = Module._byteagt = wasmExports.byteagt)(e),\n        _byteage = Module._byteage = e => (_byteage = Module._byteage = wasmExports.byteage)(e),\n        _byteacmp = Module._byteacmp = e => (_byteacmp = Module._byteacmp = wasmExports.byteacmp)(e),\n        _to_hex32 = Module._to_hex32 = e => (_to_hex32 = Module._to_hex32 = wasmExports.to_hex32)(e),\n        _varstr_levenshtein = Module._varstr_levenshtein = (e, t, r, a, o, s, l, n) => (_varstr_levenshtein = Module._varstr_levenshtein = wasmExports.varstr_levenshtein)(e, t, r, a, o, s, l, n),\n        _utf8_to_unicode = Module._utf8_to_unicode = e => (_utf8_to_unicode = Module._utf8_to_unicode = wasmExports.utf8_to_unicode)(e),\n        _format_type_extended = Module._format_type_extended = (e, t, r) => (_format_type_extended = Module._format_type_extended = wasmExports.format_type_extended)(e, t, r),\n        _array_create_iterator = Module._array_create_iterator = (e, t, r) => (_array_create_iterator = Module._array_create_iterator = wasmExports.array_create_iterator)(e, t, r),\n        _array_iterate = Module._array_iterate = (e, t, r) => (_array_iterate = Module._array_iterate = wasmExports.array_iterate)(e, t, r),\n        _make_expanded_record_from_typeid = Module._make_expanded_record_from_typeid = (e, t, r) => (_make_expanded_record_from_typeid = Module._make_expanded_record_from_typeid = wasmExports.make_expanded_record_from_typeid)(e, t, r),\n        _make_expanded_record_from_tupdesc = Module._make_expanded_record_from_tupdesc = (e, t) => (_make_expanded_record_from_tupdesc = Module._make_expanded_record_from_tupdesc = wasmExports.make_expanded_record_from_tupdesc)(e, t),\n        _make_expanded_record_from_exprecord = Module._make_expanded_record_from_exprecord = (e, t) => (_make_expanded_record_from_exprecord = Module._make_expanded_record_from_exprecord = wasmExports.make_expanded_record_from_exprecord)(e, t),\n        _expanded_record_set_tuple = Module._expanded_record_set_tuple = (e, t, r, a) => (_expanded_record_set_tuple = Module._expanded_record_set_tuple = wasmExports.expanded_record_set_tuple)(e, t, r, a),\n        _expanded_record_get_tuple = Module._expanded_record_get_tuple = e => (_expanded_record_get_tuple = Module._expanded_record_get_tuple = wasmExports.expanded_record_get_tuple)(e),\n        _deconstruct_expanded_record = Module._deconstruct_expanded_record = e => (_deconstruct_expanded_record = Module._deconstruct_expanded_record = wasmExports.deconstruct_expanded_record)(e),\n        _expanded_record_lookup_field = Module._expanded_record_lookup_field = (e, t, r) => (_expanded_record_lookup_field = Module._expanded_record_lookup_field = wasmExports.expanded_record_lookup_field)(e, t, r),\n        _expanded_record_set_field_internal = Module._expanded_record_set_field_internal = (e, t, r, a, o, s) => (_expanded_record_set_field_internal = Module._expanded_record_set_field_internal = wasmExports.expanded_record_set_field_internal)(e, t, r, a, o, s),\n        _expanded_record_set_fields = Module._expanded_record_set_fields = (e, t, r, a) => (_expanded_record_set_fields = Module._expanded_record_set_fields = wasmExports.expanded_record_set_fields)(e, t, r, a),\n        _macaddr8_cmp = Module._macaddr8_cmp = e => (_macaddr8_cmp = Module._macaddr8_cmp = wasmExports.macaddr8_cmp)(e),\n        _macaddr8_lt = Module._macaddr8_lt = e => (_macaddr8_lt = Module._macaddr8_lt = wasmExports.macaddr8_lt)(e),\n        _macaddr8_le = Module._macaddr8_le = e => (_macaddr8_le = Module._macaddr8_le = wasmExports.macaddr8_le)(e),\n        _macaddr8_eq = Module._macaddr8_eq = e => (_macaddr8_eq = Module._macaddr8_eq = wasmExports.macaddr8_eq)(e),\n        _macaddr8_ge = Module._macaddr8_ge = e => (_macaddr8_ge = Module._macaddr8_ge = wasmExports.macaddr8_ge)(e),\n        _macaddr8_gt = Module._macaddr8_gt = e => (_macaddr8_gt = Module._macaddr8_gt = wasmExports.macaddr8_gt)(e),\n        _enum_lt = Module._enum_lt = e => (_enum_lt = Module._enum_lt = wasmExports.enum_lt)(e),\n        _enum_le = Module._enum_le = e => (_enum_le = Module._enum_le = wasmExports.enum_le)(e),\n        _enum_ge = Module._enum_ge = e => (_enum_ge = Module._enum_ge = wasmExports.enum_ge)(e),\n        _enum_gt = Module._enum_gt = e => (_enum_gt = Module._enum_gt = wasmExports.enum_gt)(e),\n        _enum_cmp = Module._enum_cmp = e => (_enum_cmp = Module._enum_cmp = wasmExports.enum_cmp)(e),\n        _uuid_in = Module._uuid_in = e => (_uuid_in = Module._uuid_in = wasmExports.uuid_in)(e),\n        _uuid_out = Module._uuid_out = e => (_uuid_out = Module._uuid_out = wasmExports.uuid_out)(e),\n        _uuid_cmp = Module._uuid_cmp = e => (_uuid_cmp = Module._uuid_cmp = wasmExports.uuid_cmp)(e),\n        _gen_random_uuid = Module._gen_random_uuid = e => (_gen_random_uuid = Module._gen_random_uuid = wasmExports.gen_random_uuid)(e),\n        _generic_restriction_selectivity = Module._generic_restriction_selectivity = (e, t, r, a, o, s) => (_generic_restriction_selectivity = Module._generic_restriction_selectivity = wasmExports.generic_restriction_selectivity)(e, t, r, a, o, s),\n        _genericcostestimate = Module._genericcostestimate = (e, t, r, a) => (_genericcostestimate = Module._genericcostestimate = wasmExports.genericcostestimate)(e, t, r, a),\n        _pg_xml_init = Module._pg_xml_init = e => (_pg_xml_init = Module._pg_xml_init = wasmExports.pg_xml_init)(e),\n        _xmlInitParser = Module._xmlInitParser = () => (_xmlInitParser = Module._xmlInitParser = wasmExports.xmlInitParser)(),\n        _xml_ereport = Module._xml_ereport = (e, t, r, a) => (_xml_ereport = Module._xml_ereport = wasmExports.xml_ereport)(e, t, r, a),\n        _pg_xml_done = Module._pg_xml_done = (e, t) => (_pg_xml_done = Module._pg_xml_done = wasmExports.pg_xml_done)(e, t),\n        _xmlXPathNewContext = Module._xmlXPathNewContext = e => (_xmlXPathNewContext = Module._xmlXPathNewContext = wasmExports.xmlXPathNewContext)(e),\n        _xmlXPathFreeContext = Module._xmlXPathFreeContext = e => (_xmlXPathFreeContext = Module._xmlXPathFreeContext = wasmExports.xmlXPathFreeContext)(e),\n        _xmlFreeDoc = Module._xmlFreeDoc = e => (_xmlFreeDoc = Module._xmlFreeDoc = wasmExports.xmlFreeDoc)(e),\n        _xmlXPathCompile = Module._xmlXPathCompile = e => (_xmlXPathCompile = Module._xmlXPathCompile = wasmExports.xmlXPathCompile)(e),\n        _xmlXPathCompiledEval = Module._xmlXPathCompiledEval = (e, t) => (_xmlXPathCompiledEval = Module._xmlXPathCompiledEval = wasmExports.xmlXPathCompiledEval)(e, t),\n        _xmlXPathFreeCompExpr = Module._xmlXPathFreeCompExpr = e => (_xmlXPathFreeCompExpr = Module._xmlXPathFreeCompExpr = wasmExports.xmlXPathFreeCompExpr)(e),\n        _xmlStrdup = Module._xmlStrdup = e => (_xmlStrdup = Module._xmlStrdup = wasmExports.xmlStrdup)(e),\n        _strnlen = Module._strnlen = (e, t) => (_strnlen = Module._strnlen = wasmExports.strnlen)(e, t),\n        _xmlXPathCastNodeToString = Module._xmlXPathCastNodeToString = e => (_xmlXPathCastNodeToString = Module._xmlXPathCastNodeToString = wasmExports.xmlXPathCastNodeToString)(e),\n        _heap_modify_tuple_by_cols = Module._heap_modify_tuple_by_cols = (e, t, r, a, o, s) => (_heap_modify_tuple_by_cols = Module._heap_modify_tuple_by_cols = wasmExports.heap_modify_tuple_by_cols)(e, t, r, a, o, s),\n        _ResourceOwnerReleaseAllPlanCacheRefs = Module._ResourceOwnerReleaseAllPlanCacheRefs = e => (_ResourceOwnerReleaseAllPlanCacheRefs = Module._ResourceOwnerReleaseAllPlanCacheRefs = wasmExports.ResourceOwnerReleaseAllPlanCacheRefs)(e),\n        _RegisterResourceReleaseCallback = Module._RegisterResourceReleaseCallback = (e, t) => (_RegisterResourceReleaseCallback = Module._RegisterResourceReleaseCallback = wasmExports.RegisterResourceReleaseCallback)(e, t),\n        _PinPortal = Module._PinPortal = e => (_PinPortal = Module._PinPortal = wasmExports.PinPortal)(e),\n        _UnpinPortal = Module._UnpinPortal = e => (_UnpinPortal = Module._UnpinPortal = wasmExports.UnpinPortal)(e),\n        _btint2cmp = Module._btint2cmp = e => (_btint2cmp = Module._btint2cmp = wasmExports.btint2cmp)(e),\n        _btint4cmp = Module._btint4cmp = e => (_btint4cmp = Module._btint4cmp = wasmExports.btint4cmp)(e),\n        _btoidcmp = Module._btoidcmp = e => (_btoidcmp = Module._btoidcmp = wasmExports.btoidcmp)(e),\n        _btcharcmp = Module._btcharcmp = e => (_btcharcmp = Module._btcharcmp = wasmExports.btcharcmp)(e),\n        _btint8cmp = Module._btint8cmp = e => (_btint8cmp = Module._btint8cmp = wasmExports.btint8cmp)(e),\n        _btboolcmp = Module._btboolcmp = e => (_btboolcmp = Module._btboolcmp = wasmExports.btboolcmp)(e),\n        _GetPublicationByName = Module._GetPublicationByName = (e, t) => (_GetPublicationByName = Module._GetPublicationByName = wasmExports.GetPublicationByName)(e, t),\n        _GetTopMostAncestorInPublication = Module._GetTopMostAncestorInPublication = (e, t, r) => (_GetTopMostAncestorInPublication = Module._GetTopMostAncestorInPublication = wasmExports.GetTopMostAncestorInPublication)(e, t, r),\n        _pub_collist_to_bitmapset = Module._pub_collist_to_bitmapset = (e, t, r) => (_pub_collist_to_bitmapset = Module._pub_collist_to_bitmapset = wasmExports.pub_collist_to_bitmapset)(e, t, r),\n        _getExtensionOfObject = Module._getExtensionOfObject = (e, t) => (_getExtensionOfObject = Module._getExtensionOfObject = wasmExports.getExtensionOfObject)(e, t),\n        _visibilitymap_prepare_truncate = Module._visibilitymap_prepare_truncate = (e, t) => (_visibilitymap_prepare_truncate = Module._visibilitymap_prepare_truncate = wasmExports.visibilitymap_prepare_truncate)(e, t),\n        _log_newpage_range = Module._log_newpage_range = (e, t, r, a, o) => (_log_newpage_range = Module._log_newpage_range = wasmExports.log_newpage_range)(e, t, r, a, o),\n        _function_parse_error_transpose = Module._function_parse_error_transpose = e => (_function_parse_error_transpose = Module._function_parse_error_transpose = wasmExports.function_parse_error_transpose)(e),\n        _IndexGetRelation = Module._IndexGetRelation = (e, t) => (_IndexGetRelation = Module._IndexGetRelation = wasmExports.IndexGetRelation)(e, t),\n        _RelnameGetRelid = Module._RelnameGetRelid = e => (_RelnameGetRelid = Module._RelnameGetRelid = wasmExports.RelnameGetRelid)(e),\n        _standard_ProcessUtility = Module._standard_ProcessUtility = (e, t, r, a, o, s, l, n) => (_standard_ProcessUtility = Module._standard_ProcessUtility = wasmExports.standard_ProcessUtility)(e, t, r, a, o, s, l, n),\n        _Async_Notify = Module._Async_Notify = (e, t) => (_Async_Notify = Module._Async_Notify = wasmExports.Async_Notify)(e, t),\n        _sigaddset = Module._sigaddset = (e, t) => (_sigaddset = Module._sigaddset = wasmExports.sigaddset)(e, t),\n        _fsync_pgdata = Module._fsync_pgdata = (e, t) => (_fsync_pgdata = Module._fsync_pgdata = wasmExports.fsync_pgdata)(e, t),\n        _get_restricted_token = Module._get_restricted_token = () => (_get_restricted_token = Module._get_restricted_token = wasmExports.get_restricted_token)(),\n        _pg_malloc = Module._pg_malloc = e => (_pg_malloc = Module._pg_malloc = wasmExports.pg_malloc)(e),\n        _pg_realloc = Module._pg_realloc = (e, t) => (_pg_realloc = Module._pg_realloc = wasmExports.pg_realloc)(e, t),\n        _pg_strdup = Module._pg_strdup = e => (_pg_strdup = Module._pg_strdup = wasmExports.pg_strdup)(e),\n        _simple_prompt = Module._simple_prompt = (e, t) => (_simple_prompt = Module._simple_prompt = wasmExports.simple_prompt)(e, t),\n        _interactive_file = Module._interactive_file = () => (_interactive_file = Module._interactive_file = wasmExports.interactive_file)(),\n        _interactive_one = Module._interactive_one = () => (_interactive_one = Module._interactive_one = wasmExports.interactive_one)(),\n        _pg_shutdown = Module._pg_shutdown = () => (_pg_shutdown = Module._pg_shutdown = wasmExports.pg_shutdown)(),\n        _interactive_write = Module._interactive_write = e => (_interactive_write = Module._interactive_write = wasmExports.interactive_write)(e),\n        _interactive_read = Module._interactive_read = () => (_interactive_read = Module._interactive_read = wasmExports.interactive_read)(),\n        _visibilitymap_pin = Module._visibilitymap_pin = (e, t, r) => (_visibilitymap_pin = Module._visibilitymap_pin = wasmExports.visibilitymap_pin)(e, t, r),\n        _HeapTupleSatisfiesVacuum = Module._HeapTupleSatisfiesVacuum = (e, t, r) => (_HeapTupleSatisfiesVacuum = Module._HeapTupleSatisfiesVacuum = wasmExports.HeapTupleSatisfiesVacuum)(e, t, r),\n        _visibilitymap_clear = Module._visibilitymap_clear = (e, t, r, a) => (_visibilitymap_clear = Module._visibilitymap_clear = wasmExports.visibilitymap_clear)(e, t, r, a),\n        _vac_estimate_reltuples = Module._vac_estimate_reltuples = (e, t, r, a) => (_vac_estimate_reltuples = Module._vac_estimate_reltuples = wasmExports.vac_estimate_reltuples)(e, t, r, a),\n        _heap_tuple_needs_eventual_freeze = Module._heap_tuple_needs_eventual_freeze = e => (_heap_tuple_needs_eventual_freeze = Module._heap_tuple_needs_eventual_freeze = wasmExports.heap_tuple_needs_eventual_freeze)(e),\n        _HeapTupleSatisfiesUpdate = Module._HeapTupleSatisfiesUpdate = (e, t, r) => (_HeapTupleSatisfiesUpdate = Module._HeapTupleSatisfiesUpdate = wasmExports.HeapTupleSatisfiesUpdate)(e, t, r),\n        _HeapTupleGetUpdateXid = Module._HeapTupleGetUpdateXid = e => (_HeapTupleGetUpdateXid = Module._HeapTupleGetUpdateXid = wasmExports.HeapTupleGetUpdateXid)(e),\n        _HeapTupleSatisfiesVisibility = Module._HeapTupleSatisfiesVisibility = (e, t, r) => (_HeapTupleSatisfiesVisibility = Module._HeapTupleSatisfiesVisibility = wasmExports.HeapTupleSatisfiesVisibility)(e, t, r),\n        _GetMultiXactIdMembers = Module._GetMultiXactIdMembers = (e, t, r, a) => (_GetMultiXactIdMembers = Module._GetMultiXactIdMembers = wasmExports.GetMultiXactIdMembers)(e, t, r, a),\n        _XLogRecGetBlockTagExtended = Module._XLogRecGetBlockTagExtended = (e, t, r, a, o, s) => (_XLogRecGetBlockTagExtended = Module._XLogRecGetBlockTagExtended = wasmExports.XLogRecGetBlockTagExtended)(e, t, r, a, o, s),\n        _toast_open_indexes = Module._toast_open_indexes = (e, t, r, a) => (_toast_open_indexes = Module._toast_open_indexes = wasmExports.toast_open_indexes)(e, t, r, a),\n        _init_toast_snapshot = Module._init_toast_snapshot = e => (_init_toast_snapshot = Module._init_toast_snapshot = wasmExports.init_toast_snapshot)(e),\n        _toast_close_indexes = Module._toast_close_indexes = (e, t, r) => (_toast_close_indexes = Module._toast_close_indexes = wasmExports.toast_close_indexes)(e, t, r),\n        _index_getprocinfo = Module._index_getprocinfo = (e, t, r) => (_index_getprocinfo = Module._index_getprocinfo = wasmExports.index_getprocinfo)(e, t, r),\n        _identify_opfamily_groups = Module._identify_opfamily_groups = (e, t) => (_identify_opfamily_groups = Module._identify_opfamily_groups = wasmExports.identify_opfamily_groups)(e, t),\n        _check_amproc_signature = Module._check_amproc_signature = (e, t, r, a, o, s) => (_check_amproc_signature = Module._check_amproc_signature = wasmExports.check_amproc_signature)(e, t, r, a, o, s),\n        _check_amoptsproc_signature = Module._check_amoptsproc_signature = e => (_check_amoptsproc_signature = Module._check_amoptsproc_signature = wasmExports.check_amoptsproc_signature)(e),\n        _check_amop_signature = Module._check_amop_signature = (e, t, r, a) => (_check_amop_signature = Module._check_amop_signature = wasmExports.check_amop_signature)(e, t, r, a),\n        _RelationGetIndexScan = Module._RelationGetIndexScan = (e, t, r) => (_RelationGetIndexScan = Module._RelationGetIndexScan = wasmExports.RelationGetIndexScan)(e, t, r),\n        __hash_get_indextuple_hashkey = Module.__hash_get_indextuple_hashkey = e => (__hash_get_indextuple_hashkey = Module.__hash_get_indextuple_hashkey = wasmExports._hash_get_indextuple_hashkey)(e),\n        __hash_getbuf = Module.__hash_getbuf = (e, t, r, a) => (__hash_getbuf = Module.__hash_getbuf = wasmExports._hash_getbuf)(e, t, r, a),\n        __hash_relbuf = Module.__hash_relbuf = (e, t) => (__hash_relbuf = Module.__hash_relbuf = wasmExports._hash_relbuf)(e, t),\n        __hash_getbuf_with_strategy = Module.__hash_getbuf_with_strategy = (e, t, r, a, o) => (__hash_getbuf_with_strategy = Module.__hash_getbuf_with_strategy = wasmExports._hash_getbuf_with_strategy)(e, t, r, a, o),\n        _build_reloptions = Module._build_reloptions = (e, t, r, a, o, s) => (_build_reloptions = Module._build_reloptions = wasmExports.build_reloptions)(e, t, r, a, o, s),\n        _index_form_tuple = Module._index_form_tuple = (e, t, r) => (_index_form_tuple = Module._index_form_tuple = wasmExports.index_form_tuple)(e, t, r),\n        __hash_ovflblkno_to_bitno = Module.__hash_ovflblkno_to_bitno = (e, t) => (__hash_ovflblkno_to_bitno = Module.__hash_ovflblkno_to_bitno = wasmExports._hash_ovflblkno_to_bitno)(e, t),\n        _brin_build_desc = Module._brin_build_desc = e => (_brin_build_desc = Module._brin_build_desc = wasmExports.brin_build_desc)(e),\n        _brin_deform_tuple = Module._brin_deform_tuple = (e, t, r) => (_brin_deform_tuple = Module._brin_deform_tuple = wasmExports.brin_deform_tuple)(e, t, r),\n        _brin_free_desc = Module._brin_free_desc = e => (_brin_free_desc = Module._brin_free_desc = wasmExports.brin_free_desc)(e),\n        _XLogRecGetBlockRefInfo = Module._XLogRecGetBlockRefInfo = (e, t, r, a, o) => (_XLogRecGetBlockRefInfo = Module._XLogRecGetBlockRefInfo = wasmExports.XLogRecGetBlockRefInfo)(e, t, r, a, o),\n        _ginPostingListDecode = Module._ginPostingListDecode = (e, t) => (_ginPostingListDecode = Module._ginPostingListDecode = wasmExports.ginPostingListDecode)(e, t),\n        _add_reloption_kind = Module._add_reloption_kind = () => (_add_reloption_kind = Module._add_reloption_kind = wasmExports.add_reloption_kind)(),\n        _register_reloptions_validator = Module._register_reloptions_validator = (e, t) => (_register_reloptions_validator = Module._register_reloptions_validator = wasmExports.register_reloptions_validator)(e, t),\n        _add_int_reloption = Module._add_int_reloption = (e, t, r, a, o, s, l) => (_add_int_reloption = Module._add_int_reloption = wasmExports.add_int_reloption)(e, t, r, a, o, s, l),\n        _XLogFindNextRecord = Module._XLogFindNextRecord = (e, t) => (_XLogFindNextRecord = Module._XLogFindNextRecord = wasmExports.XLogFindNextRecord)(e, t),\n        _RestoreBlockImage = Module._RestoreBlockImage = (e, t, r) => (_RestoreBlockImage = Module._RestoreBlockImage = wasmExports.RestoreBlockImage)(e, t, r),\n        _GenericXLogStart = Module._GenericXLogStart = e => (_GenericXLogStart = Module._GenericXLogStart = wasmExports.GenericXLogStart)(e),\n        _GenericXLogRegisterBuffer = Module._GenericXLogRegisterBuffer = (e, t, r) => (_GenericXLogRegisterBuffer = Module._GenericXLogRegisterBuffer = wasmExports.GenericXLogRegisterBuffer)(e, t, r),\n        _GenericXLogFinish = Module._GenericXLogFinish = e => (_GenericXLogFinish = Module._GenericXLogFinish = wasmExports.GenericXLogFinish)(e),\n        _GenericXLogAbort = Module._GenericXLogAbort = e => (_GenericXLogAbort = Module._GenericXLogAbort = wasmExports.GenericXLogAbort)(e),\n        _read_local_xlog_page_no_wait = Module._read_local_xlog_page_no_wait = (e, t, r, a, o) => (_read_local_xlog_page_no_wait = Module._read_local_xlog_page_no_wait = wasmExports.read_local_xlog_page_no_wait)(e, t, r, a, o),\n        _XLogRecStoreStats = Module._XLogRecStoreStats = (e, t) => (_XLogRecStoreStats = Module._XLogRecStoreStats = wasmExports.XLogRecStoreStats)(e, t),\n        _ReadMultiXactIdRange = Module._ReadMultiXactIdRange = (e, t) => (_ReadMultiXactIdRange = Module._ReadMultiXactIdRange = wasmExports.ReadMultiXactIdRange)(e, t),\n        _MultiXactIdPrecedesOrEquals = Module._MultiXactIdPrecedesOrEquals = (e, t) => (_MultiXactIdPrecedesOrEquals = Module._MultiXactIdPrecedesOrEquals = wasmExports.MultiXactIdPrecedesOrEquals)(e, t),\n        _RegisterXactCallback = Module._RegisterXactCallback = (e, t) => (_RegisterXactCallback = Module._RegisterXactCallback = wasmExports.RegisterXactCallback)(e, t),\n        _RegisterSubXactCallback = Module._RegisterSubXactCallback = (e, t) => (_RegisterSubXactCallback = Module._RegisterSubXactCallback = wasmExports.RegisterSubXactCallback)(e, t),\n        _ReleaseCurrentSubTransaction = Module._ReleaseCurrentSubTransaction = () => (_ReleaseCurrentSubTransaction = Module._ReleaseCurrentSubTransaction = wasmExports.ReleaseCurrentSubTransaction)(),\n        _WaitForParallelWorkersToAttach = Module._WaitForParallelWorkersToAttach = e => (_WaitForParallelWorkersToAttach = Module._WaitForParallelWorkersToAttach = wasmExports.WaitForParallelWorkersToAttach)(e),\n        __bt_allequalimage = Module.__bt_allequalimage = (e, t) => (__bt_allequalimage = Module.__bt_allequalimage = wasmExports._bt_allequalimage)(e, t),\n        __bt_checkpage = Module.__bt_checkpage = (e, t) => (__bt_checkpage = Module.__bt_checkpage = wasmExports._bt_checkpage)(e, t),\n        __bt_relbuf = Module.__bt_relbuf = (e, t) => (__bt_relbuf = Module.__bt_relbuf = wasmExports._bt_relbuf)(e, t),\n        __bt_metaversion = Module.__bt_metaversion = (e, t, r) => (__bt_metaversion = Module.__bt_metaversion = wasmExports._bt_metaversion)(e, t, r),\n        __bt_search = Module.__bt_search = (e, t, r, a, o, s) => (__bt_search = Module.__bt_search = wasmExports._bt_search)(e, t, r, a, o, s),\n        __bt_compare = Module.__bt_compare = (e, t, r, a) => (__bt_compare = Module.__bt_compare = wasmExports._bt_compare)(e, t, r, a),\n        __bt_binsrch_insert = Module.__bt_binsrch_insert = (e, t) => (__bt_binsrch_insert = Module.__bt_binsrch_insert = wasmExports._bt_binsrch_insert)(e, t),\n        __bt_freestack = Module.__bt_freestack = e => (__bt_freestack = Module.__bt_freestack = wasmExports._bt_freestack)(e),\n        __bt_form_posting = Module.__bt_form_posting = (e, t, r) => (__bt_form_posting = Module.__bt_form_posting = wasmExports._bt_form_posting)(e, t, r),\n        __bt_check_natts = Module.__bt_check_natts = (e, t, r, a) => (__bt_check_natts = Module.__bt_check_natts = wasmExports._bt_check_natts)(e, t, r, a),\n        _gistcheckpage = Module._gistcheckpage = (e, t) => (_gistcheckpage = Module._gistcheckpage = wasmExports.gistcheckpage)(e, t),\n        _EndCopyFrom = Module._EndCopyFrom = e => (_EndCopyFrom = Module._EndCopyFrom = wasmExports.EndCopyFrom)(e),\n        _ProcessCopyOptions = Module._ProcessCopyOptions = (e, t, r, a) => (_ProcessCopyOptions = Module._ProcessCopyOptions = wasmExports.ProcessCopyOptions)(e, t, r, a),\n        _CopyFromErrorCallback = Module._CopyFromErrorCallback = e => (_CopyFromErrorCallback = Module._CopyFromErrorCallback = wasmExports.CopyFromErrorCallback)(e),\n        _NextCopyFrom = Module._NextCopyFrom = (e, t, r, a) => (_NextCopyFrom = Module._NextCopyFrom = wasmExports.NextCopyFrom)(e, t, r, a),\n        _nextval = Module._nextval = e => (_nextval = Module._nextval = wasmExports.nextval)(e),\n        _defGetStreamingMode = Module._defGetStreamingMode = e => (_defGetStreamingMode = Module._defGetStreamingMode = wasmExports.defGetStreamingMode)(e),\n        _ExplainBeginOutput = Module._ExplainBeginOutput = e => (_ExplainBeginOutput = Module._ExplainBeginOutput = wasmExports.ExplainBeginOutput)(e),\n        _NewExplainState = Module._NewExplainState = () => (_NewExplainState = Module._NewExplainState = wasmExports.NewExplainState)(),\n        _ExplainEndOutput = Module._ExplainEndOutput = e => (_ExplainEndOutput = Module._ExplainEndOutput = wasmExports.ExplainEndOutput)(e),\n        _ExplainPrintPlan = Module._ExplainPrintPlan = (e, t) => (_ExplainPrintPlan = Module._ExplainPrintPlan = wasmExports.ExplainPrintPlan)(e, t),\n        _ExplainPrintTriggers = Module._ExplainPrintTriggers = (e, t) => (_ExplainPrintTriggers = Module._ExplainPrintTriggers = wasmExports.ExplainPrintTriggers)(e, t),\n        _ExplainPrintJITSummary = Module._ExplainPrintJITSummary = (e, t) => (_ExplainPrintJITSummary = Module._ExplainPrintJITSummary = wasmExports.ExplainPrintJITSummary)(e, t),\n        _ExplainPropertyInteger = Module._ExplainPropertyInteger = (e, t, r, a) => (_ExplainPropertyInteger = Module._ExplainPropertyInteger = wasmExports.ExplainPropertyInteger)(e, t, r, a),\n        _ExplainQueryText = Module._ExplainQueryText = (e, t) => (_ExplainQueryText = Module._ExplainQueryText = wasmExports.ExplainQueryText)(e, t),\n        _ExplainPropertyText = Module._ExplainPropertyText = (e, t, r) => (_ExplainPropertyText = Module._ExplainPropertyText = wasmExports.ExplainPropertyText)(e, t, r),\n        _ExplainQueryParameters = Module._ExplainQueryParameters = (e, t, r) => (_ExplainQueryParameters = Module._ExplainQueryParameters = wasmExports.ExplainQueryParameters)(e, t, r),\n        _pg_is_ascii = Module._pg_is_ascii = e => (_pg_is_ascii = Module._pg_is_ascii = wasmExports.pg_is_ascii)(e),\n        _fputs = Module._fputs = (e, t) => (_fputs = Module._fputs = wasmExports.fputs)(e, t),\n        _popen = Module._popen = (e, t) => (_popen = Module._popen = wasmExports.popen)(e, t),\n        _float_to_shortest_decimal_bufn = Module._float_to_shortest_decimal_bufn = (e, t) => (_float_to_shortest_decimal_bufn = Module._float_to_shortest_decimal_bufn = wasmExports.float_to_shortest_decimal_bufn)(e, t),\n        _pg_prng_uint64 = Module._pg_prng_uint64 = e => (_pg_prng_uint64 = Module._pg_prng_uint64 = wasmExports.pg_prng_uint64)(e),\n        _scram_ClientKey = Module._scram_ClientKey = (e, t, r, a, o) => (_scram_ClientKey = Module._scram_ClientKey = wasmExports.scram_ClientKey)(e, t, r, a, o),\n        _pg_encoding_dsplen = Module._pg_encoding_dsplen = (e, t) => (_pg_encoding_dsplen = Module._pg_encoding_dsplen = wasmExports.pg_encoding_dsplen)(e, t),\n        _getcwd = Module._getcwd = (e, t) => (_getcwd = Module._getcwd = wasmExports.getcwd)(e, t),\n        _pg_get_user_home_dir = Module._pg_get_user_home_dir = (e, t, r) => (_pg_get_user_home_dir = Module._pg_get_user_home_dir = wasmExports.pg_get_user_home_dir)(e, t, r),\n        _nanosleep = Module._nanosleep = (e, t) => (_nanosleep = Module._nanosleep = wasmExports.nanosleep)(e, t),\n        _snprintf = Module._snprintf = (e, t, r, a) => (_snprintf = Module._snprintf = wasmExports.snprintf)(e, t, r, a),\n        _pg_strerror_r = Module._pg_strerror_r = (e, t, r) => (_pg_strerror_r = Module._pg_strerror_r = wasmExports.pg_strerror_r)(e, t, r),\n        _pthread_mutex_lock = Module._pthread_mutex_lock = e => (_pthread_mutex_lock = Module._pthread_mutex_lock = wasmExports.pthread_mutex_lock)(e),\n        _pthread_mutex_unlock = Module._pthread_mutex_unlock = e => (_pthread_mutex_unlock = Module._pthread_mutex_unlock = wasmExports.pthread_mutex_unlock)(e),\n        _strncat = Module._strncat = (e, t, r) => (_strncat = Module._strncat = wasmExports.strncat)(e, t, r),\n        _PQexec = Module._PQexec = (e, t) => (_PQexec = Module._PQexec = wasmExports.PQexec)(e, t),\n        _PQsetSingleRowMode = Module._PQsetSingleRowMode = e => (_PQsetSingleRowMode = Module._PQsetSingleRowMode = wasmExports.PQsetSingleRowMode)(e),\n        _PQcmdStatus = Module._PQcmdStatus = e => (_PQcmdStatus = Module._PQcmdStatus = wasmExports.PQcmdStatus)(e),\n        _pthread_sigmask = Module._pthread_sigmask = (e, t, r) => (_pthread_sigmask = Module._pthread_sigmask = wasmExports.pthread_sigmask)(e, t, r),\n        _sigismember = Module._sigismember = (e, t) => (_sigismember = Module._sigismember = wasmExports.sigismember)(e, t),\n        _sigpending = Module._sigpending = e => (_sigpending = Module._sigpending = wasmExports.sigpending)(e),\n        _sigwait = Module._sigwait = (e, t) => (_sigwait = Module._sigwait = wasmExports.sigwait)(e, t),\n        _isolat1ToUTF8 = Module._isolat1ToUTF8 = (e, t, r, a) => (_isolat1ToUTF8 = Module._isolat1ToUTF8 = wasmExports.isolat1ToUTF8)(e, t, r, a),\n        _UTF8Toisolat1 = Module._UTF8Toisolat1 = (e, t, r, a) => (_UTF8Toisolat1 = Module._UTF8Toisolat1 = wasmExports.UTF8Toisolat1)(e, t, r, a),\n        _vfprintf = Module._vfprintf = (e, t, r) => (_vfprintf = Module._vfprintf = wasmExports.vfprintf)(e, t, r),\n        _vsnprintf = Module._vsnprintf = (e, t, r, a) => (_vsnprintf = Module._vsnprintf = wasmExports.vsnprintf)(e, t, r, a),\n        _xmlParserValidityWarning = Module._xmlParserValidityWarning = (e, t, r) => (_xmlParserValidityWarning = Module._xmlParserValidityWarning = wasmExports.xmlParserValidityWarning)(e, t, r),\n        _xmlParserValidityError = Module._xmlParserValidityError = (e, t, r) => (_xmlParserValidityError = Module._xmlParserValidityError = wasmExports.xmlParserValidityError)(e, t, r),\n        _xmlParserError = Module._xmlParserError = (e, t, r) => (_xmlParserError = Module._xmlParserError = wasmExports.xmlParserError)(e, t, r),\n        _xmlParserWarning = Module._xmlParserWarning = (e, t, r) => (_xmlParserWarning = Module._xmlParserWarning = wasmExports.xmlParserWarning)(e, t, r),\n        _fprintf = Module._fprintf = (e, t, r) => (_fprintf = Module._fprintf = wasmExports.fprintf)(e, t, r),\n        ___xmlParserInputBufferCreateFilename = Module.___xmlParserInputBufferCreateFilename = (e, t) => (___xmlParserInputBufferCreateFilename = Module.___xmlParserInputBufferCreateFilename = wasmExports.__xmlParserInputBufferCreateFilename)(e, t),\n        ___xmlOutputBufferCreateFilename = Module.___xmlOutputBufferCreateFilename = (e, t, r) => (___xmlOutputBufferCreateFilename = Module.___xmlOutputBufferCreateFilename = wasmExports.__xmlOutputBufferCreateFilename)(e, t, r),\n        _xmlSAX2InternalSubset = Module._xmlSAX2InternalSubset = (e, t, r, a) => (_xmlSAX2InternalSubset = Module._xmlSAX2InternalSubset = wasmExports.xmlSAX2InternalSubset)(e, t, r, a),\n        _xmlSAX2IsStandalone = Module._xmlSAX2IsStandalone = e => (_xmlSAX2IsStandalone = Module._xmlSAX2IsStandalone = wasmExports.xmlSAX2IsStandalone)(e),\n        _xmlSAX2HasInternalSubset = Module._xmlSAX2HasInternalSubset = e => (_xmlSAX2HasInternalSubset = Module._xmlSAX2HasInternalSubset = wasmExports.xmlSAX2HasInternalSubset)(e),\n        _xmlSAX2HasExternalSubset = Module._xmlSAX2HasExternalSubset = e => (_xmlSAX2HasExternalSubset = Module._xmlSAX2HasExternalSubset = wasmExports.xmlSAX2HasExternalSubset)(e),\n        _xmlSAX2ResolveEntity = Module._xmlSAX2ResolveEntity = (e, t, r) => (_xmlSAX2ResolveEntity = Module._xmlSAX2ResolveEntity = wasmExports.xmlSAX2ResolveEntity)(e, t, r),\n        _xmlSAX2GetEntity = Module._xmlSAX2GetEntity = (e, t) => (_xmlSAX2GetEntity = Module._xmlSAX2GetEntity = wasmExports.xmlSAX2GetEntity)(e, t),\n        _xmlSAX2EntityDecl = Module._xmlSAX2EntityDecl = (e, t, r, a, o, s) => (_xmlSAX2EntityDecl = Module._xmlSAX2EntityDecl = wasmExports.xmlSAX2EntityDecl)(e, t, r, a, o, s),\n        _xmlSAX2NotationDecl = Module._xmlSAX2NotationDecl = (e, t, r, a) => (_xmlSAX2NotationDecl = Module._xmlSAX2NotationDecl = wasmExports.xmlSAX2NotationDecl)(e, t, r, a),\n        _xmlSAX2AttributeDecl = Module._xmlSAX2AttributeDecl = (e, t, r, a, o, s, l) => (_xmlSAX2AttributeDecl = Module._xmlSAX2AttributeDecl = wasmExports.xmlSAX2AttributeDecl)(e, t, r, a, o, s, l),\n        _xmlSAX2ElementDecl = Module._xmlSAX2ElementDecl = (e, t, r, a) => (_xmlSAX2ElementDecl = Module._xmlSAX2ElementDecl = wasmExports.xmlSAX2ElementDecl)(e, t, r, a),\n        _xmlSAX2UnparsedEntityDecl = Module._xmlSAX2UnparsedEntityDecl = (e, t, r, a, o) => (_xmlSAX2UnparsedEntityDecl = Module._xmlSAX2UnparsedEntityDecl = wasmExports.xmlSAX2UnparsedEntityDecl)(e, t, r, a, o),\n        _xmlSAX2SetDocumentLocator = Module._xmlSAX2SetDocumentLocator = (e, t) => (_xmlSAX2SetDocumentLocator = Module._xmlSAX2SetDocumentLocator = wasmExports.xmlSAX2SetDocumentLocator)(e, t),\n        _xmlSAX2StartDocument = Module._xmlSAX2StartDocument = e => (_xmlSAX2StartDocument = Module._xmlSAX2StartDocument = wasmExports.xmlSAX2StartDocument)(e),\n        _xmlSAX2EndDocument = Module._xmlSAX2EndDocument = e => (_xmlSAX2EndDocument = Module._xmlSAX2EndDocument = wasmExports.xmlSAX2EndDocument)(e),\n        _xmlSAX2StartElement = Module._xmlSAX2StartElement = (e, t, r) => (_xmlSAX2StartElement = Module._xmlSAX2StartElement = wasmExports.xmlSAX2StartElement)(e, t, r),\n        _xmlSAX2EndElement = Module._xmlSAX2EndElement = (e, t) => (_xmlSAX2EndElement = Module._xmlSAX2EndElement = wasmExports.xmlSAX2EndElement)(e, t),\n        _xmlSAX2Reference = Module._xmlSAX2Reference = (e, t) => (_xmlSAX2Reference = Module._xmlSAX2Reference = wasmExports.xmlSAX2Reference)(e, t),\n        _xmlSAX2Characters = Module._xmlSAX2Characters = (e, t, r) => (_xmlSAX2Characters = Module._xmlSAX2Characters = wasmExports.xmlSAX2Characters)(e, t, r),\n        _xmlSAX2ProcessingInstruction = Module._xmlSAX2ProcessingInstruction = (e, t, r) => (_xmlSAX2ProcessingInstruction = Module._xmlSAX2ProcessingInstruction = wasmExports.xmlSAX2ProcessingInstruction)(e, t, r),\n        _xmlSAX2Comment = Module._xmlSAX2Comment = (e, t) => (_xmlSAX2Comment = Module._xmlSAX2Comment = wasmExports.xmlSAX2Comment)(e, t),\n        _xmlSAX2GetParameterEntity = Module._xmlSAX2GetParameterEntity = (e, t) => (_xmlSAX2GetParameterEntity = Module._xmlSAX2GetParameterEntity = wasmExports.xmlSAX2GetParameterEntity)(e, t),\n        _xmlSAX2CDataBlock = Module._xmlSAX2CDataBlock = (e, t, r) => (_xmlSAX2CDataBlock = Module._xmlSAX2CDataBlock = wasmExports.xmlSAX2CDataBlock)(e, t, r),\n        _xmlSAX2ExternalSubset = Module._xmlSAX2ExternalSubset = (e, t, r, a) => (_xmlSAX2ExternalSubset = Module._xmlSAX2ExternalSubset = wasmExports.xmlSAX2ExternalSubset)(e, t, r, a),\n        _xmlSAX2GetPublicId = Module._xmlSAX2GetPublicId = e => (_xmlSAX2GetPublicId = Module._xmlSAX2GetPublicId = wasmExports.xmlSAX2GetPublicId)(e),\n        _xmlSAX2GetSystemId = Module._xmlSAX2GetSystemId = e => (_xmlSAX2GetSystemId = Module._xmlSAX2GetSystemId = wasmExports.xmlSAX2GetSystemId)(e),\n        _xmlSAX2GetLineNumber = Module._xmlSAX2GetLineNumber = e => (_xmlSAX2GetLineNumber = Module._xmlSAX2GetLineNumber = wasmExports.xmlSAX2GetLineNumber)(e),\n        _xmlSAX2GetColumnNumber = Module._xmlSAX2GetColumnNumber = e => (_xmlSAX2GetColumnNumber = Module._xmlSAX2GetColumnNumber = wasmExports.xmlSAX2GetColumnNumber)(e),\n        _xmlSAX2IgnorableWhitespace = Module._xmlSAX2IgnorableWhitespace = (e, t, r) => (_xmlSAX2IgnorableWhitespace = Module._xmlSAX2IgnorableWhitespace = wasmExports.xmlSAX2IgnorableWhitespace)(e, t, r),\n        _xmlHashDefaultDeallocator = Module._xmlHashDefaultDeallocator = (e, t) => (_xmlHashDefaultDeallocator = Module._xmlHashDefaultDeallocator = wasmExports.xmlHashDefaultDeallocator)(e, t),\n        _iconv_open = Module._iconv_open = (e, t) => (_iconv_open = Module._iconv_open = wasmExports.iconv_open)(e, t),\n        _iconv_close = Module._iconv_close = e => (_iconv_close = Module._iconv_close = wasmExports.iconv_close)(e),\n        _iconv = Module._iconv = (e, t, r, a, o) => (_iconv = Module._iconv = wasmExports.iconv)(e, t, r, a, o),\n        _UTF8ToHtml = Module._UTF8ToHtml = (e, t, r, a) => (_UTF8ToHtml = Module._UTF8ToHtml = wasmExports.UTF8ToHtml)(e, t, r, a),\n        _xmlReadMemory = Module._xmlReadMemory = (e, t, r, a, o) => (_xmlReadMemory = Module._xmlReadMemory = wasmExports.xmlReadMemory)(e, t, r, a, o),\n        _xmlSAX2StartElementNs = Module._xmlSAX2StartElementNs = (e, t, r, a, o, s, l, n, _) => (_xmlSAX2StartElementNs = Module._xmlSAX2StartElementNs = wasmExports.xmlSAX2StartElementNs)(e, t, r, a, o, s, l, n, _),\n        _xmlSAX2EndElementNs = Module._xmlSAX2EndElementNs = (e, t, r, a) => (_xmlSAX2EndElementNs = Module._xmlSAX2EndElementNs = wasmExports.xmlSAX2EndElementNs)(e, t, r, a),\n        ___cxa_atexit = Module.___cxa_atexit = (e, t, r) => (___cxa_atexit = Module.___cxa_atexit = wasmExports.__cxa_atexit)(e, t, r),\n        _xmlDocGetRootElement = Module._xmlDocGetRootElement = e => (_xmlDocGetRootElement = Module._xmlDocGetRootElement = wasmExports.xmlDocGetRootElement)(e),\n        _xmlFileMatch = Module._xmlFileMatch = e => (_xmlFileMatch = Module._xmlFileMatch = wasmExports.xmlFileMatch)(e),\n        _xmlFileOpen = Module._xmlFileOpen = e => (_xmlFileOpen = Module._xmlFileOpen = wasmExports.xmlFileOpen)(e),\n        _xmlFileRead = Module._xmlFileRead = (e, t, r) => (_xmlFileRead = Module._xmlFileRead = wasmExports.xmlFileRead)(e, t, r),\n        _xmlFileClose = Module._xmlFileClose = e => (_xmlFileClose = Module._xmlFileClose = wasmExports.xmlFileClose)(e),\n        _gzread = Module._gzread = (e, t, r) => (_gzread = Module._gzread = wasmExports.gzread)(e, t, r),\n        _gzclose = Module._gzclose = e => (_gzclose = Module._gzclose = wasmExports.gzclose)(e),\n        _gzdirect = Module._gzdirect = e => (_gzdirect = Module._gzdirect = wasmExports.gzdirect)(e),\n        _gzdopen = Module._gzdopen = (e, t) => (_gzdopen = Module._gzdopen = wasmExports.gzdopen)(e, t),\n        _gzopen = Module._gzopen = (e, t) => (_gzopen = Module._gzopen = wasmExports.gzopen)(e, t),\n        _gzwrite = Module._gzwrite = (e, t, r) => (_gzwrite = Module._gzwrite = wasmExports.gzwrite)(e, t, r),\n        _xmlUCSIsCatNd = Module._xmlUCSIsCatNd = e => (_xmlUCSIsCatNd = Module._xmlUCSIsCatNd = wasmExports.xmlUCSIsCatNd)(e),\n        _xmlUCSIsCatP = Module._xmlUCSIsCatP = e => (_xmlUCSIsCatP = Module._xmlUCSIsCatP = wasmExports.xmlUCSIsCatP)(e),\n        _xmlUCSIsCatZ = Module._xmlUCSIsCatZ = e => (_xmlUCSIsCatZ = Module._xmlUCSIsCatZ = wasmExports.xmlUCSIsCatZ)(e),\n        _xmlUCSIsCatC = Module._xmlUCSIsCatC = e => (_xmlUCSIsCatC = Module._xmlUCSIsCatC = wasmExports.xmlUCSIsCatC)(e),\n        _xmlUCSIsCatL = Module._xmlUCSIsCatL = e => (_xmlUCSIsCatL = Module._xmlUCSIsCatL = wasmExports.xmlUCSIsCatL)(e),\n        _xmlUCSIsCatLu = Module._xmlUCSIsCatLu = e => (_xmlUCSIsCatLu = Module._xmlUCSIsCatLu = wasmExports.xmlUCSIsCatLu)(e),\n        _xmlUCSIsCatLl = Module._xmlUCSIsCatLl = e => (_xmlUCSIsCatLl = Module._xmlUCSIsCatLl = wasmExports.xmlUCSIsCatLl)(e),\n        _xmlUCSIsCatLt = Module._xmlUCSIsCatLt = e => (_xmlUCSIsCatLt = Module._xmlUCSIsCatLt = wasmExports.xmlUCSIsCatLt)(e),\n        _xmlUCSIsCatLm = Module._xmlUCSIsCatLm = e => (_xmlUCSIsCatLm = Module._xmlUCSIsCatLm = wasmExports.xmlUCSIsCatLm)(e),\n        _xmlUCSIsCatLo = Module._xmlUCSIsCatLo = e => (_xmlUCSIsCatLo = Module._xmlUCSIsCatLo = wasmExports.xmlUCSIsCatLo)(e),\n        _xmlUCSIsCatM = Module._xmlUCSIsCatM = e => (_xmlUCSIsCatM = Module._xmlUCSIsCatM = wasmExports.xmlUCSIsCatM)(e),\n        _xmlUCSIsCatMn = Module._xmlUCSIsCatMn = e => (_xmlUCSIsCatMn = Module._xmlUCSIsCatMn = wasmExports.xmlUCSIsCatMn)(e),\n        _xmlUCSIsCatMc = Module._xmlUCSIsCatMc = e => (_xmlUCSIsCatMc = Module._xmlUCSIsCatMc = wasmExports.xmlUCSIsCatMc)(e),\n        _xmlUCSIsCatMe = Module._xmlUCSIsCatMe = e => (_xmlUCSIsCatMe = Module._xmlUCSIsCatMe = wasmExports.xmlUCSIsCatMe)(e),\n        _xmlUCSIsCatN = Module._xmlUCSIsCatN = e => (_xmlUCSIsCatN = Module._xmlUCSIsCatN = wasmExports.xmlUCSIsCatN)(e),\n        _xmlUCSIsCatNl = Module._xmlUCSIsCatNl = e => (_xmlUCSIsCatNl = Module._xmlUCSIsCatNl = wasmExports.xmlUCSIsCatNl)(e),\n        _xmlUCSIsCatNo = Module._xmlUCSIsCatNo = e => (_xmlUCSIsCatNo = Module._xmlUCSIsCatNo = wasmExports.xmlUCSIsCatNo)(e),\n        _xmlUCSIsCatPc = Module._xmlUCSIsCatPc = e => (_xmlUCSIsCatPc = Module._xmlUCSIsCatPc = wasmExports.xmlUCSIsCatPc)(e),\n        _xmlUCSIsCatPd = Module._xmlUCSIsCatPd = e => (_xmlUCSIsCatPd = Module._xmlUCSIsCatPd = wasmExports.xmlUCSIsCatPd)(e),\n        _xmlUCSIsCatPs = Module._xmlUCSIsCatPs = e => (_xmlUCSIsCatPs = Module._xmlUCSIsCatPs = wasmExports.xmlUCSIsCatPs)(e),\n        _xmlUCSIsCatPe = Module._xmlUCSIsCatPe = e => (_xmlUCSIsCatPe = Module._xmlUCSIsCatPe = wasmExports.xmlUCSIsCatPe)(e),\n        _xmlUCSIsCatPi = Module._xmlUCSIsCatPi = e => (_xmlUCSIsCatPi = Module._xmlUCSIsCatPi = wasmExports.xmlUCSIsCatPi)(e),\n        _xmlUCSIsCatPf = Module._xmlUCSIsCatPf = e => (_xmlUCSIsCatPf = Module._xmlUCSIsCatPf = wasmExports.xmlUCSIsCatPf)(e),\n        _xmlUCSIsCatPo = Module._xmlUCSIsCatPo = e => (_xmlUCSIsCatPo = Module._xmlUCSIsCatPo = wasmExports.xmlUCSIsCatPo)(e),\n        _xmlUCSIsCatZs = Module._xmlUCSIsCatZs = e => (_xmlUCSIsCatZs = Module._xmlUCSIsCatZs = wasmExports.xmlUCSIsCatZs)(e),\n        _xmlUCSIsCatZl = Module._xmlUCSIsCatZl = e => (_xmlUCSIsCatZl = Module._xmlUCSIsCatZl = wasmExports.xmlUCSIsCatZl)(e),\n        _xmlUCSIsCatZp = Module._xmlUCSIsCatZp = e => (_xmlUCSIsCatZp = Module._xmlUCSIsCatZp = wasmExports.xmlUCSIsCatZp)(e),\n        _xmlUCSIsCatS = Module._xmlUCSIsCatS = e => (_xmlUCSIsCatS = Module._xmlUCSIsCatS = wasmExports.xmlUCSIsCatS)(e),\n        _xmlUCSIsCatSm = Module._xmlUCSIsCatSm = e => (_xmlUCSIsCatSm = Module._xmlUCSIsCatSm = wasmExports.xmlUCSIsCatSm)(e),\n        _xmlUCSIsCatSc = Module._xmlUCSIsCatSc = e => (_xmlUCSIsCatSc = Module._xmlUCSIsCatSc = wasmExports.xmlUCSIsCatSc)(e),\n        _xmlUCSIsCatSk = Module._xmlUCSIsCatSk = e => (_xmlUCSIsCatSk = Module._xmlUCSIsCatSk = wasmExports.xmlUCSIsCatSk)(e),\n        _xmlUCSIsCatSo = Module._xmlUCSIsCatSo = e => (_xmlUCSIsCatSo = Module._xmlUCSIsCatSo = wasmExports.xmlUCSIsCatSo)(e),\n        _xmlUCSIsCatCc = Module._xmlUCSIsCatCc = e => (_xmlUCSIsCatCc = Module._xmlUCSIsCatCc = wasmExports.xmlUCSIsCatCc)(e),\n        _xmlUCSIsCatCf = Module._xmlUCSIsCatCf = e => (_xmlUCSIsCatCf = Module._xmlUCSIsCatCf = wasmExports.xmlUCSIsCatCf)(e),\n        _xmlUCSIsCatCo = Module._xmlUCSIsCatCo = e => (_xmlUCSIsCatCo = Module._xmlUCSIsCatCo = wasmExports.xmlUCSIsCatCo)(e),\n        _xmlUCSIsAegeanNumbers = Module._xmlUCSIsAegeanNumbers = e => (_xmlUCSIsAegeanNumbers = Module._xmlUCSIsAegeanNumbers = wasmExports.xmlUCSIsAegeanNumbers)(e),\n        _xmlUCSIsAlphabeticPresentationForms = Module._xmlUCSIsAlphabeticPresentationForms = e => (_xmlUCSIsAlphabeticPresentationForms = Module._xmlUCSIsAlphabeticPresentationForms = wasmExports.xmlUCSIsAlphabeticPresentationForms)(e),\n        _xmlUCSIsArabic = Module._xmlUCSIsArabic = e => (_xmlUCSIsArabic = Module._xmlUCSIsArabic = wasmExports.xmlUCSIsArabic)(e),\n        _xmlUCSIsArabicPresentationFormsA = Module._xmlUCSIsArabicPresentationFormsA = e => (_xmlUCSIsArabicPresentationFormsA = Module._xmlUCSIsArabicPresentationFormsA = wasmExports.xmlUCSIsArabicPresentationFormsA)(e),\n        _xmlUCSIsArabicPresentationFormsB = Module._xmlUCSIsArabicPresentationFormsB = e => (_xmlUCSIsArabicPresentationFormsB = Module._xmlUCSIsArabicPresentationFormsB = wasmExports.xmlUCSIsArabicPresentationFormsB)(e),\n        _xmlUCSIsArmenian = Module._xmlUCSIsArmenian = e => (_xmlUCSIsArmenian = Module._xmlUCSIsArmenian = wasmExports.xmlUCSIsArmenian)(e),\n        _xmlUCSIsArrows = Module._xmlUCSIsArrows = e => (_xmlUCSIsArrows = Module._xmlUCSIsArrows = wasmExports.xmlUCSIsArrows)(e),\n        _xmlUCSIsBasicLatin = Module._xmlUCSIsBasicLatin = e => (_xmlUCSIsBasicLatin = Module._xmlUCSIsBasicLatin = wasmExports.xmlUCSIsBasicLatin)(e),\n        _xmlUCSIsBengali = Module._xmlUCSIsBengali = e => (_xmlUCSIsBengali = Module._xmlUCSIsBengali = wasmExports.xmlUCSIsBengali)(e),\n        _xmlUCSIsBlockElements = Module._xmlUCSIsBlockElements = e => (_xmlUCSIsBlockElements = Module._xmlUCSIsBlockElements = wasmExports.xmlUCSIsBlockElements)(e),\n        _xmlUCSIsBopomofo = Module._xmlUCSIsBopomofo = e => (_xmlUCSIsBopomofo = Module._xmlUCSIsBopomofo = wasmExports.xmlUCSIsBopomofo)(e),\n        _xmlUCSIsBopomofoExtended = Module._xmlUCSIsBopomofoExtended = e => (_xmlUCSIsBopomofoExtended = Module._xmlUCSIsBopomofoExtended = wasmExports.xmlUCSIsBopomofoExtended)(e),\n        _xmlUCSIsBoxDrawing = Module._xmlUCSIsBoxDrawing = e => (_xmlUCSIsBoxDrawing = Module._xmlUCSIsBoxDrawing = wasmExports.xmlUCSIsBoxDrawing)(e),\n        _xmlUCSIsBraillePatterns = Module._xmlUCSIsBraillePatterns = e => (_xmlUCSIsBraillePatterns = Module._xmlUCSIsBraillePatterns = wasmExports.xmlUCSIsBraillePatterns)(e),\n        _xmlUCSIsBuhid = Module._xmlUCSIsBuhid = e => (_xmlUCSIsBuhid = Module._xmlUCSIsBuhid = wasmExports.xmlUCSIsBuhid)(e),\n        _xmlUCSIsByzantineMusicalSymbols = Module._xmlUCSIsByzantineMusicalSymbols = e => (_xmlUCSIsByzantineMusicalSymbols = Module._xmlUCSIsByzantineMusicalSymbols = wasmExports.xmlUCSIsByzantineMusicalSymbols)(e),\n        _xmlUCSIsCJKCompatibility = Module._xmlUCSIsCJKCompatibility = e => (_xmlUCSIsCJKCompatibility = Module._xmlUCSIsCJKCompatibility = wasmExports.xmlUCSIsCJKCompatibility)(e),\n        _xmlUCSIsCJKCompatibilityForms = Module._xmlUCSIsCJKCompatibilityForms = e => (_xmlUCSIsCJKCompatibilityForms = Module._xmlUCSIsCJKCompatibilityForms = wasmExports.xmlUCSIsCJKCompatibilityForms)(e),\n        _xmlUCSIsCJKCompatibilityIdeographs = Module._xmlUCSIsCJKCompatibilityIdeographs = e => (_xmlUCSIsCJKCompatibilityIdeographs = Module._xmlUCSIsCJKCompatibilityIdeographs = wasmExports.xmlUCSIsCJKCompatibilityIdeographs)(e),\n        _xmlUCSIsCJKCompatibilityIdeographsSupplement = Module._xmlUCSIsCJKCompatibilityIdeographsSupplement = e => (_xmlUCSIsCJKCompatibilityIdeographsSupplement = Module._xmlUCSIsCJKCompatibilityIdeographsSupplement = wasmExports.xmlUCSIsCJKCompatibilityIdeographsSupplement)(e),\n        _xmlUCSIsCJKRadicalsSupplement = Module._xmlUCSIsCJKRadicalsSupplement = e => (_xmlUCSIsCJKRadicalsSupplement = Module._xmlUCSIsCJKRadicalsSupplement = wasmExports.xmlUCSIsCJKRadicalsSupplement)(e),\n        _xmlUCSIsCJKSymbolsandPunctuation = Module._xmlUCSIsCJKSymbolsandPunctuation = e => (_xmlUCSIsCJKSymbolsandPunctuation = Module._xmlUCSIsCJKSymbolsandPunctuation = wasmExports.xmlUCSIsCJKSymbolsandPunctuation)(e),\n        _xmlUCSIsCJKUnifiedIdeographs = Module._xmlUCSIsCJKUnifiedIdeographs = e => (_xmlUCSIsCJKUnifiedIdeographs = Module._xmlUCSIsCJKUnifiedIdeographs = wasmExports.xmlUCSIsCJKUnifiedIdeographs)(e),\n        _xmlUCSIsCJKUnifiedIdeographsExtensionA = Module._xmlUCSIsCJKUnifiedIdeographsExtensionA = e => (_xmlUCSIsCJKUnifiedIdeographsExtensionA = Module._xmlUCSIsCJKUnifiedIdeographsExtensionA = wasmExports.xmlUCSIsCJKUnifiedIdeographsExtensionA)(e),\n        _xmlUCSIsCJKUnifiedIdeographsExtensionB = Module._xmlUCSIsCJKUnifiedIdeographsExtensionB = e => (_xmlUCSIsCJKUnifiedIdeographsExtensionB = Module._xmlUCSIsCJKUnifiedIdeographsExtensionB = wasmExports.xmlUCSIsCJKUnifiedIdeographsExtensionB)(e),\n        _xmlUCSIsCherokee = Module._xmlUCSIsCherokee = e => (_xmlUCSIsCherokee = Module._xmlUCSIsCherokee = wasmExports.xmlUCSIsCherokee)(e),\n        _xmlUCSIsCombiningDiacriticalMarks = Module._xmlUCSIsCombiningDiacriticalMarks = e => (_xmlUCSIsCombiningDiacriticalMarks = Module._xmlUCSIsCombiningDiacriticalMarks = wasmExports.xmlUCSIsCombiningDiacriticalMarks)(e),\n        _xmlUCSIsCombiningDiacriticalMarksforSymbols = Module._xmlUCSIsCombiningDiacriticalMarksforSymbols = e => (_xmlUCSIsCombiningDiacriticalMarksforSymbols = Module._xmlUCSIsCombiningDiacriticalMarksforSymbols = wasmExports.xmlUCSIsCombiningDiacriticalMarksforSymbols)(e),\n        _xmlUCSIsCombiningHalfMarks = Module._xmlUCSIsCombiningHalfMarks = e => (_xmlUCSIsCombiningHalfMarks = Module._xmlUCSIsCombiningHalfMarks = wasmExports.xmlUCSIsCombiningHalfMarks)(e),\n        _xmlUCSIsCombiningMarksforSymbols = Module._xmlUCSIsCombiningMarksforSymbols = e => (_xmlUCSIsCombiningMarksforSymbols = Module._xmlUCSIsCombiningMarksforSymbols = wasmExports.xmlUCSIsCombiningMarksforSymbols)(e),\n        _xmlUCSIsControlPictures = Module._xmlUCSIsControlPictures = e => (_xmlUCSIsControlPictures = Module._xmlUCSIsControlPictures = wasmExports.xmlUCSIsControlPictures)(e),\n        _xmlUCSIsCurrencySymbols = Module._xmlUCSIsCurrencySymbols = e => (_xmlUCSIsCurrencySymbols = Module._xmlUCSIsCurrencySymbols = wasmExports.xmlUCSIsCurrencySymbols)(e),\n        _xmlUCSIsCypriotSyllabary = Module._xmlUCSIsCypriotSyllabary = e => (_xmlUCSIsCypriotSyllabary = Module._xmlUCSIsCypriotSyllabary = wasmExports.xmlUCSIsCypriotSyllabary)(e),\n        _xmlUCSIsCyrillic = Module._xmlUCSIsCyrillic = e => (_xmlUCSIsCyrillic = Module._xmlUCSIsCyrillic = wasmExports.xmlUCSIsCyrillic)(e),\n        _xmlUCSIsCyrillicSupplement = Module._xmlUCSIsCyrillicSupplement = e => (_xmlUCSIsCyrillicSupplement = Module._xmlUCSIsCyrillicSupplement = wasmExports.xmlUCSIsCyrillicSupplement)(e),\n        _xmlUCSIsDeseret = Module._xmlUCSIsDeseret = e => (_xmlUCSIsDeseret = Module._xmlUCSIsDeseret = wasmExports.xmlUCSIsDeseret)(e),\n        _xmlUCSIsDevanagari = Module._xmlUCSIsDevanagari = e => (_xmlUCSIsDevanagari = Module._xmlUCSIsDevanagari = wasmExports.xmlUCSIsDevanagari)(e),\n        _xmlUCSIsDingbats = Module._xmlUCSIsDingbats = e => (_xmlUCSIsDingbats = Module._xmlUCSIsDingbats = wasmExports.xmlUCSIsDingbats)(e),\n        _xmlUCSIsEnclosedAlphanumerics = Module._xmlUCSIsEnclosedAlphanumerics = e => (_xmlUCSIsEnclosedAlphanumerics = Module._xmlUCSIsEnclosedAlphanumerics = wasmExports.xmlUCSIsEnclosedAlphanumerics)(e),\n        _xmlUCSIsEnclosedCJKLettersandMonths = Module._xmlUCSIsEnclosedCJKLettersandMonths = e => (_xmlUCSIsEnclosedCJKLettersandMonths = Module._xmlUCSIsEnclosedCJKLettersandMonths = wasmExports.xmlUCSIsEnclosedCJKLettersandMonths)(e),\n        _xmlUCSIsEthiopic = Module._xmlUCSIsEthiopic = e => (_xmlUCSIsEthiopic = Module._xmlUCSIsEthiopic = wasmExports.xmlUCSIsEthiopic)(e),\n        _xmlUCSIsGeneralPunctuation = Module._xmlUCSIsGeneralPunctuation = e => (_xmlUCSIsGeneralPunctuation = Module._xmlUCSIsGeneralPunctuation = wasmExports.xmlUCSIsGeneralPunctuation)(e),\n        _xmlUCSIsGeometricShapes = Module._xmlUCSIsGeometricShapes = e => (_xmlUCSIsGeometricShapes = Module._xmlUCSIsGeometricShapes = wasmExports.xmlUCSIsGeometricShapes)(e),\n        _xmlUCSIsGeorgian = Module._xmlUCSIsGeorgian = e => (_xmlUCSIsGeorgian = Module._xmlUCSIsGeorgian = wasmExports.xmlUCSIsGeorgian)(e),\n        _xmlUCSIsGothic = Module._xmlUCSIsGothic = e => (_xmlUCSIsGothic = Module._xmlUCSIsGothic = wasmExports.xmlUCSIsGothic)(e),\n        _xmlUCSIsGreek = Module._xmlUCSIsGreek = e => (_xmlUCSIsGreek = Module._xmlUCSIsGreek = wasmExports.xmlUCSIsGreek)(e),\n        _xmlUCSIsGreekExtended = Module._xmlUCSIsGreekExtended = e => (_xmlUCSIsGreekExtended = Module._xmlUCSIsGreekExtended = wasmExports.xmlUCSIsGreekExtended)(e),\n        _xmlUCSIsGreekandCoptic = Module._xmlUCSIsGreekandCoptic = e => (_xmlUCSIsGreekandCoptic = Module._xmlUCSIsGreekandCoptic = wasmExports.xmlUCSIsGreekandCoptic)(e),\n        _xmlUCSIsGujarati = Module._xmlUCSIsGujarati = e => (_xmlUCSIsGujarati = Module._xmlUCSIsGujarati = wasmExports.xmlUCSIsGujarati)(e),\n        _xmlUCSIsGurmukhi = Module._xmlUCSIsGurmukhi = e => (_xmlUCSIsGurmukhi = Module._xmlUCSIsGurmukhi = wasmExports.xmlUCSIsGurmukhi)(e),\n        _xmlUCSIsHalfwidthandFullwidthForms = Module._xmlUCSIsHalfwidthandFullwidthForms = e => (_xmlUCSIsHalfwidthandFullwidthForms = Module._xmlUCSIsHalfwidthandFullwidthForms = wasmExports.xmlUCSIsHalfwidthandFullwidthForms)(e),\n        _xmlUCSIsHangulCompatibilityJamo = Module._xmlUCSIsHangulCompatibilityJamo = e => (_xmlUCSIsHangulCompatibilityJamo = Module._xmlUCSIsHangulCompatibilityJamo = wasmExports.xmlUCSIsHangulCompatibilityJamo)(e),\n        _xmlUCSIsHangulJamo = Module._xmlUCSIsHangulJamo = e => (_xmlUCSIsHangulJamo = Module._xmlUCSIsHangulJamo = wasmExports.xmlUCSIsHangulJamo)(e),\n        _xmlUCSIsHangulSyllables = Module._xmlUCSIsHangulSyllables = e => (_xmlUCSIsHangulSyllables = Module._xmlUCSIsHangulSyllables = wasmExports.xmlUCSIsHangulSyllables)(e),\n        _xmlUCSIsHanunoo = Module._xmlUCSIsHanunoo = e => (_xmlUCSIsHanunoo = Module._xmlUCSIsHanunoo = wasmExports.xmlUCSIsHanunoo)(e),\n        _xmlUCSIsHebrew = Module._xmlUCSIsHebrew = e => (_xmlUCSIsHebrew = Module._xmlUCSIsHebrew = wasmExports.xmlUCSIsHebrew)(e),\n        _xmlUCSIsHighPrivateUseSurrogates = Module._xmlUCSIsHighPrivateUseSurrogates = e => (_xmlUCSIsHighPrivateUseSurrogates = Module._xmlUCSIsHighPrivateUseSurrogates = wasmExports.xmlUCSIsHighPrivateUseSurrogates)(e),\n        _xmlUCSIsHighSurrogates = Module._xmlUCSIsHighSurrogates = e => (_xmlUCSIsHighSurrogates = Module._xmlUCSIsHighSurrogates = wasmExports.xmlUCSIsHighSurrogates)(e),\n        _xmlUCSIsHiragana = Module._xmlUCSIsHiragana = e => (_xmlUCSIsHiragana = Module._xmlUCSIsHiragana = wasmExports.xmlUCSIsHiragana)(e),\n        _xmlUCSIsIPAExtensions = Module._xmlUCSIsIPAExtensions = e => (_xmlUCSIsIPAExtensions = Module._xmlUCSIsIPAExtensions = wasmExports.xmlUCSIsIPAExtensions)(e),\n        _xmlUCSIsIdeographicDescriptionCharacters = Module._xmlUCSIsIdeographicDescriptionCharacters = e => (_xmlUCSIsIdeographicDescriptionCharacters = Module._xmlUCSIsIdeographicDescriptionCharacters = wasmExports.xmlUCSIsIdeographicDescriptionCharacters)(e),\n        _xmlUCSIsKanbun = Module._xmlUCSIsKanbun = e => (_xmlUCSIsKanbun = Module._xmlUCSIsKanbun = wasmExports.xmlUCSIsKanbun)(e),\n        _xmlUCSIsKangxiRadicals = Module._xmlUCSIsKangxiRadicals = e => (_xmlUCSIsKangxiRadicals = Module._xmlUCSIsKangxiRadicals = wasmExports.xmlUCSIsKangxiRadicals)(e),\n        _xmlUCSIsKannada = Module._xmlUCSIsKannada = e => (_xmlUCSIsKannada = Module._xmlUCSIsKannada = wasmExports.xmlUCSIsKannada)(e),\n        _xmlUCSIsKatakana = Module._xmlUCSIsKatakana = e => (_xmlUCSIsKatakana = Module._xmlUCSIsKatakana = wasmExports.xmlUCSIsKatakana)(e),\n        _xmlUCSIsKatakanaPhoneticExtensions = Module._xmlUCSIsKatakanaPhoneticExtensions = e => (_xmlUCSIsKatakanaPhoneticExtensions = Module._xmlUCSIsKatakanaPhoneticExtensions = wasmExports.xmlUCSIsKatakanaPhoneticExtensions)(e),\n        _xmlUCSIsKhmer = Module._xmlUCSIsKhmer = e => (_xmlUCSIsKhmer = Module._xmlUCSIsKhmer = wasmExports.xmlUCSIsKhmer)(e),\n        _xmlUCSIsKhmerSymbols = Module._xmlUCSIsKhmerSymbols = e => (_xmlUCSIsKhmerSymbols = Module._xmlUCSIsKhmerSymbols = wasmExports.xmlUCSIsKhmerSymbols)(e),\n        _xmlUCSIsLao = Module._xmlUCSIsLao = e => (_xmlUCSIsLao = Module._xmlUCSIsLao = wasmExports.xmlUCSIsLao)(e),\n        _xmlUCSIsLatin1Supplement = Module._xmlUCSIsLatin1Supplement = e => (_xmlUCSIsLatin1Supplement = Module._xmlUCSIsLatin1Supplement = wasmExports.xmlUCSIsLatin1Supplement)(e),\n        _xmlUCSIsLatinExtendedA = Module._xmlUCSIsLatinExtendedA = e => (_xmlUCSIsLatinExtendedA = Module._xmlUCSIsLatinExtendedA = wasmExports.xmlUCSIsLatinExtendedA)(e),\n        _xmlUCSIsLatinExtendedB = Module._xmlUCSIsLatinExtendedB = e => (_xmlUCSIsLatinExtendedB = Module._xmlUCSIsLatinExtendedB = wasmExports.xmlUCSIsLatinExtendedB)(e),\n        _xmlUCSIsLatinExtendedAdditional = Module._xmlUCSIsLatinExtendedAdditional = e => (_xmlUCSIsLatinExtendedAdditional = Module._xmlUCSIsLatinExtendedAdditional = wasmExports.xmlUCSIsLatinExtendedAdditional)(e),\n        _xmlUCSIsLetterlikeSymbols = Module._xmlUCSIsLetterlikeSymbols = e => (_xmlUCSIsLetterlikeSymbols = Module._xmlUCSIsLetterlikeSymbols = wasmExports.xmlUCSIsLetterlikeSymbols)(e),\n        _xmlUCSIsLimbu = Module._xmlUCSIsLimbu = e => (_xmlUCSIsLimbu = Module._xmlUCSIsLimbu = wasmExports.xmlUCSIsLimbu)(e),\n        _xmlUCSIsLinearBIdeograms = Module._xmlUCSIsLinearBIdeograms = e => (_xmlUCSIsLinearBIdeograms = Module._xmlUCSIsLinearBIdeograms = wasmExports.xmlUCSIsLinearBIdeograms)(e),\n        _xmlUCSIsLinearBSyllabary = Module._xmlUCSIsLinearBSyllabary = e => (_xmlUCSIsLinearBSyllabary = Module._xmlUCSIsLinearBSyllabary = wasmExports.xmlUCSIsLinearBSyllabary)(e),\n        _xmlUCSIsLowSurrogates = Module._xmlUCSIsLowSurrogates = e => (_xmlUCSIsLowSurrogates = Module._xmlUCSIsLowSurrogates = wasmExports.xmlUCSIsLowSurrogates)(e),\n        _xmlUCSIsMalayalam = Module._xmlUCSIsMalayalam = e => (_xmlUCSIsMalayalam = Module._xmlUCSIsMalayalam = wasmExports.xmlUCSIsMalayalam)(e),\n        _xmlUCSIsMathematicalAlphanumericSymbols = Module._xmlUCSIsMathematicalAlphanumericSymbols = e => (_xmlUCSIsMathematicalAlphanumericSymbols = Module._xmlUCSIsMathematicalAlphanumericSymbols = wasmExports.xmlUCSIsMathematicalAlphanumericSymbols)(e),\n        _xmlUCSIsMathematicalOperators = Module._xmlUCSIsMathematicalOperators = e => (_xmlUCSIsMathematicalOperators = Module._xmlUCSIsMathematicalOperators = wasmExports.xmlUCSIsMathematicalOperators)(e),\n        _xmlUCSIsMiscellaneousMathematicalSymbolsA = Module._xmlUCSIsMiscellaneousMathematicalSymbolsA = e => (_xmlUCSIsMiscellaneousMathematicalSymbolsA = Module._xmlUCSIsMiscellaneousMathematicalSymbolsA = wasmExports.xmlUCSIsMiscellaneousMathematicalSymbolsA)(e),\n        _xmlUCSIsMiscellaneousMathematicalSymbolsB = Module._xmlUCSIsMiscellaneousMathematicalSymbolsB = e => (_xmlUCSIsMiscellaneousMathematicalSymbolsB = Module._xmlUCSIsMiscellaneousMathematicalSymbolsB = wasmExports.xmlUCSIsMiscellaneousMathematicalSymbolsB)(e),\n        _xmlUCSIsMiscellaneousSymbols = Module._xmlUCSIsMiscellaneousSymbols = e => (_xmlUCSIsMiscellaneousSymbols = Module._xmlUCSIsMiscellaneousSymbols = wasmExports.xmlUCSIsMiscellaneousSymbols)(e),\n        _xmlUCSIsMiscellaneousSymbolsandArrows = Module._xmlUCSIsMiscellaneousSymbolsandArrows = e => (_xmlUCSIsMiscellaneousSymbolsandArrows = Module._xmlUCSIsMiscellaneousSymbolsandArrows = wasmExports.xmlUCSIsMiscellaneousSymbolsandArrows)(e),\n        _xmlUCSIsMiscellaneousTechnical = Module._xmlUCSIsMiscellaneousTechnical = e => (_xmlUCSIsMiscellaneousTechnical = Module._xmlUCSIsMiscellaneousTechnical = wasmExports.xmlUCSIsMiscellaneousTechnical)(e),\n        _xmlUCSIsMongolian = Module._xmlUCSIsMongolian = e => (_xmlUCSIsMongolian = Module._xmlUCSIsMongolian = wasmExports.xmlUCSIsMongolian)(e),\n        _xmlUCSIsMusicalSymbols = Module._xmlUCSIsMusicalSymbols = e => (_xmlUCSIsMusicalSymbols = Module._xmlUCSIsMusicalSymbols = wasmExports.xmlUCSIsMusicalSymbols)(e),\n        _xmlUCSIsMyanmar = Module._xmlUCSIsMyanmar = e => (_xmlUCSIsMyanmar = Module._xmlUCSIsMyanmar = wasmExports.xmlUCSIsMyanmar)(e),\n        _xmlUCSIsNumberForms = Module._xmlUCSIsNumberForms = e => (_xmlUCSIsNumberForms = Module._xmlUCSIsNumberForms = wasmExports.xmlUCSIsNumberForms)(e),\n        _xmlUCSIsOgham = Module._xmlUCSIsOgham = e => (_xmlUCSIsOgham = Module._xmlUCSIsOgham = wasmExports.xmlUCSIsOgham)(e),\n        _xmlUCSIsOldItalic = Module._xmlUCSIsOldItalic = e => (_xmlUCSIsOldItalic = Module._xmlUCSIsOldItalic = wasmExports.xmlUCSIsOldItalic)(e),\n        _xmlUCSIsOpticalCharacterRecognition = Module._xmlUCSIsOpticalCharacterRecognition = e => (_xmlUCSIsOpticalCharacterRecognition = Module._xmlUCSIsOpticalCharacterRecognition = wasmExports.xmlUCSIsOpticalCharacterRecognition)(e),\n        _xmlUCSIsOriya = Module._xmlUCSIsOriya = e => (_xmlUCSIsOriya = Module._xmlUCSIsOriya = wasmExports.xmlUCSIsOriya)(e),\n        _xmlUCSIsOsmanya = Module._xmlUCSIsOsmanya = e => (_xmlUCSIsOsmanya = Module._xmlUCSIsOsmanya = wasmExports.xmlUCSIsOsmanya)(e),\n        _xmlUCSIsPhoneticExtensions = Module._xmlUCSIsPhoneticExtensions = e => (_xmlUCSIsPhoneticExtensions = Module._xmlUCSIsPhoneticExtensions = wasmExports.xmlUCSIsPhoneticExtensions)(e),\n        _xmlUCSIsPrivateUse = Module._xmlUCSIsPrivateUse = e => (_xmlUCSIsPrivateUse = Module._xmlUCSIsPrivateUse = wasmExports.xmlUCSIsPrivateUse)(e),\n        _xmlUCSIsPrivateUseArea = Module._xmlUCSIsPrivateUseArea = e => (_xmlUCSIsPrivateUseArea = Module._xmlUCSIsPrivateUseArea = wasmExports.xmlUCSIsPrivateUseArea)(e),\n        _xmlUCSIsRunic = Module._xmlUCSIsRunic = e => (_xmlUCSIsRunic = Module._xmlUCSIsRunic = wasmExports.xmlUCSIsRunic)(e),\n        _xmlUCSIsShavian = Module._xmlUCSIsShavian = e => (_xmlUCSIsShavian = Module._xmlUCSIsShavian = wasmExports.xmlUCSIsShavian)(e),\n        _xmlUCSIsSinhala = Module._xmlUCSIsSinhala = e => (_xmlUCSIsSinhala = Module._xmlUCSIsSinhala = wasmExports.xmlUCSIsSinhala)(e),\n        _xmlUCSIsSmallFormVariants = Module._xmlUCSIsSmallFormVariants = e => (_xmlUCSIsSmallFormVariants = Module._xmlUCSIsSmallFormVariants = wasmExports.xmlUCSIsSmallFormVariants)(e),\n        _xmlUCSIsSpacingModifierLetters = Module._xmlUCSIsSpacingModifierLetters = e => (_xmlUCSIsSpacingModifierLetters = Module._xmlUCSIsSpacingModifierLetters = wasmExports.xmlUCSIsSpacingModifierLetters)(e),\n        _xmlUCSIsSpecials = Module._xmlUCSIsSpecials = e => (_xmlUCSIsSpecials = Module._xmlUCSIsSpecials = wasmExports.xmlUCSIsSpecials)(e),\n        _xmlUCSIsSuperscriptsandSubscripts = Module._xmlUCSIsSuperscriptsandSubscripts = e => (_xmlUCSIsSuperscriptsandSubscripts = Module._xmlUCSIsSuperscriptsandSubscripts = wasmExports.xmlUCSIsSuperscriptsandSubscripts)(e),\n        _xmlUCSIsSupplementalArrowsA = Module._xmlUCSIsSupplementalArrowsA = e => (_xmlUCSIsSupplementalArrowsA = Module._xmlUCSIsSupplementalArrowsA = wasmExports.xmlUCSIsSupplementalArrowsA)(e),\n        _xmlUCSIsSupplementalArrowsB = Module._xmlUCSIsSupplementalArrowsB = e => (_xmlUCSIsSupplementalArrowsB = Module._xmlUCSIsSupplementalArrowsB = wasmExports.xmlUCSIsSupplementalArrowsB)(e),\n        _xmlUCSIsSupplementalMathematicalOperators = Module._xmlUCSIsSupplementalMathematicalOperators = e => (_xmlUCSIsSupplementalMathematicalOperators = Module._xmlUCSIsSupplementalMathematicalOperators = wasmExports.xmlUCSIsSupplementalMathematicalOperators)(e),\n        _xmlUCSIsSupplementaryPrivateUseAreaA = Module._xmlUCSIsSupplementaryPrivateUseAreaA = e => (_xmlUCSIsSupplementaryPrivateUseAreaA = Module._xmlUCSIsSupplementaryPrivateUseAreaA = wasmExports.xmlUCSIsSupplementaryPrivateUseAreaA)(e),\n        _xmlUCSIsSupplementaryPrivateUseAreaB = Module._xmlUCSIsSupplementaryPrivateUseAreaB = e => (_xmlUCSIsSupplementaryPrivateUseAreaB = Module._xmlUCSIsSupplementaryPrivateUseAreaB = wasmExports.xmlUCSIsSupplementaryPrivateUseAreaB)(e),\n        _xmlUCSIsSyriac = Module._xmlUCSIsSyriac = e => (_xmlUCSIsSyriac = Module._xmlUCSIsSyriac = wasmExports.xmlUCSIsSyriac)(e),\n        _xmlUCSIsTagalog = Module._xmlUCSIsTagalog = e => (_xmlUCSIsTagalog = Module._xmlUCSIsTagalog = wasmExports.xmlUCSIsTagalog)(e),\n        _xmlUCSIsTagbanwa = Module._xmlUCSIsTagbanwa = e => (_xmlUCSIsTagbanwa = Module._xmlUCSIsTagbanwa = wasmExports.xmlUCSIsTagbanwa)(e),\n        _xmlUCSIsTags = Module._xmlUCSIsTags = e => (_xmlUCSIsTags = Module._xmlUCSIsTags = wasmExports.xmlUCSIsTags)(e),\n        _xmlUCSIsTaiLe = Module._xmlUCSIsTaiLe = e => (_xmlUCSIsTaiLe = Module._xmlUCSIsTaiLe = wasmExports.xmlUCSIsTaiLe)(e),\n        _xmlUCSIsTaiXuanJingSymbols = Module._xmlUCSIsTaiXuanJingSymbols = e => (_xmlUCSIsTaiXuanJingSymbols = Module._xmlUCSIsTaiXuanJingSymbols = wasmExports.xmlUCSIsTaiXuanJingSymbols)(e),\n        _xmlUCSIsTamil = Module._xmlUCSIsTamil = e => (_xmlUCSIsTamil = Module._xmlUCSIsTamil = wasmExports.xmlUCSIsTamil)(e),\n        _xmlUCSIsTelugu = Module._xmlUCSIsTelugu = e => (_xmlUCSIsTelugu = Module._xmlUCSIsTelugu = wasmExports.xmlUCSIsTelugu)(e),\n        _xmlUCSIsThaana = Module._xmlUCSIsThaana = e => (_xmlUCSIsThaana = Module._xmlUCSIsThaana = wasmExports.xmlUCSIsThaana)(e),\n        _xmlUCSIsThai = Module._xmlUCSIsThai = e => (_xmlUCSIsThai = Module._xmlUCSIsThai = wasmExports.xmlUCSIsThai)(e),\n        _xmlUCSIsTibetan = Module._xmlUCSIsTibetan = e => (_xmlUCSIsTibetan = Module._xmlUCSIsTibetan = wasmExports.xmlUCSIsTibetan)(e),\n        _xmlUCSIsUgaritic = Module._xmlUCSIsUgaritic = e => (_xmlUCSIsUgaritic = Module._xmlUCSIsUgaritic = wasmExports.xmlUCSIsUgaritic)(e),\n        _xmlUCSIsUnifiedCanadianAboriginalSyllabics = Module._xmlUCSIsUnifiedCanadianAboriginalSyllabics = e => (_xmlUCSIsUnifiedCanadianAboriginalSyllabics = Module._xmlUCSIsUnifiedCanadianAboriginalSyllabics = wasmExports.xmlUCSIsUnifiedCanadianAboriginalSyllabics)(e),\n        _xmlUCSIsVariationSelectors = Module._xmlUCSIsVariationSelectors = e => (_xmlUCSIsVariationSelectors = Module._xmlUCSIsVariationSelectors = wasmExports.xmlUCSIsVariationSelectors)(e),\n        _xmlUCSIsVariationSelectorsSupplement = Module._xmlUCSIsVariationSelectorsSupplement = e => (_xmlUCSIsVariationSelectorsSupplement = Module._xmlUCSIsVariationSelectorsSupplement = wasmExports.xmlUCSIsVariationSelectorsSupplement)(e),\n        _xmlUCSIsYiRadicals = Module._xmlUCSIsYiRadicals = e => (_xmlUCSIsYiRadicals = Module._xmlUCSIsYiRadicals = wasmExports.xmlUCSIsYiRadicals)(e),\n        _xmlUCSIsYiSyllables = Module._xmlUCSIsYiSyllables = e => (_xmlUCSIsYiSyllables = Module._xmlUCSIsYiSyllables = wasmExports.xmlUCSIsYiSyllables)(e),\n        _xmlUCSIsYijingHexagramSymbols = Module._xmlUCSIsYijingHexagramSymbols = e => (_xmlUCSIsYijingHexagramSymbols = Module._xmlUCSIsYijingHexagramSymbols = wasmExports.xmlUCSIsYijingHexagramSymbols)(e),\n        _xmlUCSIsCatCs = Module._xmlUCSIsCatCs = e => (_xmlUCSIsCatCs = Module._xmlUCSIsCatCs = wasmExports.xmlUCSIsCatCs)(e),\n        ___small_fprintf = Module.___small_fprintf = (e, t, r) => (___small_fprintf = Module.___small_fprintf = wasmExports.__small_fprintf)(e, t, r),\n        _xmlXPathBooleanFunction = Module._xmlXPathBooleanFunction = (e, t) => (_xmlXPathBooleanFunction = Module._xmlXPathBooleanFunction = wasmExports.xmlXPathBooleanFunction)(e, t),\n        _xmlXPathCeilingFunction = Module._xmlXPathCeilingFunction = (e, t) => (_xmlXPathCeilingFunction = Module._xmlXPathCeilingFunction = wasmExports.xmlXPathCeilingFunction)(e, t),\n        _xmlXPathCountFunction = Module._xmlXPathCountFunction = (e, t) => (_xmlXPathCountFunction = Module._xmlXPathCountFunction = wasmExports.xmlXPathCountFunction)(e, t),\n        _xmlXPathConcatFunction = Module._xmlXPathConcatFunction = (e, t) => (_xmlXPathConcatFunction = Module._xmlXPathConcatFunction = wasmExports.xmlXPathConcatFunction)(e, t),\n        _xmlXPathContainsFunction = Module._xmlXPathContainsFunction = (e, t) => (_xmlXPathContainsFunction = Module._xmlXPathContainsFunction = wasmExports.xmlXPathContainsFunction)(e, t),\n        _xmlXPathIdFunction = Module._xmlXPathIdFunction = (e, t) => (_xmlXPathIdFunction = Module._xmlXPathIdFunction = wasmExports.xmlXPathIdFunction)(e, t),\n        _xmlXPathFalseFunction = Module._xmlXPathFalseFunction = (e, t) => (_xmlXPathFalseFunction = Module._xmlXPathFalseFunction = wasmExports.xmlXPathFalseFunction)(e, t),\n        _xmlXPathFloorFunction = Module._xmlXPathFloorFunction = (e, t) => (_xmlXPathFloorFunction = Module._xmlXPathFloorFunction = wasmExports.xmlXPathFloorFunction)(e, t),\n        _xmlXPathLastFunction = Module._xmlXPathLastFunction = (e, t) => (_xmlXPathLastFunction = Module._xmlXPathLastFunction = wasmExports.xmlXPathLastFunction)(e, t),\n        _xmlXPathLangFunction = Module._xmlXPathLangFunction = (e, t) => (_xmlXPathLangFunction = Module._xmlXPathLangFunction = wasmExports.xmlXPathLangFunction)(e, t),\n        _xmlXPathLocalNameFunction = Module._xmlXPathLocalNameFunction = (e, t) => (_xmlXPathLocalNameFunction = Module._xmlXPathLocalNameFunction = wasmExports.xmlXPathLocalNameFunction)(e, t),\n        _xmlXPathNotFunction = Module._xmlXPathNotFunction = (e, t) => (_xmlXPathNotFunction = Module._xmlXPathNotFunction = wasmExports.xmlXPathNotFunction)(e, t),\n        _xmlXPathNamespaceURIFunction = Module._xmlXPathNamespaceURIFunction = (e, t) => (_xmlXPathNamespaceURIFunction = Module._xmlXPathNamespaceURIFunction = wasmExports.xmlXPathNamespaceURIFunction)(e, t),\n        _xmlXPathNormalizeFunction = Module._xmlXPathNormalizeFunction = (e, t) => (_xmlXPathNormalizeFunction = Module._xmlXPathNormalizeFunction = wasmExports.xmlXPathNormalizeFunction)(e, t),\n        _xmlXPathNumberFunction = Module._xmlXPathNumberFunction = (e, t) => (_xmlXPathNumberFunction = Module._xmlXPathNumberFunction = wasmExports.xmlXPathNumberFunction)(e, t),\n        _xmlXPathPositionFunction = Module._xmlXPathPositionFunction = (e, t) => (_xmlXPathPositionFunction = Module._xmlXPathPositionFunction = wasmExports.xmlXPathPositionFunction)(e, t),\n        _xmlXPathRoundFunction = Module._xmlXPathRoundFunction = (e, t) => (_xmlXPathRoundFunction = Module._xmlXPathRoundFunction = wasmExports.xmlXPathRoundFunction)(e, t),\n        _xmlXPathStringFunction = Module._xmlXPathStringFunction = (e, t) => (_xmlXPathStringFunction = Module._xmlXPathStringFunction = wasmExports.xmlXPathStringFunction)(e, t),\n        _xmlXPathStringLengthFunction = Module._xmlXPathStringLengthFunction = (e, t) => (_xmlXPathStringLengthFunction = Module._xmlXPathStringLengthFunction = wasmExports.xmlXPathStringLengthFunction)(e, t),\n        _xmlXPathStartsWithFunction = Module._xmlXPathStartsWithFunction = (e, t) => (_xmlXPathStartsWithFunction = Module._xmlXPathStartsWithFunction = wasmExports.xmlXPathStartsWithFunction)(e, t),\n        _xmlXPathSubstringFunction = Module._xmlXPathSubstringFunction = (e, t) => (_xmlXPathSubstringFunction = Module._xmlXPathSubstringFunction = wasmExports.xmlXPathSubstringFunction)(e, t),\n        _xmlXPathSubstringBeforeFunction = Module._xmlXPathSubstringBeforeFunction = (e, t) => (_xmlXPathSubstringBeforeFunction = Module._xmlXPathSubstringBeforeFunction = wasmExports.xmlXPathSubstringBeforeFunction)(e, t),\n        _xmlXPathSubstringAfterFunction = Module._xmlXPathSubstringAfterFunction = (e, t) => (_xmlXPathSubstringAfterFunction = Module._xmlXPathSubstringAfterFunction = wasmExports.xmlXPathSubstringAfterFunction)(e, t),\n        _xmlXPathSumFunction = Module._xmlXPathSumFunction = (e, t) => (_xmlXPathSumFunction = Module._xmlXPathSumFunction = wasmExports.xmlXPathSumFunction)(e, t),\n        _xmlXPathTrueFunction = Module._xmlXPathTrueFunction = (e, t) => (_xmlXPathTrueFunction = Module._xmlXPathTrueFunction = wasmExports.xmlXPathTrueFunction)(e, t),\n        _xmlXPathTranslateFunction = Module._xmlXPathTranslateFunction = (e, t) => (_xmlXPathTranslateFunction = Module._xmlXPathTranslateFunction = wasmExports.xmlXPathTranslateFunction)(e, t),\n        _xmlXPathNextSelf = Module._xmlXPathNextSelf = (e, t) => (_xmlXPathNextSelf = Module._xmlXPathNextSelf = wasmExports.xmlXPathNextSelf)(e, t),\n        _xmlXPathNextChild = Module._xmlXPathNextChild = (e, t) => (_xmlXPathNextChild = Module._xmlXPathNextChild = wasmExports.xmlXPathNextChild)(e, t),\n        _xmlXPathNextDescendant = Module._xmlXPathNextDescendant = (e, t) => (_xmlXPathNextDescendant = Module._xmlXPathNextDescendant = wasmExports.xmlXPathNextDescendant)(e, t),\n        _xmlXPathNextDescendantOrSelf = Module._xmlXPathNextDescendantOrSelf = (e, t) => (_xmlXPathNextDescendantOrSelf = Module._xmlXPathNextDescendantOrSelf = wasmExports.xmlXPathNextDescendantOrSelf)(e, t),\n        _xmlXPathNextParent = Module._xmlXPathNextParent = (e, t) => (_xmlXPathNextParent = Module._xmlXPathNextParent = wasmExports.xmlXPathNextParent)(e, t),\n        _xmlXPathNextAncestor = Module._xmlXPathNextAncestor = (e, t) => (_xmlXPathNextAncestor = Module._xmlXPathNextAncestor = wasmExports.xmlXPathNextAncestor)(e, t),\n        _xmlXPathNextAncestorOrSelf = Module._xmlXPathNextAncestorOrSelf = (e, t) => (_xmlXPathNextAncestorOrSelf = Module._xmlXPathNextAncestorOrSelf = wasmExports.xmlXPathNextAncestorOrSelf)(e, t),\n        _xmlXPathNextFollowingSibling = Module._xmlXPathNextFollowingSibling = (e, t) => (_xmlXPathNextFollowingSibling = Module._xmlXPathNextFollowingSibling = wasmExports.xmlXPathNextFollowingSibling)(e, t),\n        _xmlXPathNextPrecedingSibling = Module._xmlXPathNextPrecedingSibling = (e, t) => (_xmlXPathNextPrecedingSibling = Module._xmlXPathNextPrecedingSibling = wasmExports.xmlXPathNextPrecedingSibling)(e, t),\n        _xmlXPathNextFollowing = Module._xmlXPathNextFollowing = (e, t) => (_xmlXPathNextFollowing = Module._xmlXPathNextFollowing = wasmExports.xmlXPathNextFollowing)(e, t),\n        _xmlXPathNextNamespace = Module._xmlXPathNextNamespace = (e, t) => (_xmlXPathNextNamespace = Module._xmlXPathNextNamespace = wasmExports.xmlXPathNextNamespace)(e, t),\n        _xmlXPathNextAttribute = Module._xmlXPathNextAttribute = (e, t) => (_xmlXPathNextAttribute = Module._xmlXPathNextAttribute = wasmExports.xmlXPathNextAttribute)(e, t),\n        _zcalloc = Module._zcalloc = (e, t, r) => (_zcalloc = Module._zcalloc = wasmExports.zcalloc)(e, t, r),\n        _zcfree = Module._zcfree = (e, t) => (_zcfree = Module._zcfree = wasmExports.zcfree)(e, t),\n        _strerror = Module._strerror = e => (_strerror = Module._strerror = wasmExports.strerror)(e),\n        ___dl_seterr = (e, t) => (___dl_seterr = wasmExports.__dl_seterr)(e, t),\n        _putc = Module._putc = (e, t) => (_putc = Module._putc = wasmExports.putc)(e, t),\n        _gmtime = Module._gmtime = e => (_gmtime = Module._gmtime = wasmExports.gmtime)(e),\n        _htonl = e => (_htonl = wasmExports.htonl)(e),\n        _htons = e => (_htons = wasmExports.htons)(e),\n        _ioctl = Module._ioctl = (e, t, r) => (_ioctl = Module._ioctl = wasmExports.ioctl)(e, t, r),\n        _emscripten_builtin_memalign = (e, t) => (_emscripten_builtin_memalign = wasmExports.emscripten_builtin_memalign)(e, t),\n        _ntohs = e => (_ntohs = wasmExports.ntohs)(e),\n        _srand = Module._srand = e => (_srand = Module._srand = wasmExports.srand)(e),\n        _rand = Module._rand = () => (_rand = Module._rand = wasmExports.rand)(),\n        __emscripten_timeout = (e, t) => (__emscripten_timeout = wasmExports._emscripten_timeout)(e, t),\n        ___floatsitf = Module.___floatsitf = (e, t) => (___floatsitf = Module.___floatsitf = wasmExports.__floatsitf)(e, t),\n        ___multf3 = Module.___multf3 = (e, t, r, a, o) => (___multf3 = Module.___multf3 = wasmExports.__multf3)(e, t, r, a, o),\n        ___extenddftf2 = Module.___extenddftf2 = (e, t) => (___extenddftf2 = Module.___extenddftf2 = wasmExports.__extenddftf2)(e, t),\n        ___getf2 = Module.___getf2 = (e, t, r, a) => (___getf2 = Module.___getf2 = wasmExports.__getf2)(e, t, r, a),\n        ___subtf3 = Module.___subtf3 = (e, t, r, a, o) => (___subtf3 = Module.___subtf3 = wasmExports.__subtf3)(e, t, r, a, o),\n        ___letf2 = Module.___letf2 = (e, t, r, a) => (___letf2 = Module.___letf2 = wasmExports.__letf2)(e, t, r, a),\n        ___lttf2 = Module.___lttf2 = (e, t, r, a) => (___lttf2 = Module.___lttf2 = wasmExports.__lttf2)(e, t, r, a),\n        _setThrew = (e, t) => (_setThrew = wasmExports.setThrew)(e, t),\n        __emscripten_tempret_set = e => (__emscripten_tempret_set = wasmExports._emscripten_tempret_set)(e),\n        __emscripten_tempret_get = () => (__emscripten_tempret_get = wasmExports._emscripten_tempret_get)(),\n        ___fixtfsi = Module.___fixtfsi = (e, t) => (___fixtfsi = Module.___fixtfsi = wasmExports.__fixtfsi)(e, t),\n        __emscripten_stack_restore = e => (__emscripten_stack_restore = wasmExports._emscripten_stack_restore)(e),\n        __emscripten_stack_alloc = e => (__emscripten_stack_alloc = wasmExports._emscripten_stack_alloc)(e),\n        _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports.emscripten_stack_get_current)(),\n        ___wasm_apply_data_relocs = () => (___wasm_apply_data_relocs = wasmExports.__wasm_apply_data_relocs)(),\n        _ScanKeywords = Module._ScanKeywords = 18770052,\n        _stderr = Module._stderr = 18792480,\n        _stdout = Module._stdout = 18792784,\n        _TopMemoryContext = Module._TopMemoryContext = 18830716,\n        _MainLWLockArray = Module._MainLWLockArray = 18800668,\n        _MyProc = Module._MyProc = 18802328,\n        _MyProcPid = Module._MyProcPid = 18824228,\n        _MyLatch = Module._MyLatch = 18824260,\n        _CurrentMemoryContext = Module._CurrentMemoryContext = 18830712,\n        _InterruptPending = Module._InterruptPending = 18824092,\n        _pg_global_prng_state = Module._pg_global_prng_state = 18936304,\n        _CurrentResourceOwner = Module._CurrentResourceOwner = 18830692,\n        _InterruptHoldoffCount = Module._InterruptHoldoffCount = 18824132,\n        _IsUnderPostmaster = Module._IsUnderPostmaster = 18824165,\n        _wal_level = Module._wal_level = 18758340,\n        _MyDatabaseId = Module._MyDatabaseId = 18824148,\n        _error_context_stack = Module._error_context_stack = 18816816,\n        _PG_exception_stack = Module._PG_exception_stack = 18816820,\n        ___THREW__ = Module.___THREW__ = 18950052,\n        ___threwValue = Module.___threwValue = 18950056,\n        _ShmemVariableCache = Module._ShmemVariableCache = 18849760,\n        _shmem_startup_hook = Module._shmem_startup_hook = 18794508,\n        _debug_query_string = Module._debug_query_string = 18848300,\n        _CritSectionCount = Module._CritSectionCount = 18824140,\n        _old_snapshot_threshold = Module._old_snapshot_threshold = 18823756,\n        _TopTransactionResourceOwner = Module._TopTransactionResourceOwner = 18830700,\n        _LocalBufferBlockPointers = Module._LocalBufferBlockPointers = 18800556,\n        _BufferBlocks = Module._BufferBlocks = 18795304,\n        _pgBufferUsage = Module._pgBufferUsage = 18813728,\n        _GUC_check_errdetail_string = Module._GUC_check_errdetail_string = 18814680,\n        _NBuffers = Module._NBuffers = 18690456,\n        _BufferDescriptors = Module._BufferDescriptors = 18795300,\n        _ParallelWorkerNumber = Module._ParallelWorkerNumber = 18767008,\n        _stdin = Module._stdin = 18792632,\n        _ScanKeywordTokens = Module._ScanKeywordTokens = 17487664,\n        _post_parse_analyze_hook = Module._post_parse_analyze_hook = 18802584,\n        _progname = Module._progname = 18848060,\n        _DataDir = Module._DataDir = 18824144,\n        _MyStartTime = Module._MyStartTime = 18824232,\n        _MyProcPort = Module._MyProcPort = 18824248,\n        _Log_directory = Module._Log_directory = 18803120,\n        _Log_filename = Module._Log_filename = 18803124,\n        _ConfigReloadPending = Module._ConfigReloadPending = 18803272,\n        _ShutdownRequestPending = Module._ShutdownRequestPending = 18803276,\n        _process_shared_preload_libraries_in_progress = Module._process_shared_preload_libraries_in_progress = 18824080,\n        _wal_segment_size = Module._wal_segment_size = 18758360,\n        _application_name = Module._application_name = 18815988,\n        _XactIsoLevel = Module._XactIsoLevel = 18758700,\n        _RmgrTable = Module._RmgrTable = 18758816,\n        _CacheMemoryContext = Module._CacheMemoryContext = 18830728,\n        _TopTransactionContext = Module._TopTransactionContext = 18830736,\n        _TTSOpsVirtual = Module._TTSOpsVirtual = 18638668,\n        _WalReceiverFunctions = Module._WalReceiverFunctions = 18803712,\n        _TTSOpsMinimalTuple = Module._TTSOpsMinimalTuple = 18638764,\n        _cluster_name = Module._cluster_name = 18640444,\n        _work_mem = Module._work_mem = 18690432,\n        _ClientAuthentication_hook = Module._ClientAuthentication_hook = 18804032,\n        _cma_rsize = Module._cma_rsize = 18848108,\n        _SOCKET_DATA = Module._SOCKET_DATA = 18854312,\n        _SOCKET_FILE = Module._SOCKET_FILE = 18854308,\n        _TTSOpsHeapTuple = Module._TTSOpsHeapTuple = 18638716,\n        _SnapshotAnyData = Module._SnapshotAnyData = 18690240,\n        _ExecutorStart_hook = Module._ExecutorStart_hook = 18813600,\n        _ExecutorRun_hook = Module._ExecutorRun_hook = 18813604,\n        _ExecutorFinish_hook = Module._ExecutorFinish_hook = 18813608,\n        _ExecutorEnd_hook = Module._ExecutorEnd_hook = 18813612,\n        _SPI_processed = Module._SPI_processed = 18813624,\n        _SPI_tuptable = Module._SPI_tuptable = 18813632,\n        _SPI_result = Module._SPI_result = 18813636,\n        _pgWalUsage = Module._pgWalUsage = 18813840,\n        _cpu_operator_cost = Module._cpu_operator_cost = 18638912,\n        _planner_hook = Module._planner_hook = 18813876,\n        _maintenance_work_mem = Module._maintenance_work_mem = 18690448,\n        _max_parallel_maintenance_workers = Module._max_parallel_maintenance_workers = 18690452,\n        _cpu_tuple_cost = Module._cpu_tuple_cost = 18638896,\n        _seq_page_cost = Module._seq_page_cost = 18638880,\n        _check_function_bodies = Module._check_function_bodies = 18640389,\n        _quote_all_identifiers = Module._quote_all_identifiers = 18848065,\n        _extra_float_digits = Module._extra_float_digits = 18692128,\n        _IntervalStyle = Module._IntervalStyle = 18824172,\n        _pg_crc32_table = Module._pg_crc32_table = 18115504,\n        _oldSnapshotControl = Module._oldSnapshotControl = 18823760,\n        _shmem_request_hook = Module._shmem_request_hook = 18824084,\n        _DateStyle = Module._DateStyle = 18690420,\n        _pg_number_of_ones = Module._pg_number_of_ones = 18433360,\n        _xmlStructuredError = Module._xmlStructuredError = 18936668,\n        _xmlStructuredErrorContext = Module._xmlStructuredErrorContext = 18936676,\n        _xmlGenericErrorContext = Module._xmlGenericErrorContext = 18936672,\n        _xmlGenericError = Module._xmlGenericError = 18774356,\n        _xmlIsBaseCharGroup = Module._xmlIsBaseCharGroup = 18774120,\n        _xmlIsDigitGroup = Module._xmlIsDigitGroup = 18774152,\n        _xmlIsCombiningGroup = Module._xmlIsCombiningGroup = 18774136,\n        _xmlIsExtenderGroup = Module._xmlIsExtenderGroup = 18774168,\n        _xmlFree = Module._xmlFree = 18774320,\n        _ProcessUtility_hook = Module._ProcessUtility_hook = 18848012,\n        _single_mode_feed = Module._single_mode_feed = 18848076,\n        _cma_wsize = Module._cma_wsize = 18848116,\n        _check_password_hook = Module._check_password_hook = 18850784,\n        _IDB_STAGE = Module._IDB_STAGE = 18854320,\n        _IDB_PIPE_FP = Module._IDB_PIPE_FP = 18854316,\n        _pg_scram_mech = Module._pg_scram_mech = 18774064,\n        _pg_g_threadlock = Module._pg_g_threadlock = 18772168,\n        _pgresStatus = Module._pgresStatus = 18773856,\n        _xmlIsPubidChar_tab = Module._xmlIsPubidChar_tab = 18433648,\n        _xmlGetWarningsDefaultValue = Module._xmlGetWarningsDefaultValue = 18774348,\n        _xmlMalloc = Module._xmlMalloc = 18774324,\n        _xmlRealloc = Module._xmlRealloc = 18774332,\n        _xmlLastError = Module._xmlLastError = 18936688,\n        _xmlMallocAtomic = Module._xmlMallocAtomic = 18774328,\n        _xmlMemStrdup = Module._xmlMemStrdup = 18774336,\n        _xmlBufferAllocScheme = Module._xmlBufferAllocScheme = 18774340,\n        _xmlDefaultBufferSize = Module._xmlDefaultBufferSize = 18774344,\n        _xmlParserDebugEntities = Module._xmlParserDebugEntities = 18936628,\n        _xmlDoValidityCheckingDefaultValue = Module._xmlDoValidityCheckingDefaultValue = 18936632,\n        _xmlLoadExtDtdDefaultValue = Module._xmlLoadExtDtdDefaultValue = 18936636,\n        _xmlPedanticParserDefaultValue = Module._xmlPedanticParserDefaultValue = 18936640,\n        _xmlLineNumbersDefaultValue = Module._xmlLineNumbersDefaultValue = 18936644,\n        _xmlKeepBlanksDefaultValue = Module._xmlKeepBlanksDefaultValue = 18774352,\n        _xmlSubstituteEntitiesDefaultValue = Module._xmlSubstituteEntitiesDefaultValue = 18936648,\n        _xmlRegisterNodeDefaultValue = Module._xmlRegisterNodeDefaultValue = 18936652,\n        _xmlDeregisterNodeDefaultValue = Module._xmlDeregisterNodeDefaultValue = 18936656,\n        _xmlParserInputBufferCreateFilenameValue = Module._xmlParserInputBufferCreateFilenameValue = 18936660,\n        _xmlOutputBufferCreateFilenameValue = Module._xmlOutputBufferCreateFilenameValue = 18936664,\n        _xmlIndentTreeOutput = Module._xmlIndentTreeOutput = 18774360,\n        _xmlTreeIndentString = Module._xmlTreeIndentString = 18774364,\n        _xmlSaveNoEmptyTags = Module._xmlSaveNoEmptyTags = 18936680,\n        _xmlDefaultSAXHandler = Module._xmlDefaultSAXHandler = 18774368,\n        _xmlDefaultSAXLocator = Module._xmlDefaultSAXLocator = 18774480,\n        _xmlParserMaxDepth = Module._xmlParserMaxDepth = 18775140,\n        _xmlStringText = Module._xmlStringText = 18435456,\n        _xmlStringComment = Module._xmlStringComment = 18435471,\n        _xmlStringTextNoenc = Module._xmlStringTextNoenc = 18435461,\n        _xmlXPathNAN = Module._xmlXPathNAN = 18937352,\n        _xmlXPathNINF = Module._xmlXPathNINF = 18937368,\n        _xmlXPathPINF = Module._xmlXPathPINF = 18937360,\n        _z_errmsg = Module._z_errmsg = 18791696,\n        __length_code = Module.__length_code = 18455120,\n        __dist_code = Module.__dist_code = 18454608;\n      function invoke_i(e) {\n        var t = stackSave();\n        try {\n          return getWasmTableEntry(e)();\n        } catch (r) {\n          if (stackRestore(t), r !== r + 0) throw r;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_v(e) {\n        var t = stackSave();\n        try {\n          getWasmTableEntry(e)();\n        } catch (r) {\n          if (stackRestore(t), r !== r + 0) throw r;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_vi(e, t) {\n        var r = stackSave();\n        try {\n          getWasmTableEntry(e)(t);\n        } catch (a) {\n          if (stackRestore(r), a !== a + 0) throw a;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iii(e, t, r) {\n        var a = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r);\n        } catch (o) {\n          if (stackRestore(a), o !== o + 0) throw o;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiiiii(e, t, r, a, o, s) {\n        var l = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s);\n        } catch (n) {\n          if (stackRestore(l), n !== n + 0) throw n;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viii(e, t, r, a) {\n        var o = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a);\n        } catch (s) {\n          if (stackRestore(o), s !== s + 0) throw s;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viiiiiii(e, t, r, a, o, s, l, n) {\n        var _ = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o, s, l, n);\n        } catch (m) {\n          if (stackRestore(_), m !== m + 0) throw m;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiii(e, t, r, a) {\n        var o = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a);\n        } catch (s) {\n          if (stackRestore(o), s !== s + 0) throw s;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viiii(e, t, r, a, o) {\n        var s = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o);\n        } catch (l) {\n          if (stackRestore(s), l !== l + 0) throw l;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiiii(e, t, r, a, o) {\n        var s = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o);\n        } catch (l) {\n          if (stackRestore(s), l !== l + 0) throw l;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_vii(e, t, r) {\n        var a = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r);\n        } catch (o) {\n          if (stackRestore(a), o !== o + 0) throw o;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_ii(e, t) {\n        var r = stackSave();\n        try {\n          return getWasmTableEntry(e)(t);\n        } catch (a) {\n          if (stackRestore(r), a !== a + 0) throw a;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viiiiiiii(e, t, r, a, o, s, l, n, _) {\n        var m = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o, s, l, n, _);\n        } catch (p) {\n          if (stackRestore(m), p !== p + 0) throw p;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viiiii(e, t, r, a, o, s) {\n        var l = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o, s);\n        } catch (n) {\n          if (stackRestore(l), n !== n + 0) throw n;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_ij(e, t) {\n        var r = stackSave();\n        try {\n          return getWasmTableEntry(e)(t);\n        } catch (a) {\n          if (stackRestore(r), a !== a + 0) throw a;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_ji(e, t) {\n        var r = stackSave();\n        try {\n          return getWasmTableEntry(e)(t);\n        } catch (a) {\n          if (stackRestore(r), a !== a + 0) throw a;\n          return _setThrew(1, 0), 0n;\n        }\n      }\n      function invoke_ijiiiiii(e, t, r, a, o, s, l, n) {\n        var _ = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s, l, n);\n        } catch (m) {\n          if (stackRestore(_), m !== m + 0) throw m;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_vij(e, t, r) {\n        var a = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r);\n        } catch (o) {\n          if (stackRestore(a), o !== o + 0) throw o;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_vj(e, t) {\n        var r = stackSave();\n        try {\n          getWasmTableEntry(e)(t);\n        } catch (a) {\n          if (stackRestore(r), a !== a + 0) throw a;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viijii(e, t, r, a, o, s) {\n        var l = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o, s);\n        } catch (n) {\n          if (stackRestore(l), n !== n + 0) throw n;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiiiiji(e, t, r, a, o, s, l) {\n        var n = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s, l);\n        } catch (_) {\n          if (stackRestore(n), _ !== _ + 0) throw _;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viijiiii(e, t, r, a, o, s, l, n) {\n        var _ = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o, s, l, n);\n        } catch (m) {\n          if (stackRestore(_), m !== m + 0) throw m;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viij(e, t, r, a) {\n        var o = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a);\n        } catch (s) {\n          if (stackRestore(o), s !== s + 0) throw s;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_jiiiiiiii(e, t, r, a, o, s, l, n, _) {\n        var m = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s, l, n, _);\n        } catch (p) {\n          if (stackRestore(m), p !== p + 0) throw p;\n          return _setThrew(1, 0), 0n;\n        }\n      }\n      function invoke_jiiiii(e, t, r, a, o, s) {\n        var l = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s);\n        } catch (n) {\n          if (stackRestore(l), n !== n + 0) throw n;\n          return _setThrew(1, 0), 0n;\n        }\n      }\n      function invoke_iiiiiiiii(e, t, r, a, o, s, l, n, _) {\n        var m = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s, l, n, _);\n        } catch (p) {\n          if (stackRestore(m), p !== p + 0) throw p;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_vji(e, t, r) {\n        var a = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r);\n        } catch (o) {\n          if (stackRestore(a), o !== o + 0) throw o;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiiijii(e, t, r, a, o, s, l) {\n        var n = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s, l);\n        } catch (_) {\n          if (stackRestore(n), _ !== _ + 0) throw _;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_vijiji(e, t, r, a, o, s) {\n        var l = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o, s);\n        } catch (n) {\n          if (stackRestore(l), n !== n + 0) throw n;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viji(e, t, r, a) {\n        var o = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a);\n        } catch (s) {\n          if (stackRestore(o), s !== s + 0) throw s;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiij(e, t, r, a) {\n        var o = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a);\n        } catch (s) {\n          if (stackRestore(o), s !== s + 0) throw s;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiiiiiii(e, t, r, a, o, s, l, n) {\n        var _ = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s, l, n);\n        } catch (m) {\n          if (stackRestore(_), m !== m + 0) throw m;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiiiiii(e, t, r, a, o, s, l) {\n        var n = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s, l);\n        } catch (_) {\n          if (stackRestore(n), _ !== _ + 0) throw _;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_di(e, t) {\n        var r = stackSave();\n        try {\n          return getWasmTableEntry(e)(t);\n        } catch (a) {\n          if (stackRestore(r), a !== a + 0) throw a;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_id(e, t) {\n        var r = stackSave();\n        try {\n          return getWasmTableEntry(e)(t);\n        } catch (a) {\n          if (stackRestore(r), a !== a + 0) throw a;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_ijiiiii(e, t, r, a, o, s, l) {\n        var n = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s, l);\n        } catch (_) {\n          if (stackRestore(n), _ !== _ + 0) throw _;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_jiiii(e, t, r, a, o) {\n        var s = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o);\n        } catch (l) {\n          if (stackRestore(s), l !== l + 0) throw l;\n          return _setThrew(1, 0), 0n;\n        }\n      }\n      function invoke_viiiiii(e, t, r, a, o, s, l) {\n        var n = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o, s, l);\n        } catch (_) {\n          if (stackRestore(n), _ !== _ + 0) throw _;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viiiiiiiiiiii(e, t, r, a, o, s, l, n, _, m, p, d, g) {\n        var c = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o, s, l, n, _, m, p, d, g);\n        } catch (f) {\n          if (stackRestore(c), f !== f + 0) throw f;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_jii(e, t, r) {\n        var a = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r);\n        } catch (o) {\n          if (stackRestore(a), o !== o + 0) throw o;\n          return _setThrew(1, 0), 0n;\n        }\n      }\n      function invoke_iiiij(e, t, r, a, o) {\n        var s = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o);\n        } catch (l) {\n          if (stackRestore(s), l !== l + 0) throw l;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiiiiiiiii(e, t, r, a, o, s, l, n, _, m) {\n        var p = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s, l, n, _, m);\n        } catch (d) {\n          if (stackRestore(p), d !== d + 0) throw d;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viiji(e, t, r, a, o) {\n        var s = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o);\n        } catch (l) {\n          if (stackRestore(s), l !== l + 0) throw l;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiji(e, t, r, a) {\n        var o = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a);\n        } catch (s) {\n          if (stackRestore(o), s !== s + 0) throw s;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_vid(e, t, r) {\n        var a = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r);\n        } catch (o) {\n          if (stackRestore(a), o !== o + 0) throw o;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viiiiiiiii(e, t, r, a, o, s, l, n, _, m) {\n        var p = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o, s, l, n, _, m);\n        } catch (d) {\n          if (stackRestore(p), d !== d + 0) throw d;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_viiij(e, t, r, a, o) {\n        var s = stackSave();\n        try {\n          getWasmTableEntry(e)(t, r, a, o);\n        } catch (l) {\n          if (stackRestore(s), l !== l + 0) throw l;\n          _setThrew(1, 0);\n        }\n      }\n      function invoke_iiiiiiiiiiiiiiiii(e, t, r, a, o, s, l, n, _, m, p, d, g, c, f, u, w) {\n        var h = stackSave();\n        try {\n          return getWasmTableEntry(e)(t, r, a, o, s, l, n, _, m, p, d, g, c, f, u, w);\n        } catch (S) {\n          if (stackRestore(h), S !== S + 0) throw S;\n          _setThrew(1, 0);\n        }\n      }\n      Module.addRunDependency = addRunDependency, Module.removeRunDependency = removeRunDependency, Module.callMain = callMain, Module.ccall = ccall, Module.cwrap = cwrap, Module.setValue = setValue, Module.getValue = getValue, Module.UTF8ToString = UTF8ToString, Module.stringToNewUTF8 = stringToNewUTF8, Module.stringToUTF8OnStack = stringToUTF8OnStack, Module.FS_createPreloadedFile = FS_createPreloadedFile, Module.FS_unlink = FS_unlink, Module.FS_createPath = FS_createPath, Module.FS_createDevice = FS_createDevice, Module.FS = FS, Module.FS_createDataFile = FS_createDataFile, Module.FS_createLazyFile = FS_createLazyFile;\n      var calledRun;\n      dependenciesFulfilled = function e() {\n        calledRun || run(), calledRun || (dependenciesFulfilled = e);\n      };\n      function callMain(e = []) {\n        var t = resolveGlobalSymbol(\"main\").sym;\n        if (t) {\n          e.unshift(thisProgram);\n          var r = e.length,\n            a = stackAlloc((r + 1) * 4),\n            o = a;\n          e.forEach(l => {\n            HEAPU32[o >> 2] = stringToUTF8OnStack(l), o += 4;\n          }), HEAPU32[o >> 2] = 0;\n          try {\n            var s = t(r, a);\n            return exitJS(s, !0), s;\n          } catch (l) {\n            return handleException(l);\n          }\n        }\n      }\n      function run(e = arguments_) {\n        if (runDependencies > 0 || (preRun(), runDependencies > 0)) return;\n        function t() {\n          calledRun || (calledRun = !0, Module.calledRun = !0, !ABORT && (initRuntime(), preMain(), readyPromiseResolve(Module), Module.onRuntimeInitialized?.(), shouldRunNow && callMain(e), postRun()));\n        }\n        Module.setStatus ? (Module.setStatus(\"Running...\"), setTimeout(() => {\n          setTimeout(() => Module.setStatus(\"\"), 1), t();\n        }, 1)) : t();\n      }\n      if (Module.preInit) for (typeof Module.preInit == \"function\" && (Module.preInit = [Module.preInit]); Module.preInit.length > 0;) Module.preInit.pop()();\n      var shouldRunNow = !0;\n      return Module.noInitialRun && (shouldRunNow = !1), run(), moduleRtn = readyPromise, moduleRtn;\n    };\n  })(),\n  ke = Qe;\nvar Te = ke;\nvar Y,\n  W,\n  j,\n  J,\n  $,\n  _e,\n  ie,\n  me,\n  Z,\n  ae,\n  oe,\n  se,\n  V,\n  G,\n  k,\n  K,\n  O,\n  qe,\n  re,\n  pe = class pe extends _chunk_A7RFOIQ7_js__WEBPACK_IMPORTED_MODULE_0__.a {\n    constructor(r = {}, a = {}) {\n      super();\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, O);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, Y, !1);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, W, !1);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, j, !1);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, J, !1);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, $, !1);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, _e, new H());\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, ie, new H());\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, me, new H());\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, Z, !1);\n      this.debug = 0;\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, ae);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, oe, []);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, se, new _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.o());\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, V);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, G);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, k, new Map());\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.f)(this, K, new Set());\n      typeof r == \"string\" ? a = {\n        dataDir: r,\n        ...a\n      } : a = r, this.dataDir = a.dataDir, a.parsers !== void 0 && (this.parsers = {\n        ...this.parsers,\n        ...a.parsers\n      }), a.serializers !== void 0 && (this.serializers = {\n        ...this.serializers,\n        ...a.serializers\n      }), a?.debug !== void 0 && (this.debug = a.debug), a?.relaxedDurability !== void 0 && (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, $, a.relaxedDurability), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, ae, a.extensions ?? {}), this.waitReady = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.h)(this, O, qe).call(this, a ?? {});\n    }\n    static async create(r, a) {\n      let o = typeof r == \"string\" ? {\n          dataDir: r,\n          ...(a ?? {})\n        } : r ?? {},\n        s = new pe(o);\n      return await s.waitReady, s;\n    }\n    get Module() {\n      return this.mod;\n    }\n    get ready() {\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, Y) && !(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, W) && !(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, j);\n    }\n    get closed() {\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, j);\n    }\n    async close() {\n      await this._checkReady(), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, W, !0);\n      for (let r of (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, oe)) await r();\n      try {\n        await this.execProtocol(_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.i.end()), this.mod._pg_shutdown();\n      } catch (r) {\n        let a = r;\n        if (!(a.name === \"ExitStatus\" && a.status === 0)) throw r;\n      }\n      await this.fs.closeFs(), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, j, !0), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, W, !1);\n    }\n    async [Symbol.asyncDispose]() {\n      await this.close();\n    }\n    async _handleBlob(r) {\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, V, r ? await r.arrayBuffer() : void 0);\n    }\n    async _cleanupBlob() {\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, V, void 0);\n    }\n    async _getWrittenBlob() {\n      if (!(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, G)) return;\n      let r = new Blob((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, G));\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, G, void 0), r;\n    }\n    async _checkReady() {\n      if ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, W)) throw new Error(\"PGlite is closing\");\n      if ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, j)) throw new Error(\"PGlite is closed\");\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, Y) || (await this.waitReady);\n    }\n    execProtocolRawSync(r) {\n      let a = r.length,\n        o = this.mod;\n      o._interactive_write(a), o.HEAPU8.set(r, 1), o._interactive_one();\n      let s = a + 2,\n        l = s + o._interactive_read();\n      return o.HEAPU8.subarray(s, l);\n    }\n    async execProtocolRaw(r, {\n      syncToFs: a = !0\n    } = {}) {\n      let o = r.length,\n        s = this.mod;\n      s._interactive_write(o), s.HEAPU8.set(r, 1), s._interactive_one();\n      let l = o + 2,\n        n = l + s._interactive_read(),\n        _ = s.HEAPU8.subarray(l, n);\n      return a && (await this.syncToFs()), _;\n    }\n    async execProtocol(r, {\n      syncToFs: a = !0,\n      throwOnError: o = !0,\n      onNotice: s\n    } = {}) {\n      let l = await this.execProtocolRaw(r, {\n          syncToFs: a\n        }),\n        n = [];\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, se).parse(l, _ => {\n        if (_ instanceof _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.j) {\n          if ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, se, new _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.o()), o) throw _;\n        } else if (_ instanceof _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.m) this.debug > 0 && console.warn(_), s && s(_);else if (_ instanceof _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.l) switch (_.text) {\n          case \"BEGIN\":\n            (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, J, !0);\n            break;\n          case \"COMMIT\":\n          case \"ROLLBACK\":\n            (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, J, !1);\n            break;\n        } else if (_ instanceof _chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.k) {\n          let m = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).get(_.channel);\n          m && m.forEach(p => {\n            queueMicrotask(() => p(_.payload));\n          }), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, K).forEach(p => {\n            queueMicrotask(() => p(_.channel, _.payload));\n          });\n        }\n        n.push(_);\n      }), {\n        messages: n,\n        data: l\n      };\n    }\n    isInTransaction() {\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, J);\n    }\n    async syncToFs() {\n      if ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, Z)) return;\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, Z, !0);\n      let r = async () => {\n        await (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, me).runExclusive(async () => {\n          (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, Z, !1), await this.fs.syncToFs((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, $));\n        });\n      };\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, $) ? r() : await r();\n    }\n    async listen(r, a) {\n      let o = (0,_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.x)(r);\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).has(o) || (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).set(o, new Set()), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).get(o).add(a);\n      try {\n        await this.exec(`LISTEN ${r}`);\n      } catch (s) {\n        throw (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).get(o).delete(a), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).get(o)?.size === 0 && (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).delete(o), s;\n      }\n      return async () => {\n        await this.unlisten(o, a);\n      };\n    }\n    async unlisten(r, a) {\n      let o = (0,_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.x)(r);\n      a ? ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).get(o)?.delete(a), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).get(o)?.size === 0 && (await this.exec(`UNLISTEN ${r}`), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).delete(o))) : (await this.exec(`UNLISTEN ${r}`), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, k).delete(o));\n    }\n    onNotification(r) {\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, K).add(r), () => {\n        (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, K).delete(r);\n      };\n    }\n    offNotification(r) {\n      (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, K).delete(r);\n    }\n    async dumpDataDir(r) {\n      let a = this.dataDir?.split(\"/\").pop() ?? \"pgdata\";\n      return this.fs.dumpTar(a, r);\n    }\n    _runExclusiveQuery(r) {\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, _e).runExclusive(r);\n    }\n    _runExclusiveTransaction(r) {\n      return (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, ie).runExclusive(r);\n    }\n    async clone() {\n      let r = await this.dumpDataDir(\"none\");\n      return new pe({\n        loadDataDir: r\n      });\n    }\n  };\nY = new WeakMap(), W = new WeakMap(), j = new WeakMap(), J = new WeakMap(), $ = new WeakMap(), _e = new WeakMap(), ie = new WeakMap(), me = new WeakMap(), Z = new WeakMap(), ae = new WeakMap(), oe = new WeakMap(), se = new WeakMap(), V = new WeakMap(), G = new WeakMap(), k = new WeakMap(), K = new WeakMap(), O = new WeakSet(), qe = async function (r) {\n  if (r.fs) this.fs = r.fs;else {\n    let {\n      dataDir: d,\n      fsType: g\n    } = Fe(r.dataDir);\n    this.fs = await Ae(d, g);\n  }\n  let a = {},\n    o = [],\n    s = [`PGDATA=${_chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.d}`, `PREFIX=${_chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.c}`, `PGUSER=${r.username ?? \"postgres\"}`, `PGDATABASE=${r.database ?? \"template1\"}`, \"MODE=REACT\", \"REPL=N\", ...(this.debug ? [\"-d\", this.debug.toString()] : [])];\n  r.wasmModule || (0,_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.r)();\n  let l = r.fsBundle ? r.fsBundle.arrayBuffer() : (0,_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.t)(),\n    n;\n  l.then(d => {\n    n = d;\n  });\n  let _ = {\n      WASM_PREFIX: _chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.c,\n      arguments: s,\n      INITIAL_MEMORY: r.initialMemory,\n      noExitRuntime: !0,\n      ...(this.debug > 0 ? {\n        print: console.info,\n        printErr: console.error\n      } : {\n        print: () => {},\n        printErr: () => {}\n      }),\n      instantiateWasm: (d, g) => ((0,_chunk_EADU5A67_js__WEBPACK_IMPORTED_MODULE_1__.s)(d, r.wasmModule).then(({\n        instance: c,\n        module: f\n      }) => {\n        g(c, f);\n      }), {}),\n      getPreloadedPackage: (d, g) => {\n        if (d === \"postgres.data\") {\n          if (n.byteLength !== g) throw new Error(`Invalid FS bundle size: ${n.byteLength} !== ${g}`);\n          return n;\n        }\n        throw new Error(`Unknown package: ${d}`);\n      },\n      preRun: [d => {\n        let g = d.FS.makedev(64, 0),\n          c = {\n            open: f => {},\n            close: f => {},\n            read: (f, u, w, h, S) => {\n              let M = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, V);\n              if (!M) throw new Error(\"No /dev/blob File or Blob provided to read from\");\n              let y = new Uint8Array(M);\n              if (S >= y.length) return 0;\n              let x = Math.min(y.length - S, h);\n              for (let E = 0; E < x; E++) u[w + E] = y[S + E];\n              return x;\n            },\n            write: (f, u, w, h, S) => ((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, G) ?? (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, G, []), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, G).push(u.slice(w, w + h)), h),\n            llseek: (f, u, w) => {\n              let h = (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, V);\n              if (!h) throw new Error(\"No /dev/blob File or Blob provided to llseek\");\n              let S = u;\n              if (w === 1 ? S += f.position : w === 2 && (S = new Uint8Array(h).length), S < 0) throw new d.FS.ErrnoError(28);\n              return S;\n            }\n          };\n        d.FS.registerDevice(g, c), d.FS.mkdev(\"/dev/blob\", g);\n      }]\n    },\n    {\n      emscriptenOpts: m\n    } = await this.fs.init(this, _);\n  _ = m;\n  for (let [d, g] of Object.entries((0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, ae))) if (g instanceof URL) a[d] = ge(g);else {\n    let c = await g.setup(this, _);\n    if (c.emscriptenOpts && (_ = c.emscriptenOpts), c.namespaceObj) {\n      let f = this;\n      f[d] = c.namespaceObj;\n    }\n    c.bundlePath && (a[d] = ge(c.bundlePath)), c.init && o.push(c.init), c.close && (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, oe).push(c.close);\n  }\n  if (_.pg_extensions = a, await l, this.mod = await Te(_), await this.fs.initialSyncFs(), r.loadDataDir) {\n    if (this.mod.FS.analyzePath(_chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.d + \"/PG_VERSION\").exists) throw new Error(\"Database already exists, cannot load from tarball\");\n    (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.h)(this, O, re).call(this, \"pglite: loading data from tarball\"), await (0,_chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.b)(this.mod.FS, r.loadDataDir, _chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.d);\n  }\n  this.mod.FS.analyzePath(_chunk_WGR4JCLS_js__WEBPACK_IMPORTED_MODULE_2__.d + \"/PG_VERSION\").exists ? (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.h)(this, O, re).call(this, \"pglite: found DB, resuming\") : (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.h)(this, O, re).call(this, \"pglite: no db\"), await Pe(this.mod, (...d) => (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.h)(this, O, re).call(this, ...d));\n  let p = this.mod._pg_initdb();\n  if (!p) throw new Error(\"INITDB failed to return value\");\n  if (p & 1) throw new Error(\"INITDB failed\");\n  if (p & 2) {\n    let d = r.username ?? \"postgres\",\n      g = r.database ?? \"template1\";\n    if (p & 4) {\n      if (!(p & 12)) throw new Error(\"Invalid db/user combination\");\n    } else if (g !== \"template1\" && d !== \"postgres\") throw new Error(\"INITDB created a new datadir, but an alternative db/user was requested\");\n  }\n  await this.syncToFs(), (0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.g)(this, Y, !0), await this.exec(\"SET search_path TO public;\"), await this._initArrayTypes();\n  for (let d of o) await d();\n}, re = function (...r) {\n  this.debug > 0 && console.log(...r);\n};\nvar Ue = pe;\n(0,_chunk_BTBUZ646_js__WEBPACK_IMPORTED_MODULE_4__.j)();\n\n\n//# sourceURL=webpack://pglitedemo/./node_modules/@electric-sql/pglite/dist/index.js?");

/***/ }),

/***/ "./node_modules/@electric-sql/pglite/dist/postgres.data":
/*!**************************************************************!*\
  !*** ./node_modules/@electric-sql/pglite/dist/postgres.data ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"6a6af95f67e70830cb39.data\";\n\n//# sourceURL=webpack://pglitedemo/./node_modules/@electric-sql/pglite/dist/postgres.data?");

/***/ }),

/***/ "./node_modules/@electric-sql/pglite/dist/postgres.wasm":
/*!**************************************************************!*\
  !*** ./node_modules/@electric-sql/pglite/dist/postgres.wasm ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"882a4fc4178bf2b803a6.wasm\";\n\n//# sourceURL=webpack://pglitedemo/./node_modules/@electric-sql/pglite/dist/postgres.wasm?");

/***/ }),

/***/ "./node_modules/fast-text-encoding/text.min.js":
/*!*****************************************************!*\
  !*** ./node_modules/fast-text-encoding/text.min.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("(function (scope) {\n  'use strict';\n\n  function B(r, e) {\n    var f;\n    return r instanceof Buffer ? f = r : f = Buffer.from(r.buffer, r.byteOffset, r.byteLength), f.toString(e);\n  }\n  var w = function (r) {\n    return Buffer.from(r);\n  };\n  function h(r) {\n    for (var e = 0, f = Math.min(256 * 256, r.length + 1), n = new Uint16Array(f), i = [], o = 0;;) {\n      var t = e < r.length;\n      if (!t || o >= f - 1) {\n        var s = n.subarray(0, o),\n          m = s;\n        if (i.push(String.fromCharCode.apply(null, m)), !t) return i.join(\"\");\n        r = r.subarray(e), e = 0, o = 0;\n      }\n      var a = r[e++];\n      if ((a & 128) === 0) n[o++] = a;else if ((a & 224) === 192) {\n        var d = r[e++] & 63;\n        n[o++] = (a & 31) << 6 | d;\n      } else if ((a & 240) === 224) {\n        var d = r[e++] & 63,\n          l = r[e++] & 63;\n        n[o++] = (a & 31) << 12 | d << 6 | l;\n      } else if ((a & 248) === 240) {\n        var d = r[e++] & 63,\n          l = r[e++] & 63,\n          R = r[e++] & 63,\n          c = (a & 7) << 18 | d << 12 | l << 6 | R;\n        c > 65535 && (c -= 65536, n[o++] = c >>> 10 & 1023 | 55296, c = 56320 | c & 1023), n[o++] = c;\n      }\n    }\n  }\n  function F(r) {\n    for (var e = 0, f = r.length, n = 0, i = Math.max(32, f + (f >>> 1) + 7), o = new Uint8Array(i >>> 3 << 3); e < f;) {\n      var t = r.charCodeAt(e++);\n      if (t >= 55296 && t <= 56319) {\n        if (e < f) {\n          var s = r.charCodeAt(e);\n          (s & 64512) === 56320 && (++e, t = ((t & 1023) << 10) + (s & 1023) + 65536);\n        }\n        if (t >= 55296 && t <= 56319) continue;\n      }\n      if (n + 4 > o.length) {\n        i += 8, i *= 1 + e / r.length * 2, i = i >>> 3 << 3;\n        var m = new Uint8Array(i);\n        m.set(o), o = m;\n      }\n      if ((t & 4294967168) === 0) {\n        o[n++] = t;\n        continue;\n      } else if ((t & 4294965248) === 0) o[n++] = t >>> 6 & 31 | 192;else if ((t & 4294901760) === 0) o[n++] = t >>> 12 & 15 | 224, o[n++] = t >>> 6 & 63 | 128;else if ((t & 4292870144) === 0) o[n++] = t >>> 18 & 7 | 240, o[n++] = t >>> 12 & 63 | 128, o[n++] = t >>> 6 & 63 | 128;else continue;\n      o[n++] = t & 63 | 128;\n    }\n    return o.slice ? o.slice(0, n) : o.subarray(0, n);\n  }\n  var u = \"Failed to \",\n    p = function (r, e, f) {\n      if (r) throw new Error(\"\".concat(u).concat(e, \": the '\").concat(f, \"' option is unsupported.\"));\n    };\n  var x = typeof Buffer == \"function\" && Buffer.from;\n  var A = x ? w : F;\n  function v() {\n    this.encoding = \"utf-8\";\n  }\n  v.prototype.encode = function (r, e) {\n    return p(e && e.stream, \"encode\", \"stream\"), A(r);\n  };\n  function U(r) {\n    var e;\n    try {\n      var f = new Blob([r], {\n        type: \"text/plain;charset=UTF-8\"\n      });\n      e = URL.createObjectURL(f);\n      var n = new XMLHttpRequest();\n      return n.open(\"GET\", e, !1), n.send(), n.responseText;\n    } finally {\n      e && URL.revokeObjectURL(e);\n    }\n  }\n  var O = !x && typeof Blob == \"function\" && typeof URL == \"function\" && typeof URL.createObjectURL == \"function\",\n    S = [\"utf-8\", \"utf8\", \"unicode-1-1-utf-8\"],\n    T = h;\n  x ? T = B : O && (T = function (r) {\n    try {\n      return U(r);\n    } catch (e) {\n      return h(r);\n    }\n  });\n  var y = \"construct 'TextDecoder'\",\n    E = \"\".concat(u, \" \").concat(y, \": the \");\n  function g(r, e) {\n    p(e && e.fatal, y, \"fatal\"), r = r || \"utf-8\";\n    var f;\n    if (x ? f = Buffer.isEncoding(r) : f = S.indexOf(r.toLowerCase()) !== -1, !f) throw new RangeError(\"\".concat(E, \" encoding label provided ('\").concat(r, \"') is invalid.\"));\n    this.encoding = r, this.fatal = !1, this.ignoreBOM = !1;\n  }\n  g.prototype.decode = function (r, e) {\n    p(e && e.stream, \"decode\", \"stream\");\n    var f;\n    return r instanceof Uint8Array ? f = r : r.buffer instanceof ArrayBuffer ? f = new Uint8Array(r.buffer) : f = new Uint8Array(r), T(f, this.encoding);\n  };\n  scope.TextEncoder = scope.TextEncoder || v;\n  scope.TextDecoder = scope.TextDecoder || g;\n})(typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : this);\n\n//# sourceURL=webpack://pglitedemo/./node_modules/fast-text-encoding/text.min.js?");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/******/ // expose the modules object (__webpack_modules__)
/******/ __webpack_require__.m = __webpack_modules__;
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/create fake namespace object */
/******/ (() => {
/******/ 	var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 	var leafPrototypes;
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 16: return value when it's Promise-like
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = this(value);
/******/ 		if(mode & 8) return value;
/******/ 		if(typeof value === 'object' && value) {
/******/ 			if((mode & 4) && value.__esModule) return value;
/******/ 			if((mode & 16) && typeof value.then === 'function') return value;
/******/ 		}
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		var def = {};
/******/ 		leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 		for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 			Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 		}
/******/ 		def['default'] = () => (value);
/******/ 		__webpack_require__.d(ns, def);
/******/ 		return ns;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/ensure chunk */
/******/ (() => {
/******/ 	__webpack_require__.f = {};
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = (chunkId) => {
/******/ 		return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 			__webpack_require__.f[key](chunkId, promises);
/******/ 			return promises;
/******/ 		}, []));
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/get javascript chunk filename */
/******/ (() => {
/******/ 	// This function allow to reference async chunks
/******/ 	__webpack_require__.u = (chunkId) => {
/******/ 		// return url for filenames based on template
/******/ 		return "" + chunkId + ".bundle1.mjs";
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/global */
/******/ (() => {
/******/ 	__webpack_require__.g = (function() {
/******/ 		if (typeof globalThis === 'object') return globalThis;
/******/ 		try {
/******/ 			return this || new Function('return this')();
/******/ 		} catch (e) {
/******/ 			if (typeof window === 'object') return window;
/******/ 		}
/******/ 	})();
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/publicPath */
/******/ (() => {
/******/ 	var scriptUrl;
/******/ 	if (typeof import.meta.url === "string") scriptUrl = import.meta.url
/******/ 	// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 	// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 	if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 	scriptUrl = scriptUrl.replace(/^blob:/, "").replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 	__webpack_require__.p = scriptUrl;
/******/ })();
/******/ 
/******/ /* webpack/runtime/import chunk loading */
/******/ (() => {
/******/ 	__webpack_require__.b = new URL("./", import.meta.url);
/******/ 	
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// [resolve, Promise] = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"main": 0
/******/ 	};
/******/ 	
/******/ 	var installChunk = (data) => {
/******/ 		var {__webpack_ids__, __webpack_modules__, __webpack_runtime__} = data;
/******/ 		// add "modules" to the modules object,
/******/ 		// then flag all "ids" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0;
/******/ 		for(moduleId in __webpack_modules__) {
/******/ 			if(__webpack_require__.o(__webpack_modules__, moduleId)) {
/******/ 				__webpack_require__.m[moduleId] = __webpack_modules__[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(__webpack_runtime__) __webpack_runtime__(__webpack_require__);
/******/ 		for(;i < __webpack_ids__.length; i++) {
/******/ 			chunkId = __webpack_ids__[i];
/******/ 			if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				installedChunks[chunkId][0]();
/******/ 			}
/******/ 			installedChunks[__webpack_ids__[i]] = 0;
/******/ 		}
/******/ 	
/******/ 	}
/******/ 	
/******/ 	__webpack_require__.f.j = (chunkId, promises) => {
/******/ 			// import() chunk loading for javascript
/******/ 			var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 			if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 	
/******/ 				// a Promise means "currently loading".
/******/ 				if(installedChunkData) {
/******/ 					promises.push(installedChunkData[1]);
/******/ 				} else {
/******/ 					if(true) { // all chunks have JS
/******/ 						// setup Promise in chunk cache
/******/ 						var promise = import("./" + __webpack_require__.u(chunkId)).then(installChunk, (e) => {
/******/ 							if(installedChunks[chunkId] !== 0) installedChunks[chunkId] = undefined;
/******/ 							throw e;
/******/ 						});
/******/ 						var promise = Promise.race([promise, new Promise((resolve) => (installedChunkData = installedChunks[chunkId] = [resolve]))])
/******/ 						promises.push(installedChunkData[1] = promise);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 	};
/******/ 	
/******/ 	// no prefetching
/******/ 	
/******/ 	// no preloaded
/******/ 	
/******/ 	// no external install chunk
/******/ 	
/******/ 	// no on chunks loaded
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./main.mjs");
/******/ 
